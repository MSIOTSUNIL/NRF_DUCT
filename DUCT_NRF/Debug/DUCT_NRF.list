
DUCT_NRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b234  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c80  0800b348  0800b348  0000c348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfc8  0800bfc8  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfc8  0800bfc8  0000cfc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfd0  0800bfd0  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfd0  0800bfd0  0000cfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bfd4  0800bfd4  0000cfd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bfd8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  200001d8  0800c1ac  0000d1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  0800c1ac  0000d5c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c10  00000000  00000000  0000d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b4  00000000  00000000  0001fe0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  000235c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eac  00000000  00000000  000248e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8de  00000000  00000000  0002578c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017622  00000000  00000000  0004006a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f667  00000000  00000000  0005768c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6cf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006298  00000000  00000000  000e6d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000ecfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b32c 	.word	0x0800b32c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800b32c 	.word	0x0800b32c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <PROCESS_C02>:
uint8_t C02_LOW_BYTE = 0;

uint32_t PPM_VALUE;

//PROCESS CO2 SENSOR DATA
void PROCESS_C02(uint8_t c) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	switch (current_c02_state) {
 800109a:	4b41      	ldr	r3, [pc, #260]	@ (80011a0 <PROCESS_C02+0x110>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b0e      	cmp	r3, #14
 80010a0:	d879      	bhi.n	8001196 <PROCESS_C02+0x106>
 80010a2:	a201      	add	r2, pc, #4	@ (adr r2, 80010a8 <PROCESS_C02+0x18>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	080010e5 	.word	0x080010e5
 80010ac:	080010fb 	.word	0x080010fb
 80010b0:	08001111 	.word	0x08001111
 80010b4:	08001119 	.word	0x08001119
 80010b8:	08001121 	.word	0x08001121
 80010bc:	08001129 	.word	0x08001129
 80010c0:	08001131 	.word	0x08001131
 80010c4:	0800113f 	.word	0x0800113f
 80010c8:	0800115f 	.word	0x0800115f
 80010cc:	08001167 	.word	0x08001167
 80010d0:	0800116f 	.word	0x0800116f
 80010d4:	08001177 	.word	0x08001177
 80010d8:	0800117f 	.word	0x0800117f
 80010dc:	08001187 	.word	0x08001187
 80010e0:	0800118f 	.word	0x0800118f
	case CO2_STATE_BYTE_0:
		if (c == 0x42) {
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b42      	cmp	r3, #66	@ 0x42
 80010e8:	d103      	bne.n	80010f2 <PROCESS_C02+0x62>
			current_c02_state = CO2_STATE_BYTE_1;
 80010ea:	4b2d      	ldr	r3, [pc, #180]	@ (80011a0 <PROCESS_C02+0x110>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
		} else {
			current_c02_state = CO2_STATE_BYTE_0;
		}
		break;
 80010f0:	e051      	b.n	8001196 <PROCESS_C02+0x106>
			current_c02_state = CO2_STATE_BYTE_0;
 80010f2:	4b2b      	ldr	r3, [pc, #172]	@ (80011a0 <PROCESS_C02+0x110>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
		break;
 80010f8:	e04d      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_1:
		if (c == 0x4D) {
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b4d      	cmp	r3, #77	@ 0x4d
 80010fe:	d103      	bne.n	8001108 <PROCESS_C02+0x78>
			current_c02_state = CO2_STATE_BYTE_2;
 8001100:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <PROCESS_C02+0x110>)
 8001102:	2202      	movs	r2, #2
 8001104:	701a      	strb	r2, [r3, #0]
		} else {
			current_c02_state = CO2_STATE_BYTE_0;
		}
		break;
 8001106:	e046      	b.n	8001196 <PROCESS_C02+0x106>
			current_c02_state = CO2_STATE_BYTE_0;
 8001108:	4b25      	ldr	r3, [pc, #148]	@ (80011a0 <PROCESS_C02+0x110>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
		break;
 800110e:	e042      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_2:
		current_c02_state = CO2_STATE_BYTE_3;
 8001110:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <PROCESS_C02+0x110>)
 8001112:	2203      	movs	r2, #3
 8001114:	701a      	strb	r2, [r3, #0]
		break;
 8001116:	e03e      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_3:
		current_c02_state = CO2_STATE_BYTE_4;
 8001118:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <PROCESS_C02+0x110>)
 800111a:	2204      	movs	r2, #4
 800111c:	701a      	strb	r2, [r3, #0]
		break;
 800111e:	e03a      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_4:
		current_c02_state = CO2_STATE_BYTE_5;
 8001120:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <PROCESS_C02+0x110>)
 8001122:	2205      	movs	r2, #5
 8001124:	701a      	strb	r2, [r3, #0]
		break;
 8001126:	e036      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_5:
		current_c02_state = CO2_STATE_BYTE_6;
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <PROCESS_C02+0x110>)
 800112a:	2206      	movs	r2, #6
 800112c:	701a      	strb	r2, [r3, #0]
		break;
 800112e:	e032      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_6:
		current_c02_state = CO2_STATE_BYTE_7;
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <PROCESS_C02+0x110>)
 8001132:	2207      	movs	r2, #7
 8001134:	701a      	strb	r2, [r3, #0]
		C02_HIGH_BYTE = c;
 8001136:	4a1b      	ldr	r2, [pc, #108]	@ (80011a4 <PROCESS_C02+0x114>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	7013      	strb	r3, [r2, #0]
		break;
 800113c:	e02b      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_7:
		current_c02_state = CO2_STATE_BYTE_8;
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <PROCESS_C02+0x110>)
 8001140:	2208      	movs	r2, #8
 8001142:	701a      	strb	r2, [r3, #0]
		C02_LOW_BYTE = c;
 8001144:	4a18      	ldr	r2, [pc, #96]	@ (80011a8 <PROCESS_C02+0x118>)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	7013      	strb	r3, [r2, #0]
		PPM_VALUE = (C02_HIGH_BYTE*256) + C02_LOW_BYTE;
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <PROCESS_C02+0x114>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	4a15      	ldr	r2, [pc, #84]	@ (80011a8 <PROCESS_C02+0x118>)
 8001152:	7812      	ldrb	r2, [r2, #0]
 8001154:	4413      	add	r3, r2
 8001156:	461a      	mov	r2, r3
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <PROCESS_C02+0x11c>)
 800115a:	601a      	str	r2, [r3, #0]
		break;
 800115c:	e01b      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_8:
		current_c02_state = CO2_STATE_BYTE_9;
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <PROCESS_C02+0x110>)
 8001160:	2209      	movs	r2, #9
 8001162:	701a      	strb	r2, [r3, #0]
		break;
 8001164:	e017      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_9:
		current_c02_state = CO2_STATE_BYTE_10;
 8001166:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <PROCESS_C02+0x110>)
 8001168:	220a      	movs	r2, #10
 800116a:	701a      	strb	r2, [r3, #0]
		break;
 800116c:	e013      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_10:
		current_c02_state = CO2_STATE_BYTE_11;
 800116e:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <PROCESS_C02+0x110>)
 8001170:	220b      	movs	r2, #11
 8001172:	701a      	strb	r2, [r3, #0]
		break;
 8001174:	e00f      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_11:
		current_c02_state = CO2_STATE_BYTE_12;
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <PROCESS_C02+0x110>)
 8001178:	220c      	movs	r2, #12
 800117a:	701a      	strb	r2, [r3, #0]
		break;
 800117c:	e00b      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_12:
		current_c02_state = CO2_STATE_BYTE_13;
 800117e:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <PROCESS_C02+0x110>)
 8001180:	220d      	movs	r2, #13
 8001182:	701a      	strb	r2, [r3, #0]
		break;
 8001184:	e007      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_13:
		current_c02_state = CO2_STATE_BYTE_14;
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <PROCESS_C02+0x110>)
 8001188:	220e      	movs	r2, #14
 800118a:	701a      	strb	r2, [r3, #0]
		break;
 800118c:	e003      	b.n	8001196 <PROCESS_C02+0x106>
	case CO2_STATE_BYTE_14:
		current_c02_state = CO2_STATE_BYTE_0;
 800118e:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <PROCESS_C02+0x110>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
		break;
 8001194:	bf00      	nop
	}
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	200001f4 	.word	0x200001f4
 80011a4:	200001f5 	.word	0x200001f5
 80011a8:	200001f6 	.word	0x200001f6
 80011ac:	200001f8 	.word	0x200001f8

080011b0 <microDelay>:

//EXTERN
extern TIM_HandleTypeDef htim1;
extern float tCelsius;

void microDelay(uint16_t delay) {
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <microDelay+0x2c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 80011c2:	bf00      	nop
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <microDelay+0x2c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d3f9      	bcc.n	80011c4 <microDelay+0x14>
		;
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	20000378 	.word	0x20000378

080011e0 <DHT11_Start>:

uint8_t DHT11_Start(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
	GPIO_InitStructPrivate.Pin = DHT11_PIN;
 80011f6:	2310      	movs	r3, #16
 80011f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2302      	movs	r3, #2
 8001200:	613b      	str	r3, [r7, #16]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	482a      	ldr	r0, [pc, #168]	@ (80012b4 <DHT11_Start+0xd4>)
 800120c:	f003 f8a0 	bl	8004350 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001210:	2200      	movs	r2, #0
 8001212:	2110      	movs	r1, #16
 8001214:	4827      	ldr	r0, [pc, #156]	@ (80012b4 <DHT11_Start+0xd4>)
 8001216:	f003 fa36 	bl	8004686 <HAL_GPIO_WritePin>
	HAL_Delay(20);   // wait for 20ms
 800121a:	2014      	movs	r0, #20
 800121c:	f002 fcb4 	bl	8003b88 <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001220:	2201      	movs	r2, #1
 8001222:	2110      	movs	r1, #16
 8001224:	4823      	ldr	r0, [pc, #140]	@ (80012b4 <DHT11_Start+0xd4>)
 8001226:	f003 fa2e 	bl	8004686 <HAL_GPIO_WritePin>
	microDelay(30);   // wait for 30us
 800122a:	201e      	movs	r0, #30
 800122c:	f7ff ffc0 	bl	80011b0 <microDelay>
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001234:	2301      	movs	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4619      	mov	r1, r3
 800123c:	481d      	ldr	r0, [pc, #116]	@ (80012b4 <DHT11_Start+0xd4>)
 800123e:	f003 f887 	bl	8004350 <HAL_GPIO_Init>
	microDelay(40);
 8001242:	2028      	movs	r0, #40	@ 0x28
 8001244:	f7ff ffb4 	bl	80011b0 <microDelay>
	if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) {
 8001248:	2110      	movs	r1, #16
 800124a:	481a      	ldr	r0, [pc, #104]	@ (80012b4 <DHT11_Start+0xd4>)
 800124c:	f003 fa04 	bl	8004658 <HAL_GPIO_ReadPin>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10b      	bne.n	800126e <DHT11_Start+0x8e>
		microDelay(80);
 8001256:	2050      	movs	r0, #80	@ 0x50
 8001258:	f7ff ffaa 	bl	80011b0 <microDelay>
		if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 800125c:	2110      	movs	r1, #16
 800125e:	4815      	ldr	r0, [pc, #84]	@ (80012b4 <DHT11_Start+0xd4>)
 8001260:	f003 f9fa 	bl	8004658 <HAL_GPIO_ReadPin>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <DHT11_Start+0x8e>
			Response = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
	}
	pMillis = HAL_GetTick();
 800126e:	f002 fc81 	bl	8003b74 <HAL_GetTick>
 8001272:	4603      	mov	r3, r0
 8001274:	4a10      	ldr	r2, [pc, #64]	@ (80012b8 <DHT11_Start+0xd8>)
 8001276:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 8001278:	f002 fc7c 	bl	8003b74 <HAL_GetTick>
 800127c:	4603      	mov	r3, r0
 800127e:	4a0f      	ldr	r2, [pc, #60]	@ (80012bc <DHT11_Start+0xdc>)
 8001280:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 8001282:	e004      	b.n	800128e <DHT11_Start+0xae>
		cMillis = HAL_GetTick();
 8001284:	f002 fc76 	bl	8003b74 <HAL_GetTick>
 8001288:	4603      	mov	r3, r0
 800128a:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <DHT11_Start+0xdc>)
 800128c:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis) {
 800128e:	2110      	movs	r1, #16
 8001290:	4808      	ldr	r0, [pc, #32]	@ (80012b4 <DHT11_Start+0xd4>)
 8001292:	f003 f9e1 	bl	8004658 <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <DHT11_Start+0xca>
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <DHT11_Start+0xd8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	1c9a      	adds	r2, r3, #2
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <DHT11_Start+0xdc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d8ec      	bhi.n	8001284 <DHT11_Start+0xa4>
	}
	return Response;
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40010800 	.word	0x40010800
 80012b8:	20000204 	.word	0x20000204
 80012bc:	20000208 	.word	0x20000208

080012c0 <DHT11_Read>:

uint8_t DHT11_Read(void) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	uint8_t a, b;
	for (a = 0; a < 8; a++) {
 80012c6:	2300      	movs	r3, #0
 80012c8:	71fb      	strb	r3, [r7, #7]
 80012ca:	e063      	b.n	8001394 <DHT11_Read+0xd4>
		pMillis = HAL_GetTick();
 80012cc:	f002 fc52 	bl	8003b74 <HAL_GetTick>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a34      	ldr	r2, [pc, #208]	@ (80013a4 <DHT11_Read+0xe4>)
 80012d4:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 80012d6:	f002 fc4d 	bl	8003b74 <HAL_GetTick>
 80012da:	4603      	mov	r3, r0
 80012dc:	4a32      	ldr	r2, [pc, #200]	@ (80013a8 <DHT11_Read+0xe8>)
 80012de:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 80012e0:	e004      	b.n	80012ec <DHT11_Read+0x2c>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
			cMillis = HAL_GetTick();
 80012e2:	f002 fc47 	bl	8003b74 <HAL_GetTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a2f      	ldr	r2, [pc, #188]	@ (80013a8 <DHT11_Read+0xe8>)
 80012ea:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 80012ec:	2110      	movs	r1, #16
 80012ee:	482f      	ldr	r0, [pc, #188]	@ (80013ac <DHT11_Read+0xec>)
 80012f0:	f003 f9b2 	bl	8004658 <HAL_GPIO_ReadPin>
 80012f4:	4603      	mov	r3, r0
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <DHT11_Read+0x48>
 80012fa:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <DHT11_Read+0xe4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	1c9a      	adds	r2, r3, #2
 8001300:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <DHT11_Read+0xe8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8ec      	bhi.n	80012e2 <DHT11_Read+0x22>
		}
		microDelay(40);   // wait for 40 us
 8001308:	2028      	movs	r0, #40	@ 0x28
 800130a:	f7ff ff51 	bl	80011b0 <microDelay>
		if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800130e:	2110      	movs	r1, #16
 8001310:	4826      	ldr	r0, [pc, #152]	@ (80013ac <DHT11_Read+0xec>)
 8001312:	f003 f9a1 	bl	8004658 <HAL_GPIO_ReadPin>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10e      	bne.n	800133a <DHT11_Read+0x7a>
			b &= ~(1 << (7 - a));
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2201      	movs	r2, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	b25b      	sxtb	r3, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	b25a      	sxtb	r2, r3
 800132e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001332:	4013      	ands	r3, r2
 8001334:	b25b      	sxtb	r3, r3
 8001336:	71bb      	strb	r3, [r7, #6]
 8001338:	e00b      	b.n	8001352 <DHT11_Read+0x92>
		else
			b |= (1 << (7 - a));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f1c3 0307 	rsb	r3, r3, #7
 8001340:	2201      	movs	r2, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	b25a      	sxtb	r2, r3
 8001348:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800134c:	4313      	orrs	r3, r2
 800134e:	b25b      	sxtb	r3, r3
 8001350:	71bb      	strb	r3, [r7, #6]
		pMillis = HAL_GetTick();
 8001352:	f002 fc0f 	bl	8003b74 <HAL_GetTick>
 8001356:	4603      	mov	r3, r0
 8001358:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <DHT11_Read+0xe4>)
 800135a:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 800135c:	f002 fc0a 	bl	8003b74 <HAL_GetTick>
 8001360:	4603      	mov	r3, r0
 8001362:	4a11      	ldr	r2, [pc, #68]	@ (80013a8 <DHT11_Read+0xe8>)
 8001364:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001366:	e004      	b.n	8001372 <DHT11_Read+0xb2>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
			cMillis = HAL_GetTick();
 8001368:	f002 fc04 	bl	8003b74 <HAL_GetTick>
 800136c:	4603      	mov	r3, r0
 800136e:	4a0e      	ldr	r2, [pc, #56]	@ (80013a8 <DHT11_Read+0xe8>)
 8001370:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8001372:	2110      	movs	r1, #16
 8001374:	480d      	ldr	r0, [pc, #52]	@ (80013ac <DHT11_Read+0xec>)
 8001376:	f003 f96f 	bl	8004658 <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
 800137c:	2b00      	cmp	r3, #0
 800137e:	d006      	beq.n	800138e <DHT11_Read+0xce>
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <DHT11_Read+0xe4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	1c9a      	adds	r2, r3, #2
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <DHT11_Read+0xe8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d8ec      	bhi.n	8001368 <DHT11_Read+0xa8>
	for (a = 0; a < 8; a++) {
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	3301      	adds	r3, #1
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b07      	cmp	r3, #7
 8001398:	d998      	bls.n	80012cc <DHT11_Read+0xc>
		}
	}
	return b;
 800139a:	79bb      	ldrb	r3, [r7, #6]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000204 	.word	0x20000204
 80013a8:	20000208 	.word	0x20000208
 80013ac:	40010800 	.word	0x40010800

080013b0 <DHT11_READ_TEMP_AND_HUM>:

bool DHT11_READ_TEMP_AND_HUM() {
 80013b0:	b598      	push	{r3, r4, r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	if (DHT11_Start()) {
 80013b4:	f7ff ff14 	bl	80011e0 <DHT11_Start>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 808a 	beq.w	80014d4 <DHT11_READ_TEMP_AND_HUM+0x124>
		RHI = DHT11_Read(); // Relative humidity integral
 80013c0:	f7ff ff7e 	bl	80012c0 <DHT11_Read>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b43      	ldr	r3, [pc, #268]	@ (80014d8 <DHT11_READ_TEMP_AND_HUM+0x128>)
 80013ca:	701a      	strb	r2, [r3, #0]
		RHD = DHT11_Read(); // Relative humidity decimal
 80013cc:	f7ff ff78 	bl	80012c0 <DHT11_Read>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b41      	ldr	r3, [pc, #260]	@ (80014dc <DHT11_READ_TEMP_AND_HUM+0x12c>)
 80013d6:	701a      	strb	r2, [r3, #0]
		TCI = DHT11_Read(); // Celsius integral
 80013d8:	f7ff ff72 	bl	80012c0 <DHT11_Read>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	4b3f      	ldr	r3, [pc, #252]	@ (80014e0 <DHT11_READ_TEMP_AND_HUM+0x130>)
 80013e2:	701a      	strb	r2, [r3, #0]
		TCD = DHT11_Read(); // Celsius decimal
 80013e4:	f7ff ff6c 	bl	80012c0 <DHT11_Read>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b3d      	ldr	r3, [pc, #244]	@ (80014e4 <DHT11_READ_TEMP_AND_HUM+0x134>)
 80013ee:	701a      	strb	r2, [r3, #0]
		SUM = DHT11_Read(); // Check sum
 80013f0:	f7ff ff66 	bl	80012c0 <DHT11_Read>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b3b      	ldr	r3, [pc, #236]	@ (80014e8 <DHT11_READ_TEMP_AND_HUM+0x138>)
 80013fa:	701a      	strb	r2, [r3, #0]
		if (RHI + RHD + TCI + TCD == SUM) {
 80013fc:	4b36      	ldr	r3, [pc, #216]	@ (80014d8 <DHT11_READ_TEMP_AND_HUM+0x128>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b36      	ldr	r3, [pc, #216]	@ (80014dc <DHT11_READ_TEMP_AND_HUM+0x12c>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a35      	ldr	r2, [pc, #212]	@ (80014e0 <DHT11_READ_TEMP_AND_HUM+0x130>)
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	4413      	add	r3, r2
 800140e:	4a35      	ldr	r2, [pc, #212]	@ (80014e4 <DHT11_READ_TEMP_AND_HUM+0x134>)
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a34      	ldr	r2, [pc, #208]	@ (80014e8 <DHT11_READ_TEMP_AND_HUM+0x138>)
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	4293      	cmp	r3, r2
 800141a:	d159      	bne.n	80014d0 <DHT11_READ_TEMP_AND_HUM+0x120>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800141c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001420:	4832      	ldr	r0, [pc, #200]	@ (80014ec <DHT11_READ_TEMP_AND_HUM+0x13c>)
 8001422:	f003 f948 	bl	80046b6 <HAL_GPIO_TogglePin>
			// Can use RHI and TCI for any purposes if whole number only needed
			tCelsius = (float) TCI + (float) (TCD / 10.0);
 8001426:	4b2e      	ldr	r3, [pc, #184]	@ (80014e0 <DHT11_READ_TEMP_AND_HUM+0x130>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fc52 	bl	8000cd4 <__aeabi_ui2f>
 8001430:	4604      	mov	r4, r0
 8001432:	4b2c      	ldr	r3, [pc, #176]	@ (80014e4 <DHT11_READ_TEMP_AND_HUM+0x134>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe ffe4 	bl	8000404 <__aeabi_i2d>
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b2b      	ldr	r3, [pc, #172]	@ (80014f0 <DHT11_READ_TEMP_AND_HUM+0x140>)
 8001442:	f7ff f973 	bl	800072c <__aeabi_ddiv>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fb3b 	bl	8000ac8 <__aeabi_d2f>
 8001452:	4603      	mov	r3, r0
 8001454:	4619      	mov	r1, r3
 8001456:	4620      	mov	r0, r4
 8001458:	f7ff fb8c 	bl	8000b74 <__addsf3>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <DHT11_READ_TEMP_AND_HUM+0x144>)
 8001462:	601a      	str	r2, [r3, #0]
			tFahrenheit = tCelsius * 9 / 5 + 32;
 8001464:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <DHT11_READ_TEMP_AND_HUM+0x144>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4923      	ldr	r1, [pc, #140]	@ (80014f8 <DHT11_READ_TEMP_AND_HUM+0x148>)
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fc8a 	bl	8000d84 <__aeabi_fmul>
 8001470:	4603      	mov	r3, r0
 8001472:	4922      	ldr	r1, [pc, #136]	@ (80014fc <DHT11_READ_TEMP_AND_HUM+0x14c>)
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fd39 	bl	8000eec <__aeabi_fdiv>
 800147a:	4603      	mov	r3, r0
 800147c:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fb77 	bl	8000b74 <__addsf3>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <DHT11_READ_TEMP_AND_HUM+0x150>)
 800148c:	601a      	str	r2, [r3, #0]
			RH = (float) RHI + (float) (RHD / 10.0);
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <DHT11_READ_TEMP_AND_HUM+0x128>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fc1e 	bl	8000cd4 <__aeabi_ui2f>
 8001498:	4604      	mov	r4, r0
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <DHT11_READ_TEMP_AND_HUM+0x12c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe ffb0 	bl	8000404 <__aeabi_i2d>
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <DHT11_READ_TEMP_AND_HUM+0x140>)
 80014aa:	f7ff f93f 	bl	800072c <__aeabi_ddiv>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff fb07 	bl	8000ac8 <__aeabi_d2f>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4619      	mov	r1, r3
 80014be:	4620      	mov	r0, r4
 80014c0:	f7ff fb58 	bl	8000b74 <__addsf3>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <DHT11_READ_TEMP_AND_HUM+0x154>)
 80014ca:	601a      	str	r2, [r3, #0]
			// Can use tCelsius, tFahrenheit and RH for any purposes
			return true;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e001      	b.n	80014d4 <DHT11_READ_TEMP_AND_HUM+0x124>
		}
		return false;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e7ff      	b.n	80014d4 <DHT11_READ_TEMP_AND_HUM+0x124>
	}
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	bd98      	pop	{r3, r4, r7, pc}
 80014d8:	200001fc 	.word	0x200001fc
 80014dc:	200001fd 	.word	0x200001fd
 80014e0:	200001fe 	.word	0x200001fe
 80014e4:	200001ff 	.word	0x200001ff
 80014e8:	20000200 	.word	0x20000200
 80014ec:	40011000 	.word	0x40011000
 80014f0:	40240000 	.word	0x40240000
 80014f4:	2000020c 	.word	0x2000020c
 80014f8:	41100000 	.word	0x41100000
 80014fc:	40a00000 	.word	0x40a00000
 8001500:	20000210 	.word	0x20000210
 8001504:	20000214 	.word	0x20000214

08001508 <NRF24_DelayMicroSeconds>:
//Debugging UART handle
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec) {
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar * ((SystemCoreClock / 1000000) / 3);
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <NRF24_DelayMicroSeconds+0x38>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <NRF24_DelayMicroSeconds+0x3c>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0c9a      	lsrs	r2, r3, #18
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	60fb      	str	r3, [r7, #12]
	while (uSecVar--)
 8001528:	bf00      	nop
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1e5a      	subs	r2, r3, #1
 800152e:	60fa      	str	r2, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1fa      	bne.n	800152a <NRF24_DelayMicroSeconds+0x22>
		;
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000000 	.word	0x20000000
 8001544:	165e9f81 	.word	0x165e9f81

08001548 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	if (state)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d008      	beq.n	8001568 <NRF24_csn+0x20>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001556:	4b0a      	ldr	r3, [pc, #40]	@ (8001580 <NRF24_csn+0x38>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <NRF24_csn+0x3c>)
 800155c:	8811      	ldrh	r1, [r2, #0]
 800155e:	2201      	movs	r2, #1
 8001560:	4618      	mov	r0, r3
 8001562:	f003 f890 	bl	8004686 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8001566:	e007      	b.n	8001578 <NRF24_csn+0x30>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <NRF24_csn+0x38>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a05      	ldr	r2, [pc, #20]	@ (8001584 <NRF24_csn+0x3c>)
 800156e:	8811      	ldrh	r1, [r2, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f003 f887 	bl	8004686 <HAL_GPIO_WritePin>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000228 	.word	0x20000228
 8001584:	2000022c 	.word	0x2000022c

08001588 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	if (state)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <NRF24_ce+0x20>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001596:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <NRF24_ce+0x38>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <NRF24_ce+0x3c>)
 800159c:	8811      	ldrh	r1, [r2, #0]
 800159e:	2201      	movs	r2, #1
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 f870 	bl	8004686 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80015a6:	e007      	b.n	80015b8 <NRF24_ce+0x30>
		HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <NRF24_ce+0x38>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a05      	ldr	r2, [pc, #20]	@ (80015c4 <NRF24_ce+0x3c>)
 80015ae:	8811      	ldrh	r1, [r2, #0]
 80015b0:	2200      	movs	r2, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 f867 	bl	8004686 <HAL_GPIO_WritePin>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000228 	.word	0x20000228
 80015c4:	2000022e 	.word	0x2000022e

080015c8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff ffb8 	bl	8001548 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80015e2:	f107 010c 	add.w	r1, r7, #12
 80015e6:	2364      	movs	r3, #100	@ 0x64
 80015e8:	2201      	movs	r2, #1
 80015ea:	480a      	ldr	r0, [pc, #40]	@ (8001614 <NRF24_read_register+0x4c>)
 80015ec:	f003 fd10 	bl	8005010 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	1c59      	adds	r1, r3, #1
 80015f6:	2364      	movs	r3, #100	@ 0x64
 80015f8:	2201      	movs	r2, #1
 80015fa:	4806      	ldr	r0, [pc, #24]	@ (8001614 <NRF24_read_register+0x4c>)
 80015fc:	f003 fe4b 	bl	8005296 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001600:	7b7b      	ldrb	r3, [r7, #13]
 8001602:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff ff9f 	bl	8001548 <NRF24_csn>
	return retData;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000230 	.word	0x20000230

08001618 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	4613      	mov	r3, r2
 8001626:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff ff8d 	bl	8001548 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg & 0x1F;
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f003 031f 	and.w	r3, r3, #31
 8001634:	b2db      	uxtb	r3, r3
 8001636:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001638:	f107 010c 	add.w	r1, r7, #12
 800163c:	2364      	movs	r3, #100	@ 0x64
 800163e:	2201      	movs	r2, #1
 8001640:	4808      	ldr	r0, [pc, #32]	@ (8001664 <NRF24_read_registerN+0x4c>)
 8001642:	f003 fce5 	bl	8005010 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8001646:	79bb      	ldrb	r3, [r7, #6]
 8001648:	b29a      	uxth	r2, r3
 800164a:	2364      	movs	r3, #100	@ 0x64
 800164c:	6839      	ldr	r1, [r7, #0]
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <NRF24_read_registerN+0x4c>)
 8001650:	f003 fe21 	bl	8005296 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff ff77 	bl	8001548 <NRF24_csn>
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000230 	.word	0x20000230

08001668 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	460a      	mov	r2, r1
 8001672:	71fb      	strb	r3, [r7, #7]
 8001674:	4613      	mov	r3, r2
 8001676:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff ff65 	bl	8001548 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	b2db      	uxtb	r3, r3
 8001686:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800168c:	f107 010c 	add.w	r1, r7, #12
 8001690:	2364      	movs	r3, #100	@ 0x64
 8001692:	2202      	movs	r2, #2
 8001694:	4804      	ldr	r0, [pc, #16]	@ (80016a8 <NRF24_write_register+0x40>)
 8001696:	f003 fcbb 	bl	8005010 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800169a:	2001      	movs	r0, #1
 800169c:	f7ff ff54 	bl	8001548 <NRF24_csn>
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000230 	.word	0x20000230

080016ac <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t *buf, uint8_t len) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	4613      	mov	r3, r2
 80016ba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff ff43 	bl	8001548 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg | 0x20;
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f043 0320 	orr.w	r3, r3, #32
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80016cc:	f107 010c 	add.w	r1, r7, #12
 80016d0:	2364      	movs	r3, #100	@ 0x64
 80016d2:	2201      	movs	r2, #1
 80016d4:	4808      	ldr	r0, [pc, #32]	@ (80016f8 <NRF24_write_registerN+0x4c>)
 80016d6:	f003 fc9b 	bl	8005010 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*) buf, len, 100);
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	2364      	movs	r3, #100	@ 0x64
 80016e0:	6839      	ldr	r1, [r7, #0]
 80016e2:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <NRF24_write_registerN+0x4c>)
 80016e4:	f003 fc94 	bl	8005010 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff ff2d 	bl	8001548 <NRF24_csn>
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000230 	.word	0x20000230

080016fc <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void *buf, uint8_t len) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff ff1d 	bl	8001548 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800170e:	23a0      	movs	r3, #160	@ 0xa0
 8001710:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8001712:	f107 010f 	add.w	r1, r7, #15
 8001716:	2364      	movs	r3, #100	@ 0x64
 8001718:	2201      	movs	r2, #1
 800171a:	4808      	ldr	r0, [pc, #32]	@ (800173c <NRF24_write_payload+0x40>)
 800171c:	f003 fc78 	bl	8005010 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*) buf, len, 100);
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	b29a      	uxth	r2, r3
 8001724:	2364      	movs	r3, #100	@ 0x64
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4804      	ldr	r0, [pc, #16]	@ (800173c <NRF24_write_payload+0x40>)
 800172a:	f003 fc71 	bl	8005010 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800172e:	2001      	movs	r0, #1
 8001730:	f7ff ff0a 	bl	8001548 <NRF24_csn>
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000230 	.word	0x20000230

08001740 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void *buf, uint8_t len) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800174c:	f000 fa84 	bl	8001c58 <NRF24_getPayloadSize>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	4293      	cmp	r3, r2
 8001758:	d303      	bcc.n	8001762 <NRF24_read_payload+0x22>
 800175a:	f000 fa7d 	bl	8001c58 <NRF24_getPayloadSize>
 800175e:	4603      	mov	r3, r0
 8001760:	e000      	b.n	8001764 <NRF24_read_payload+0x24>
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff feee 	bl	8001548 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 800176c:	2361      	movs	r3, #97	@ 0x61
 800176e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001770:	f107 010e 	add.w	r1, r7, #14
 8001774:	2364      	movs	r3, #100	@ 0x64
 8001776:	2201      	movs	r2, #1
 8001778:	4808      	ldr	r0, [pc, #32]	@ (800179c <NRF24_read_payload+0x5c>)
 800177a:	f003 fc49 	bl	8005010 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, (uint8_t*) buf, data_len, 100);
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	b29a      	uxth	r2, r3
 8001782:	2364      	movs	r3, #100	@ 0x64
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4805      	ldr	r0, [pc, #20]	@ (800179c <NRF24_read_payload+0x5c>)
 8001788:	f003 fd85 	bl	8005296 <HAL_SPI_Receive>
	NRF24_csn(1);
 800178c:	2001      	movs	r0, #1
 800178e:	f7ff fedb 	bl	8001548 <NRF24_csn>
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000230 	.word	0x20000230

080017a0 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80017a4:	21ff      	movs	r1, #255	@ 0xff
 80017a6:	20e1      	movs	r0, #225	@ 0xe1
 80017a8:	f7ff ff5e 	bl	8001668 <NRF24_write_register>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80017b4:	21ff      	movs	r1, #255	@ 0xff
 80017b6:	20e2      	movs	r0, #226	@ 0xe2
 80017b8:	f7ff ff56 	bl	8001668 <NRF24_write_register>
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80017c6:	2007      	movs	r0, #7
 80017c8:	f7ff fefe 	bl	80015c8 <NRF24_read_register>
 80017cc:	4603      	mov	r3, r0
 80017ce:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80017d0:	79fb      	ldrb	r3, [r7, #7]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin,
		uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI) {
 80017dc:	b082      	sub	sp, #8
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
 80017ec:	4613      	mov	r3, r2
 80017ee:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80017f0:	4b66      	ldr	r3, [pc, #408]	@ (800198c <NRF24_begin+0x1b0>)
 80017f2:	4618      	mov	r0, r3
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	2258      	movs	r2, #88	@ 0x58
 80017fa:	4619      	mov	r1, r3
 80017fc:	f006 fa6d 	bl	8007cda <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001800:	4a63      	ldr	r2, [pc, #396]	@ (8001990 <NRF24_begin+0x1b4>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001806:	4a63      	ldr	r2, [pc, #396]	@ (8001994 <NRF24_begin+0x1b8>)
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800180c:	4a62      	ldr	r2, [pc, #392]	@ (8001998 <NRF24_begin+0x1bc>)
 800180e:	883b      	ldrh	r3, [r7, #0]
 8001810:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 8001812:	2001      	movs	r0, #1
 8001814:	f7ff fe98 	bl	8001548 <NRF24_csn>
	NRF24_ce(0);
 8001818:	2000      	movs	r0, #0
 800181a:	f7ff feb5 	bl	8001588 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800181e:	2005      	movs	r0, #5
 8001820:	f002 f9b2 	bl	8003b88 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8001824:	2108      	movs	r1, #8
 8001826:	2000      	movs	r0, #0
 8001828:	f7ff ff1e 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800182c:	213f      	movs	r1, #63	@ 0x3f
 800182e:	2001      	movs	r0, #1
 8001830:	f7ff ff1a 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001834:	2103      	movs	r1, #3
 8001836:	2002      	movs	r0, #2
 8001838:	f7ff ff16 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800183c:	2103      	movs	r1, #3
 800183e:	2003      	movs	r0, #3
 8001840:	f7ff ff12 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001844:	2103      	movs	r1, #3
 8001846:	2004      	movs	r0, #4
 8001848:	f7ff ff0e 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800184c:	2102      	movs	r1, #2
 800184e:	2005      	movs	r0, #5
 8001850:	f7ff ff0a 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001854:	210f      	movs	r1, #15
 8001856:	2006      	movs	r0, #6
 8001858:	f7ff ff06 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800185c:	210e      	movs	r1, #14
 800185e:	2007      	movs	r0, #7
 8001860:	f7ff ff02 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001864:	2100      	movs	r1, #0
 8001866:	2008      	movs	r0, #8
 8001868:	f7ff fefe 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800186c:	2100      	movs	r1, #0
 800186e:	2009      	movs	r0, #9
 8001870:	f7ff fefa 	bl	8001668 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4] = 0xE7;
 8001874:	23e7      	movs	r3, #231	@ 0xe7
 8001876:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xE7;
 8001878:	23e7      	movs	r3, #231	@ 0xe7
 800187a:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xE7;
 800187c:	23e7      	movs	r3, #231	@ 0xe7
 800187e:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xE7;
 8001880:	23e7      	movs	r3, #231	@ 0xe7
 8001882:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xE7;
 8001884:	23e7      	movs	r3, #231	@ 0xe7
 8001886:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	2205      	movs	r2, #5
 800188e:	4619      	mov	r1, r3
 8001890:	200a      	movs	r0, #10
 8001892:	f7ff ff0b 	bl	80016ac <NRF24_write_registerN>
	pipeAddrVar[4] = 0xC2;
 8001896:	23c2      	movs	r3, #194	@ 0xc2
 8001898:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xC2;
 800189a:	23c2      	movs	r3, #194	@ 0xc2
 800189c:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xC2;
 800189e:	23c2      	movs	r3, #194	@ 0xc2
 80018a0:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xC2;
 80018a2:	23c2      	movs	r3, #194	@ 0xc2
 80018a4:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xC2;
 80018a6:	23c2      	movs	r3, #194	@ 0xc2
 80018a8:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	2205      	movs	r2, #5
 80018b0:	4619      	mov	r1, r3
 80018b2:	200b      	movs	r0, #11
 80018b4:	f7ff fefa 	bl	80016ac <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80018b8:	21c3      	movs	r1, #195	@ 0xc3
 80018ba:	200c      	movs	r0, #12
 80018bc:	f7ff fed4 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80018c0:	21c4      	movs	r1, #196	@ 0xc4
 80018c2:	200d      	movs	r0, #13
 80018c4:	f7ff fed0 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80018c8:	21c5      	movs	r1, #197	@ 0xc5
 80018ca:	200e      	movs	r0, #14
 80018cc:	f7ff fecc 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80018d0:	21c6      	movs	r1, #198	@ 0xc6
 80018d2:	200f      	movs	r0, #15
 80018d4:	f7ff fec8 	bl	8001668 <NRF24_write_register>
	pipeAddrVar[4] = 0xE7;
 80018d8:	23e7      	movs	r3, #231	@ 0xe7
 80018da:	733b      	strb	r3, [r7, #12]
	pipeAddrVar[3] = 0xE7;
 80018dc:	23e7      	movs	r3, #231	@ 0xe7
 80018de:	72fb      	strb	r3, [r7, #11]
	pipeAddrVar[2] = 0xE7;
 80018e0:	23e7      	movs	r3, #231	@ 0xe7
 80018e2:	72bb      	strb	r3, [r7, #10]
	pipeAddrVar[1] = 0xE7;
 80018e4:	23e7      	movs	r3, #231	@ 0xe7
 80018e6:	727b      	strb	r3, [r7, #9]
	pipeAddrVar[0] = 0xE7;
 80018e8:	23e7      	movs	r3, #231	@ 0xe7
 80018ea:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	2205      	movs	r2, #5
 80018f2:	4619      	mov	r1, r3
 80018f4:	2010      	movs	r0, #16
 80018f6:	f7ff fed9 	bl	80016ac <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80018fa:	2100      	movs	r1, #0
 80018fc:	2011      	movs	r0, #17
 80018fe:	f7ff feb3 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001902:	2100      	movs	r1, #0
 8001904:	2012      	movs	r0, #18
 8001906:	f7ff feaf 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800190a:	2100      	movs	r1, #0
 800190c:	2013      	movs	r0, #19
 800190e:	f7ff feab 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001912:	2100      	movs	r1, #0
 8001914:	2014      	movs	r0, #20
 8001916:	f7ff fea7 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800191a:	2100      	movs	r1, #0
 800191c:	2015      	movs	r0, #21
 800191e:	f7ff fea3 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001922:	2100      	movs	r1, #0
 8001924:	2016      	movs	r0, #22
 8001926:	f7ff fe9f 	bl	8001668 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 800192a:	f000 fb11 	bl	8001f50 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800192e:	2100      	movs	r1, #0
 8001930:	201c      	movs	r0, #28
 8001932:	f7ff fe99 	bl	8001668 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001936:	2100      	movs	r1, #0
 8001938:	201d      	movs	r0, #29
 800193a:	f7ff fe95 	bl	8001668 <NRF24_write_register>
	printRadioSettings();
 800193e:	f000 fb21 	bl	8001f84 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001942:	210f      	movs	r1, #15
 8001944:	200f      	movs	r0, #15
 8001946:	f000 f941 	bl	8001bcc <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800194a:	2003      	movs	r0, #3
 800194c:	f000 f9ae 	bl	8001cac <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8001950:	2001      	movs	r0, #1
 8001952:	f000 f9e5 	bl	8001d20 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001956:	2002      	movs	r0, #2
 8001958:	f000 fa28 	bl	8001dac <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800195c:	f000 f98e 	bl	8001c7c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8001960:	2020      	movs	r0, #32
 8001962:	f000 f963 	bl	8001c2c <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8001966:	f000 faea 	bl	8001f3e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800196a:	204c      	movs	r0, #76	@ 0x4c
 800196c:	f000 f949 	bl	8001c02 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8001970:	f7ff ff16 	bl	80017a0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001974:	f7ff ff1c 	bl	80017b0 <NRF24_flush_rx>

	NRF24_powerDown();
 8001978:	f000 fa40 	bl	8001dfc <NRF24_powerDown>

}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001986:	b002      	add	sp, #8
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000230 	.word	0x20000230
 8001990:	20000228 	.word	0x20000228
 8001994:	2000022c 	.word	0x2000022c
 8001998:	2000022e 	.word	0x2000022e

0800199c <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) | (1UL << 1) | (1UL << 0));
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fe11 	bl	80015c8 <NRF24_read_register>
 80019a6:	4603      	mov	r3, r0
	NRF24_write_register(REG_CONFIG,
 80019a8:	f043 0303 	orr.w	r3, r3, #3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4619      	mov	r1, r3
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff fe59 	bl	8001668 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if (pipe0_reading_address)
 80019b6:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <NRF24_startListening+0x48>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	4313      	orrs	r3, r2
 80019be:	d004      	beq.n	80019ca <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0,
 80019c0:	2205      	movs	r2, #5
 80019c2:	4908      	ldr	r1, [pc, #32]	@ (80019e4 <NRF24_startListening+0x48>)
 80019c4:	200a      	movs	r0, #10
 80019c6:	f7ff fe71 	bl	80016ac <NRF24_write_registerN>
				(uint8_t*) (&pipe0_reading_address), 5);

	//Flush buffers
	NRF24_flush_tx();
 80019ca:	f7ff fee9 	bl	80017a0 <NRF24_flush_tx>
	NRF24_flush_rx();
 80019ce:	f7ff feef 	bl	80017b0 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f7ff fdd8 	bl	8001588 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80019d8:	2096      	movs	r0, #150	@ 0x96
 80019da:	f7ff fd95 	bl	8001508 <NRF24_DelayMicroSeconds>
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000218 	.word	0x20000218

080019e8 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f7ff fdcb 	bl	8001588 <NRF24_ce>
	NRF24_flush_tx();
 80019f2:	f7ff fed5 	bl	80017a0 <NRF24_flush_tx>
	NRF24_flush_rx();
 80019f6:	f7ff fedb 	bl	80017b0 <NRF24_flush_rx>
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write(const void *buf, uint8_t len) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8001a0c:	f000 fa97 	bl	8001f3e <NRF24_resetStatus>
	NRF24_startWrite(buf, len);
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	4619      	mov	r1, r3
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fa30 	bl	8001e7a <NRF24_startWrite>
	//Data monitor
	uint8_t observe_tx;
	uint8_t status;
	uint32_t sent_at = HAL_GetTick();
 8001a1a:	f002 f8ab 	bl	8003b74 <HAL_GetTick>
 8001a1e:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001a20:	230a      	movs	r3, #10
 8001a22:	613b      	str	r3, [r7, #16]
	do {
		NRF24_read_registerN(REG_OBSERVE_TX, &observe_tx, 1);
 8001a24:	f107 030d 	add.w	r3, r7, #13
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	2008      	movs	r0, #8
 8001a2e:	f7ff fdf3 	bl	8001618 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8001a32:	f7ff fec5 	bl	80017c0 <NRF24_get_status>
 8001a36:	4603      	mov	r3, r0
 8001a38:	73fb      	strb	r3, [r7, #15]
	} while (!(status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT)))
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
			&& (HAL_GetTick() - sent_at < timeout));
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <NRF24_write+0x54>
 8001a44:	f002 f896 	bl	8003b74 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d8e7      	bhi.n	8001a24 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
	NRF24_whatHappened(&tx_ok, &tx_fail, &ack_payload_available);
 8001a54:	f107 010b 	add.w	r1, r7, #11
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a90 <NRF24_write+0x90>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 fa3a 	bl	8001ed8 <NRF24_whatHappened>
	retStatus = tx_ok;
 8001a64:	7b3b      	ldrb	r3, [r7, #12]
 8001a66:	73bb      	strb	r3, [r7, #14]
	if (ack_payload_available) {
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <NRF24_write+0x90>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <NRF24_write+0x7c>
		ack_payload_length = NRF24_getDynamicPayloadSize();
 8001a70:	f000 f8fc 	bl	8001c6c <NRF24_getDynamicPayloadSize>
 8001a74:	4603      	mov	r3, r0
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <NRF24_write+0x94>)
 8001a7a:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 8001a7c:	f000 f80c 	bl	8001a98 <NRF24_available>
	NRF24_flush_tx();
 8001a80:	f7ff fe8e 	bl	80017a0 <NRF24_flush_tx>
	return retStatus;
 8001a84:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000220 	.word	0x20000220
 8001a94:	20000221 	.word	0x20000221

08001a98 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f000 f9bc 	bl	8001e1a <NRF24_availablePipe>
 8001aa2:	4603      	mov	r3, r0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <NRF24_read>:
//17. Read received data
bool NRF24_read(void *buf, uint8_t len) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload(buf, len);
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fe41 	bl	8001740 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001abe:	2017      	movs	r0, #23
 8001ac0:	f7ff fd82 	bl	80015c8 <NRF24_read_register>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001acc:	f7ff fe70 	bl	80017b0 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001ad0:	f000 f8cc 	bl	8001c6c <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf14      	ite	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	2300      	moveq	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t*) (&address), 5);
 8001af2:	463b      	mov	r3, r7
 8001af4:	2205      	movs	r2, #5
 8001af6:	4619      	mov	r1, r3
 8001af8:	200a      	movs	r0, #10
 8001afa:	f7ff fdd7 	bl	80016ac <NRF24_write_registerN>
	NRF24_write_registerN(REG_TX_ADDR, (uint8_t*) (&address), 5);
 8001afe:	463b      	mov	r3, r7
 8001b00:	2205      	movs	r2, #5
 8001b02:	4619      	mov	r1, r3
 8001b04:	2010      	movs	r0, #16
 8001b06:	f7ff fdd1 	bl	80016ac <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RX_PW_P0, MIN(payload_size, max_payload_size));
 8001b0e:	4b07      	ldr	r3, [pc, #28]	@ (8001b2c <NRF24_openWritingPipe+0x44>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	4293      	cmp	r3, r2
 8001b16:	bf28      	it	cs
 8001b18:	4613      	movcs	r3, r2
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	2011      	movs	r0, #17
 8001b20:	f7ff fda2 	bl	8001668 <NRF24_write_register>
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000222 	.word	0x20000222

08001b30 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4601      	mov	r1, r0
 8001b38:	e9c7 2300 	strd	r2, r3, [r7]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d104      	bne.n	8001b50 <NRF24_openReadingPipe+0x20>
		pipe0_reading_address = address;
 8001b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b4a:	491c      	ldr	r1, [pc, #112]	@ (8001bbc <NRF24_openReadingPipe+0x8c>)
 8001b4c:	e9c1 2300 	strd	r2, r3, [r1]

	if (number <= 6) {
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	2b06      	cmp	r3, #6
 8001b54:	d82d      	bhi.n	8001bb2 <NRF24_openReadingPipe+0x82>
		if (number < 2) {
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d808      	bhi.n	8001b6e <NRF24_openReadingPipe+0x3e>
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number],
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	4a18      	ldr	r2, [pc, #96]	@ (8001bc0 <NRF24_openReadingPipe+0x90>)
 8001b60:	5cd3      	ldrb	r3, [r2, r3]
 8001b62:	4639      	mov	r1, r7
 8001b64:	2205      	movs	r2, #5
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fda0 	bl	80016ac <NRF24_write_registerN>
 8001b6c:	e007      	b.n	8001b7e <NRF24_openReadingPipe+0x4e>
					(uint8_t*) (&address), 5);
		} else {
			NRF24_write_registerN(NRF24_ADDR_REGS[number],
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	4a13      	ldr	r2, [pc, #76]	@ (8001bc0 <NRF24_openReadingPipe+0x90>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	4639      	mov	r1, r7
 8001b76:	2201      	movs	r2, #1
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fd97 	bl	80016ac <NRF24_write_registerN>
					(uint8_t*) (&address), 1);
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number], payload_size);
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	4a10      	ldr	r2, [pc, #64]	@ (8001bc4 <NRF24_openReadingPipe+0x94>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	4a10      	ldr	r2, [pc, #64]	@ (8001bc8 <NRF24_openReadingPipe+0x98>)
 8001b86:	7812      	ldrb	r2, [r2, #0]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fd6c 	bl	8001668 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR,
				NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8001b90:	2002      	movs	r0, #2
 8001b92:	f7ff fd19 	bl	80015c8 <NRF24_read_register>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b25a      	sxtb	r2, r3
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b25b      	sxtb	r3, r3
		NRF24_write_register(REG_EN_RXADDR,
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4619      	mov	r1, r3
 8001bac:	2002      	movs	r0, #2
 8001bae:	f7ff fd5b 	bl	8001668 <NRF24_write_register>
	}

}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000218 	.word	0x20000218
 8001bc0:	0800bb5c 	.word	0x0800bb5c
 8001bc4:	0800bb64 	.word	0x0800bb64
 8001bc8:	20000222 	.word	0x20000222

08001bcc <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	71fb      	strb	r3, [r7, #7]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,
			(delay & 0xf) << BIT_ARD | (count & 0xf) << BIT_ARC);
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	b25a      	sxtb	r2, r3
 8001be2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	4313      	orrs	r3, r2
 8001bee:	b25b      	sxtb	r3, r3
	NRF24_write_register(REG_SETUP_RETR,
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	2004      	movs	r0, #4
 8001bf6:	f7ff fd37 	bl	8001668 <NRF24_write_register>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel) {
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001c0c:	237f      	movs	r3, #127	@ 0x7f
 8001c0e:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RF_CH, MIN(channel, max_channel));
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	4293      	cmp	r3, r2
 8001c16:	bf28      	it	cs
 8001c18:	4613      	movcs	r3, r2
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	2005      	movs	r0, #5
 8001c20:	f7ff fd22 	bl	8001668 <NRF24_write_register>
}
 8001c24:	bf00      	nop
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size) {
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001c36:	2320      	movs	r3, #32
 8001c38:	73fb      	strb	r3, [r7, #15]
	payload_size = MIN(size, max_payload_size);
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	bf28      	it	cs
 8001c42:	4613      	movcs	r3, r2
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b03      	ldr	r3, [pc, #12]	@ (8001c54 <NRF24_setPayloadSize+0x28>)
 8001c48:	701a      	strb	r2, [r3, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	20000222 	.word	0x20000222

08001c58 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void) {
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
	return payload_size;
 8001c5c:	4b02      	ldr	r3, [pc, #8]	@ (8001c68 <NRF24_getPayloadSize+0x10>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	20000222 	.word	0x20000222

08001c6c <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001c70:	2060      	movs	r0, #96	@ 0x60
 8001c72:	f7ff fca9 	bl	80015c8 <NRF24_read_register>
 8001c76:	4603      	mov	r3, r0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <NRF24_disableDynamicPayloads>:
			NRF24_read_register(
					REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,
			NRF24_read_register(REG_FEATURE) & ~(_BV(BIT_EN_DPL)));
 8001c80:	201d      	movs	r0, #29
 8001c82:	f7ff fca1 	bl	80015c8 <NRF24_read_register>
 8001c86:	4603      	mov	r3, r0
	NRF24_write_register(REG_FEATURE,
 8001c88:	f023 0304 	bic.w	r3, r3, #4
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	4619      	mov	r1, r3
 8001c90:	201d      	movs	r0, #29
 8001c92:	f7ff fce9 	bl	8001668 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD, 0);
 8001c96:	2100      	movs	r1, #0
 8001c98:	201c      	movs	r0, #28
 8001c9a:	f7ff fce5 	bl	8001668 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001c9e:	4b02      	ldr	r3, [pc, #8]	@ (8001ca8 <NRF24_disableDynamicPayloads+0x2c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000223 	.word	0x20000223

08001cac <NRF24_setPALevel>:
		}
		NRF24_write_register( REG_EN_AA, en_aa);
	}
}
//30. Set transmit power level
void NRF24_setPALevel(rf24_pa_dbm_e level) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 8001cb6:	2006      	movs	r0, #6
 8001cb8:	f7ff fc86 	bl	80015c8 <NRF24_read_register>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	f023 0306 	bic.w	r3, r3, #6
 8001cc6:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM (evil!)
	if (level == RF24_PA_0dB) {
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d104      	bne.n	8001cd8 <NRF24_setPALevel+0x2c>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	f043 0306 	orr.w	r3, r3, #6
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	e019      	b.n	8001d0c <NRF24_setPALevel+0x60>
	} else if (level == RF24_PA_m6dB) {
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d104      	bne.n	8001ce8 <NRF24_setPALevel+0x3c>
		setup |= _BV(RF_PWR_HIGH);
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	73fb      	strb	r3, [r7, #15]
 8001ce6:	e011      	b.n	8001d0c <NRF24_setPALevel+0x60>
	} else if (level == RF24_PA_m12dB) {
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d104      	bne.n	8001cf8 <NRF24_setPALevel+0x4c>
		setup |= _BV(RF_PWR_LOW);
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	e009      	b.n	8001d0c <NRF24_setPALevel+0x60>
	} else if (level == RF24_PA_m18dB) {
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d006      	beq.n	8001d0c <NRF24_setPALevel+0x60>
		// nothing
	} else if (level == RF24_PA_ERROR) {
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d103      	bne.n	8001d0c <NRF24_setPALevel+0x60>
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH));
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
 8001d06:	f043 0306 	orr.w	r3, r3, #6
 8001d0a:	73fb      	strb	r3, [r7, #15]
	}

	NRF24_write_register( REG_RF_SETUP, setup);
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	2006      	movs	r0, #6
 8001d12:	f7ff fca9 	bl	8001668 <NRF24_write_register>
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <NRF24_setDataRate>:
	}

	return result;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP);
 8001d2e:	2006      	movs	r0, #6
 8001d30:	f7ff fc4a 	bl	80015c8 <NRF24_read_register>
 8001d34:	4603      	mov	r3, r0
 8001d36:	73bb      	strb	r3, [r7, #14]

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <NRF24_setDataRate+0x88>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 8001d3e:	7bbb      	ldrb	r3, [r7, #14]
 8001d40:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8001d44:	73bb      	strb	r3, [r7, #14]
	if (speed == RF24_250KBPS) {
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d107      	bne.n	8001d5c <NRF24_setDataRate+0x3c>
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		wide_band = false;
 8001d4c:	4b16      	ldr	r3, [pc, #88]	@ (8001da8 <NRF24_setDataRate+0x88>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
		setup |= _BV(RF_DR_LOW);
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	f043 0320 	orr.w	r3, r3, #32
 8001d58:	73bb      	strb	r3, [r7, #14]
 8001d5a:	e00d      	b.n	8001d78 <NRF24_setDataRate+0x58>
	} else {
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if (speed == RF24_2MBPS) {
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <NRF24_setDataRate+0x52>
			wide_band = true;
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <NRF24_setDataRate+0x88>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
			setup |= _BV(RF_DR_HIGH);
 8001d68:	7bbb      	ldrb	r3, [r7, #14]
 8001d6a:	f043 0308 	orr.w	r3, r3, #8
 8001d6e:	73bb      	strb	r3, [r7, #14]
 8001d70:	e002      	b.n	8001d78 <NRF24_setDataRate+0x58>
		} else {
			// 1Mbs
			wide_band = false;
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <NRF24_setDataRate+0x88>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
		}
	}
	NRF24_write_register(REG_RF_SETUP, setup);
 8001d78:	7bbb      	ldrb	r3, [r7, #14]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	2006      	movs	r0, #6
 8001d7e:	f7ff fc73 	bl	8001668 <NRF24_write_register>

	// Verify our result
	if (NRF24_read_register(REG_RF_SETUP) == setup) {
 8001d82:	2006      	movs	r0, #6
 8001d84:	f7ff fc20 	bl	80015c8 <NRF24_read_register>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	7bbb      	ldrb	r3, [r7, #14]
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d102      	bne.n	8001d98 <NRF24_setDataRate+0x78>
		result = true;
 8001d92:	2301      	movs	r3, #1
 8001d94:	73fb      	strb	r3, [r7, #15]
 8001d96:	e002      	b.n	8001d9e <NRF24_setDataRate+0x7e>
	} else {
		wide_band = false;
 8001d98:	4b03      	ldr	r3, [pc, #12]	@ (8001da8 <NRF24_setDataRate+0x88>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
	}

	return result;
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000224 	.word	0x20000224

08001dac <NRF24_setCRCLength>:
		result = RF24_1MBPS;
	}
	return result;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG)
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fc06 	bl	80015c8 <NRF24_read_register>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f023 030c 	bic.w	r3, r3, #12
 8001dc2:	73fb      	strb	r3, [r7, #15]
			& ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC));

	// switch uses RAM
	if (length == RF24_CRC_DISABLED) {
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00f      	beq.n	8001dea <NRF24_setCRCLength+0x3e>
		// Do nothing, we turned it off above.
	} else if (length == RF24_CRC_8) {
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d104      	bne.n	8001dda <NRF24_setCRCLength+0x2e>
		config |= _BV(BIT_EN_CRC);
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	f043 0308 	orr.w	r3, r3, #8
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	e007      	b.n	8001dea <NRF24_setCRCLength+0x3e>
	} else {
		config |= _BV(BIT_EN_CRC);
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	73fb      	strb	r3, [r7, #15]
		config |= _BV(BIT_CRCO);
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	73fb      	strb	r3, [r7, #15]
	}
	NRF24_write_register( REG_CONFIG, config);
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	4619      	mov	r1, r3
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff fc3a 	bl	8001668 <NRF24_write_register>
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <NRF24_powerDown>:
void NRF24_powerUp(void) {
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,
			NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7ff fbe1 	bl	80015c8 <NRF24_read_register>
 8001e06:	4603      	mov	r3, r0
	NRF24_write_register(REG_CONFIG,
 8001e08:	f023 0302 	bic.w	r3, r3, #2
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff fc29 	bl	8001668 <NRF24_write_register>
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t *pipe_num) {
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001e22:	f7ff fccd 	bl	80017c0 <NRF24_get_status>
 8001e26:	4603      	mov	r3, r0
 8001e28:	73fb      	strb	r3, [r7, #15]

	bool result = (status & _BV(BIT_RX_DR));
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	73bb      	strb	r3, [r7, #14]

	if (result) {
 8001e3a:	7bbb      	ldrb	r3, [r7, #14]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d017      	beq.n	8001e70 <NRF24_availablePipe+0x56>
		// If the caller wants the pipe number, include that
		if (pipe_num)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <NRF24_availablePipe+0x3c>
			*pipe_num = (status >> BIT_RX_P_NO) & 0x7;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	085b      	lsrs	r3, r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	701a      	strb	r2, [r3, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS, _BV(BIT_RX_DR));
 8001e56:	2140      	movs	r1, #64	@ 0x40
 8001e58:	2007      	movs	r0, #7
 8001e5a:	f7ff fc05 	bl	8001668 <NRF24_write_register>

		// Handle ack payload receipt
		if (status & _BV(BIT_TX_DS)) {
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <NRF24_availablePipe+0x56>
			NRF24_write_register(REG_STATUS, _BV(BIT_TX_DS));
 8001e68:	2120      	movs	r1, #32
 8001e6a:	2007      	movs	r0, #7
 8001e6c:	f7ff fbfc 	bl	8001668 <NRF24_write_register>
		}
	}
	return result;
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite(const void *buf, uint8_t len) {
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
	NRF24_ce(0);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff fb7e 	bl	8001588 <NRF24_ce>
	NRF24_write_register(REG_CONFIG,
			(NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP))
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff fb9b 	bl	80015c8 <NRF24_read_register>
 8001e92:	4603      	mov	r3, r0
					& ~_BV(BIT_PRIM_RX));
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	b2db      	uxtb	r3, r3
	NRF24_write_register(REG_CONFIG,
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff fbe0 	bl	8001668 <NRF24_write_register>
	NRF24_ce(1);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7ff fb6d 	bl	8001588 <NRF24_ce>
	NRF24_DelayMicroSeconds(150);
 8001eae:	2096      	movs	r0, #150	@ 0x96
 8001eb0:	f7ff fb2a 	bl	8001508 <NRF24_DelayMicroSeconds>

	// Send the payload
	NRF24_write_payload(buf, len);
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff fc1f 	bl	80016fc <NRF24_write_payload>

	// Enable Tx for 15usec
	NRF24_ce(1);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f7ff fb62 	bl	8001588 <NRF24_ce>
	NRF24_DelayMicroSeconds(15);
 8001ec4:	200f      	movs	r0, #15
 8001ec6:	f7ff fb1f 	bl	8001508 <NRF24_DelayMicroSeconds>
	NRF24_ce(0);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff fb5c 	bl	8001588 <NRF24_ce>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <NRF24_whatHappened>:
	bool result = ack_payload_available;
	ack_payload_available = false;
	return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok, bool *tx_fail, bool *rx_ready) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001ee4:	f7ff fc6c 	bl	80017c0 <NRF24_get_status>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,
 8001ef2:	2170      	movs	r1, #112	@ 0x70
 8001ef4:	2007      	movs	r0, #7
 8001ef6:	f7ff fbb7 	bl	8001668 <NRF24_write_register>
			_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
	// Report to the user what happened
	*tx_ok = status & _BV(BIT_TX_DS);
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf14      	ite	ne
 8001f04:	2301      	movne	r3, #1
 8001f06:	2300      	moveq	r3, #0
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	701a      	strb	r2, [r3, #0]
	*tx_fail = status & _BV(BIT_MAX_RT);
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bf14      	ite	ne
 8001f18:	2301      	movne	r3, #1
 8001f1a:	2300      	moveq	r3, #0
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	701a      	strb	r2, [r3, #0]
	*rx_ready = status & _BV(BIT_RX_DR);
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
 8001f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf14      	ite	ne
 8001f2c:	2301      	movne	r3, #1
 8001f2e:	2300      	moveq	r3, #0
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	701a      	strb	r2, [r3, #0]
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <NRF24_resetStatus>:
bool NRF24_testRPD(void) {
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void) {
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,
 8001f42:	2170      	movs	r1, #112	@ 0x70
 8001f44:	2007      	movs	r0, #7
 8001f46:	f7ff fb8f 	bl	8001668 <NRF24_write_register>
			_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT));
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7ff faf6 	bl	8001548 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001f5c:	2350      	movs	r3, #80	@ 0x50
 8001f5e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001f60:	2373      	movs	r3, #115	@ 0x73
 8001f62:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001f64:	1d39      	adds	r1, r7, #4
 8001f66:	2364      	movs	r3, #100	@ 0x64
 8001f68:	2202      	movs	r2, #2
 8001f6a:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <NRF24_ACTIVATE_cmd+0x30>)
 8001f6c:	f003 f850 	bl	8005010 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7ff fae9 	bl	8001548 <NRF24_csn>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000230 	.word	0x20000230

08001f84 <printRadioSettings>:
//48. Get AckPayload Size
uint8_t NRF24_GetAckPayloadSize(void) {
	return ack_payload_length;
}

void printRadioSettings(void) {
 8001f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f86:	b0a1      	sub	sp, #132	@ 0x84
 8001f88:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf,
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	49c3      	ldr	r1, [pc, #780]	@ (800229c <printRadioSettings+0x318>)
 8001f90:	4618      	mov	r0, r3
 8001f92:	f005 fd9f 	bl	8007ad4 <siprintf>
			"\r\n**********************************************\r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 8001f96:	f107 0308 	add.w	r3, r7, #8
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe f8d8 	bl	8000150 <strlen>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	f107 0108 	add.w	r1, r7, #8
 8001fa8:	230a      	movs	r3, #10
 8001faa:	48bd      	ldr	r0, [pc, #756]	@ (80022a0 <printRadioSettings+0x31c>)
 8001fac:	f004 f83c 	bl	8006028 <HAL_UART_Transmit>
			10);
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7ff fb09 	bl	80015c8 <NRF24_read_register>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (reg8Val & (1 << 3)) {
 8001fbc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d013      	beq.n	8001ff0 <printRadioSettings+0x6c>
		if (reg8Val & (1 << 2))
 8001fc8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <printRadioSettings+0x5e>
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001fd4:	f107 0308 	add.w	r3, r7, #8
 8001fd8:	49b2      	ldr	r1, [pc, #712]	@ (80022a4 <printRadioSettings+0x320>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f005 fd7a 	bl	8007ad4 <siprintf>
 8001fe0:	e00c      	b.n	8001ffc <printRadioSettings+0x78>
		else
			sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	49b0      	ldr	r1, [pc, #704]	@ (80022a8 <printRadioSettings+0x324>)
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f005 fd73 	bl	8007ad4 <siprintf>
 8001fee:	e005      	b.n	8001ffc <printRadioSettings+0x78>
	} else {
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001ff0:	f107 0308 	add.w	r3, r7, #8
 8001ff4:	49ad      	ldr	r1, [pc, #692]	@ (80022ac <printRadioSettings+0x328>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f005 fd6c 	bl	8007ad4 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe f8a5 	bl	8000150 <strlen>
 8002006:	4603      	mov	r3, r0
 8002008:	b29a      	uxth	r2, r3
 800200a:	f107 0108 	add.w	r1, r7, #8
 800200e:	230a      	movs	r3, #10
 8002010:	48a3      	ldr	r0, [pc, #652]	@ (80022a0 <printRadioSettings+0x31c>)
 8002012:	f004 f809 	bl	8006028 <HAL_UART_Transmit>
			10);
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8002016:	2001      	movs	r0, #1
 8002018:	f7ff fad6 	bl	80015c8 <NRF24_read_register>
 800201c:	4603      	mov	r3, r0
 800201e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf,
			"ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8002022:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002026:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf,
 800202a:	2b00      	cmp	r3, #0
 800202c:	bfcc      	ite	gt
 800202e:	2301      	movgt	r3, #1
 8002030:	2300      	movle	r3, #0
 8002032:	b2db      	uxtb	r3, r3
 8002034:	461d      	mov	r5, r3
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 8002036:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800203a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf,
 800203e:	2b00      	cmp	r3, #0
 8002040:	bfcc      	ite	gt
 8002042:	2301      	movgt	r3, #1
 8002044:	2300      	movle	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461e      	mov	r6, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 800204a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800204e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf,
 8002052:	2b00      	cmp	r3, #0
 8002054:	bfcc      	ite	gt
 8002056:	2301      	movgt	r3, #1
 8002058:	2300      	movle	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	461a      	mov	r2, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 800205e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002062:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf,
 8002066:	2b00      	cmp	r3, #0
 8002068:	bfcc      	ite	gt
 800206a:	2301      	movgt	r3, #1
 800206c:	2300      	movle	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	4619      	mov	r1, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8002072:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002076:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf,
 800207a:	2b00      	cmp	r3, #0
 800207c:	bfcc      	ite	gt
 800207e:	2301      	movgt	r3, #1
 8002080:	2300      	movle	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461c      	mov	r4, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8002086:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800208a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf,
 800208e:	2b00      	cmp	r3, #0
 8002090:	bfcc      	ite	gt
 8002092:	2301      	movgt	r3, #1
 8002094:	2300      	movle	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f107 0008 	add.w	r0, r7, #8
 800209c:	9303      	str	r3, [sp, #12]
 800209e:	9402      	str	r4, [sp, #8]
 80020a0:	9101      	str	r1, [sp, #4]
 80020a2:	9200      	str	r2, [sp, #0]
 80020a4:	4633      	mov	r3, r6
 80020a6:	462a      	mov	r2, r5
 80020a8:	4981      	ldr	r1, [pc, #516]	@ (80022b0 <printRadioSettings+0x32c>)
 80020aa:	f005 fd13 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe f84c 	bl	8000150 <strlen>
 80020b8:	4603      	mov	r3, r0
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	f107 0108 	add.w	r1, r7, #8
 80020c0:	230a      	movs	r3, #10
 80020c2:	4877      	ldr	r0, [pc, #476]	@ (80022a0 <printRadioSettings+0x31c>)
 80020c4:	f003 ffb0 	bl	8006028 <HAL_UART_Transmit>
			10);
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80020c8:	2002      	movs	r0, #2
 80020ca:	f7ff fa7d 	bl	80015c8 <NRF24_read_register>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf,
			"EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 80020d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80020d8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf,
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bfcc      	ite	gt
 80020e0:	2301      	movgt	r3, #1
 80020e2:	2300      	movle	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461d      	mov	r5, r3
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 80020e8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80020ec:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf,
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bfcc      	ite	gt
 80020f4:	2301      	movgt	r3, #1
 80020f6:	2300      	movle	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	461e      	mov	r6, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 80020fc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002100:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf,
 8002104:	2b00      	cmp	r3, #0
 8002106:	bfcc      	ite	gt
 8002108:	2301      	movgt	r3, #1
 800210a:	2300      	movle	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8002110:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002114:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf,
 8002118:	2b00      	cmp	r3, #0
 800211a:	bfcc      	ite	gt
 800211c:	2301      	movgt	r3, #1
 800211e:	2300      	movle	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	4619      	mov	r1, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8002124:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002128:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf,
 800212c:	2b00      	cmp	r3, #0
 800212e:	bfcc      	ite	gt
 8002130:	2301      	movgt	r3, #1
 8002132:	2300      	movle	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461c      	mov	r4, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8002138:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800213c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf,
 8002140:	2b00      	cmp	r3, #0
 8002142:	bfcc      	ite	gt
 8002144:	2301      	movgt	r3, #1
 8002146:	2300      	movle	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f107 0008 	add.w	r0, r7, #8
 800214e:	9303      	str	r3, [sp, #12]
 8002150:	9402      	str	r4, [sp, #8]
 8002152:	9101      	str	r1, [sp, #4]
 8002154:	9200      	str	r2, [sp, #0]
 8002156:	4633      	mov	r3, r6
 8002158:	462a      	mov	r2, r5
 800215a:	4956      	ldr	r1, [pc, #344]	@ (80022b4 <printRadioSettings+0x330>)
 800215c:	f005 fcba 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 8002160:	f107 0308 	add.w	r3, r7, #8
 8002164:	4618      	mov	r0, r3
 8002166:	f7fd fff3 	bl	8000150 <strlen>
 800216a:	4603      	mov	r3, r0
 800216c:	b29a      	uxth	r2, r3
 800216e:	f107 0108 	add.w	r1, r7, #8
 8002172:	230a      	movs	r3, #10
 8002174:	484a      	ldr	r0, [pc, #296]	@ (80022a0 <printRadioSettings+0x31c>)
 8002176:	f003 ff57 	bl	8006028 <HAL_UART_Transmit>
			10);
	//d) Address width
	reg8Val = NRF24_read_register(0x03) & 0x03;
 800217a:	2003      	movs	r0, #3
 800217c:	f7ff fa24 	bl	80015c8 <NRF24_read_register>
 8002180:	4603      	mov	r3, r0
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	reg8Val += 2;
 800218a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800218e:	3302      	adds	r3, #2
 8002190:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8002194:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8002198:	f107 0308 	add.w	r3, r7, #8
 800219c:	4946      	ldr	r1, [pc, #280]	@ (80022b8 <printRadioSettings+0x334>)
 800219e:	4618      	mov	r0, r3
 80021a0:	f005 fc98 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 80021a4:	f107 0308 	add.w	r3, r7, #8
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fd ffd1 	bl	8000150 <strlen>
 80021ae:	4603      	mov	r3, r0
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	f107 0108 	add.w	r1, r7, #8
 80021b6:	230a      	movs	r3, #10
 80021b8:	4839      	ldr	r0, [pc, #228]	@ (80022a0 <printRadioSettings+0x31c>)
 80021ba:	f003 ff35 	bl	8006028 <HAL_UART_Transmit>
			10);
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80021be:	2005      	movs	r0, #5
 80021c0:	f7ff fa02 	bl	80015c8 <NRF24_read_register>
 80021c4:	4603      	mov	r3, r0
 80021c6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val & 0x7F);
 80021ca:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80021ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	4939      	ldr	r1, [pc, #228]	@ (80022bc <printRadioSettings+0x338>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f005 fc7b 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fd ffb4 	bl	8000150 <strlen>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	f107 0108 	add.w	r1, r7, #8
 80021f0:	230a      	movs	r3, #10
 80021f2:	482b      	ldr	r0, [pc, #172]	@ (80022a0 <printRadioSettings+0x31c>)
 80021f4:	f003 ff18 	bl	8006028 <HAL_UART_Transmit>
			10);
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80021f8:	2006      	movs	r0, #6
 80021fa:	f7ff f9e5 	bl	80015c8 <NRF24_read_register>
 80021fe:	4603      	mov	r3, r0
 8002200:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (reg8Val & (1 << 3))
 8002204:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d006      	beq.n	800221e <printRadioSettings+0x29a>
		sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8002210:	f107 0308 	add.w	r3, r7, #8
 8002214:	492a      	ldr	r1, [pc, #168]	@ (80022c0 <printRadioSettings+0x33c>)
 8002216:	4618      	mov	r0, r3
 8002218:	f005 fc5c 	bl	8007ad4 <siprintf>
 800221c:	e005      	b.n	800222a <printRadioSettings+0x2a6>
	else
		sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800221e:	f107 0308 	add.w	r3, r7, #8
 8002222:	4928      	ldr	r1, [pc, #160]	@ (80022c4 <printRadioSettings+0x340>)
 8002224:	4618      	mov	r0, r3
 8002226:	f005 fc55 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	4618      	mov	r0, r3
 8002230:	f7fd ff8e 	bl	8000150 <strlen>
 8002234:	4603      	mov	r3, r0
 8002236:	b29a      	uxth	r2, r3
 8002238:	f107 0108 	add.w	r1, r7, #8
 800223c:	230a      	movs	r3, #10
 800223e:	4818      	ldr	r0, [pc, #96]	@ (80022a0 <printRadioSettings+0x31c>)
 8002240:	f003 fef2 	bl	8006028 <HAL_UART_Transmit>
			10);
	reg8Val &= (3 << 1);
 8002244:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002248:	f003 0306 	and.w	r3, r3, #6
 800224c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	reg8Val = (reg8Val >> 1);
 8002250:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (reg8Val == 0)
 800225a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <printRadioSettings+0x2ec>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	4918      	ldr	r1, [pc, #96]	@ (80022c8 <printRadioSettings+0x344>)
 8002268:	4618      	mov	r0, r3
 800226a:	f005 fc33 	bl	8007ad4 <siprintf>
 800226e:	e03b      	b.n	80022e8 <printRadioSettings+0x364>
	else if (reg8Val == 1)
 8002270:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002274:	2b01      	cmp	r3, #1
 8002276:	d106      	bne.n	8002286 <printRadioSettings+0x302>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002278:	f107 0308 	add.w	r3, r7, #8
 800227c:	4913      	ldr	r1, [pc, #76]	@ (80022cc <printRadioSettings+0x348>)
 800227e:	4618      	mov	r0, r3
 8002280:	f005 fc28 	bl	8007ad4 <siprintf>
 8002284:	e030      	b.n	80022e8 <printRadioSettings+0x364>
	else if (reg8Val == 2)
 8002286:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800228a:	2b02      	cmp	r3, #2
 800228c:	d122      	bne.n	80022d4 <printRadioSettings+0x350>
		sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800228e:	f107 0308 	add.w	r3, r7, #8
 8002292:	490f      	ldr	r1, [pc, #60]	@ (80022d0 <printRadioSettings+0x34c>)
 8002294:	4618      	mov	r0, r3
 8002296:	f005 fc1d 	bl	8007ad4 <siprintf>
 800229a:	e025      	b.n	80022e8 <printRadioSettings+0x364>
 800229c:	0800b348 	.word	0x0800b348
 80022a0:	20000288 	.word	0x20000288
 80022a4:	0800b37c 	.word	0x0800b37c
 80022a8:	0800b398 	.word	0x0800b398
 80022ac:	0800b3b4 	.word	0x0800b3b4
 80022b0:	0800b3c8 	.word	0x0800b3c8
 80022b4:	0800b40c 	.word	0x0800b40c
 80022b8:	0800b458 	.word	0x0800b458
 80022bc:	0800b474 	.word	0x0800b474
 80022c0:	0800b488 	.word	0x0800b488
 80022c4:	0800b4a0 	.word	0x0800b4a0
 80022c8:	0800b4b8 	.word	0x0800b4b8
 80022cc:	0800b4cc 	.word	0x0800b4cc
 80022d0:	0800b4e0 	.word	0x0800b4e0
	else if (reg8Val == 3)
 80022d4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d105      	bne.n	80022e8 <printRadioSettings+0x364>
		sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80022dc:	f107 0308 	add.w	r3, r7, #8
 80022e0:	49d7      	ldr	r1, [pc, #860]	@ (8002640 <printRadioSettings+0x6bc>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f005 fbf6 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 80022e8:	f107 0308 	add.w	r3, r7, #8
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fd ff2f 	bl	8000150 <strlen>
 80022f2:	4603      	mov	r3, r0
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	f107 0108 	add.w	r1, r7, #8
 80022fa:	230a      	movs	r3, #10
 80022fc:	48d1      	ldr	r0, [pc, #836]	@ (8002644 <printRadioSettings+0x6c0>)
 80022fe:	f003 fe93 	bl	8006028 <HAL_UART_Transmit>
			10);
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8002302:	463b      	mov	r3, r7
 8002304:	2205      	movs	r2, #5
 8002306:	4619      	mov	r1, r3
 8002308:	200a      	movs	r0, #10
 800230a:	f7ff f985 	bl	8001618 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
 800230e:	793b      	ldrb	r3, [r7, #4]
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 8002310:	461c      	mov	r4, r3
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
 8002312:	78fb      	ldrb	r3, [r7, #3]
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 8002314:	461d      	mov	r5, r3
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
 8002316:	78bb      	ldrb	r3, [r7, #2]
 8002318:	787a      	ldrb	r2, [r7, #1]
			pipeAddrs[0]);
 800231a:	7839      	ldrb	r1, [r7, #0]
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 800231c:	f107 0008 	add.w	r0, r7, #8
 8002320:	9102      	str	r1, [sp, #8]
 8002322:	9201      	str	r2, [sp, #4]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	462b      	mov	r3, r5
 8002328:	4622      	mov	r2, r4
 800232a:	49c7      	ldr	r1, [pc, #796]	@ (8002648 <printRadioSettings+0x6c4>)
 800232c:	f005 fbd2 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	4618      	mov	r0, r3
 8002336:	f7fd ff0b 	bl	8000150 <strlen>
 800233a:	4603      	mov	r3, r0
 800233c:	b29a      	uxth	r2, r3
 800233e:	f107 0108 	add.w	r1, r7, #8
 8002342:	230a      	movs	r3, #10
 8002344:	48bf      	ldr	r0, [pc, #764]	@ (8002644 <printRadioSettings+0x6c0>)
 8002346:	f003 fe6f 	bl	8006028 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 1, pipeAddrs, 5);
 800234a:	463b      	mov	r3, r7
 800234c:	2205      	movs	r2, #5
 800234e:	4619      	mov	r1, r3
 8002350:	200b      	movs	r0, #11
 8002352:	f7ff f961 	bl	8001618 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
 8002356:	793b      	ldrb	r3, [r7, #4]
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 8002358:	461c      	mov	r4, r3
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
 800235a:	78fb      	ldrb	r3, [r7, #3]
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 800235c:	461d      	mov	r5, r3
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
 800235e:	78bb      	ldrb	r3, [r7, #2]
 8002360:	787a      	ldrb	r2, [r7, #1]
			pipeAddrs[0]);
 8002362:	7839      	ldrb	r1, [r7, #0]
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 8002364:	f107 0008 	add.w	r0, r7, #8
 8002368:	9102      	str	r1, [sp, #8]
 800236a:	9201      	str	r2, [sp, #4]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	462b      	mov	r3, r5
 8002370:	4622      	mov	r2, r4
 8002372:	49b6      	ldr	r1, [pc, #728]	@ (800264c <printRadioSettings+0x6c8>)
 8002374:	f005 fbae 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	4618      	mov	r0, r3
 800237e:	f7fd fee7 	bl	8000150 <strlen>
 8002382:	4603      	mov	r3, r0
 8002384:	b29a      	uxth	r2, r3
 8002386:	f107 0108 	add.w	r1, r7, #8
 800238a:	230a      	movs	r3, #10
 800238c:	48ad      	ldr	r0, [pc, #692]	@ (8002644 <printRadioSettings+0x6c0>)
 800238e:	f003 fe4b 	bl	8006028 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 2, pipeAddrs, 1);
 8002392:	463b      	mov	r3, r7
 8002394:	2201      	movs	r2, #1
 8002396:	4619      	mov	r1, r3
 8002398:	200c      	movs	r0, #12
 800239a:	f7ff f93d 	bl	8001618 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
			pipeAddrs[0]);
 800239e:	783b      	ldrb	r3, [r7, #0]
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 80023a0:	461a      	mov	r2, r3
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	49aa      	ldr	r1, [pc, #680]	@ (8002650 <printRadioSettings+0x6cc>)
 80023a8:	4618      	mov	r0, r3
 80023aa:	f005 fb93 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fd fecc 	bl	8000150 <strlen>
 80023b8:	4603      	mov	r3, r0
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	f107 0108 	add.w	r1, r7, #8
 80023c0:	230a      	movs	r3, #10
 80023c2:	48a0      	ldr	r0, [pc, #640]	@ (8002644 <printRadioSettings+0x6c0>)
 80023c4:	f003 fe30 	bl	8006028 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 3, pipeAddrs, 1);
 80023c8:	463b      	mov	r3, r7
 80023ca:	2201      	movs	r2, #1
 80023cc:	4619      	mov	r1, r3
 80023ce:	200d      	movs	r0, #13
 80023d0:	f7ff f922 	bl	8001618 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
			pipeAddrs[0]);
 80023d4:	783b      	ldrb	r3, [r7, #0]
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 80023d6:	461a      	mov	r2, r3
 80023d8:	f107 0308 	add.w	r3, r7, #8
 80023dc:	499d      	ldr	r1, [pc, #628]	@ (8002654 <printRadioSettings+0x6d0>)
 80023de:	4618      	mov	r0, r3
 80023e0:	f005 fb78 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fd feb1 	bl	8000150 <strlen>
 80023ee:	4603      	mov	r3, r0
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	f107 0108 	add.w	r1, r7, #8
 80023f6:	230a      	movs	r3, #10
 80023f8:	4892      	ldr	r0, [pc, #584]	@ (8002644 <printRadioSettings+0x6c0>)
 80023fa:	f003 fe15 	bl	8006028 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 4, pipeAddrs, 1);
 80023fe:	463b      	mov	r3, r7
 8002400:	2201      	movs	r2, #1
 8002402:	4619      	mov	r1, r3
 8002404:	200e      	movs	r0, #14
 8002406:	f7ff f907 	bl	8001618 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
			pipeAddrs[0]);
 800240a:	783b      	ldrb	r3, [r7, #0]
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 800240c:	461a      	mov	r2, r3
 800240e:	f107 0308 	add.w	r3, r7, #8
 8002412:	4991      	ldr	r1, [pc, #580]	@ (8002658 <printRadioSettings+0x6d4>)
 8002414:	4618      	mov	r0, r3
 8002416:	f005 fb5d 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 800241a:	f107 0308 	add.w	r3, r7, #8
 800241e:	4618      	mov	r0, r3
 8002420:	f7fd fe96 	bl	8000150 <strlen>
 8002424:	4603      	mov	r3, r0
 8002426:	b29a      	uxth	r2, r3
 8002428:	f107 0108 	add.w	r1, r7, #8
 800242c:	230a      	movs	r3, #10
 800242e:	4885      	ldr	r0, [pc, #532]	@ (8002644 <printRadioSettings+0x6c0>)
 8002430:	f003 fdfa 	bl	8006028 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 5, pipeAddrs, 1);
 8002434:	463b      	mov	r3, r7
 8002436:	2201      	movs	r2, #1
 8002438:	4619      	mov	r1, r3
 800243a:	200f      	movs	r0, #15
 800243c:	f7ff f8ec 	bl	8001618 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
			pipeAddrs[0]);
 8002440:	783b      	ldrb	r3, [r7, #0]
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n",
 8002442:	461a      	mov	r2, r3
 8002444:	f107 0308 	add.w	r3, r7, #8
 8002448:	4984      	ldr	r1, [pc, #528]	@ (800265c <printRadioSettings+0x6d8>)
 800244a:	4618      	mov	r0, r3
 800244c:	f005 fb42 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 8002450:	f107 0308 	add.w	r3, r7, #8
 8002454:	4618      	mov	r0, r3
 8002456:	f7fd fe7b 	bl	8000150 <strlen>
 800245a:	4603      	mov	r3, r0
 800245c:	b29a      	uxth	r2, r3
 800245e:	f107 0108 	add.w	r1, r7, #8
 8002462:	230a      	movs	r3, #10
 8002464:	4877      	ldr	r0, [pc, #476]	@ (8002644 <printRadioSettings+0x6c0>)
 8002466:	f003 fddf 	bl	8006028 <HAL_UART_Transmit>
			10);

	NRF24_read_registerN(0x0A + 6, pipeAddrs, 5);
 800246a:	463b      	mov	r3, r7
 800246c:	2205      	movs	r2, #5
 800246e:	4619      	mov	r1, r3
 8002470:	2010      	movs	r0, #16
 8002472:	f7ff f8d1 	bl	8001618 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
 8002476:	793b      	ldrb	r3, [r7, #4]
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 8002478:	461c      	mov	r4, r3
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
 800247a:	78fb      	ldrb	r3, [r7, #3]
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 800247c:	461d      	mov	r5, r3
			pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1],
 800247e:	78bb      	ldrb	r3, [r7, #2]
 8002480:	787a      	ldrb	r2, [r7, #1]
			pipeAddrs[0]);
 8002482:	7839      	ldrb	r1, [r7, #0]
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n",
 8002484:	f107 0008 	add.w	r0, r7, #8
 8002488:	9102      	str	r1, [sp, #8]
 800248a:	9201      	str	r2, [sp, #4]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	462b      	mov	r3, r5
 8002490:	4622      	mov	r2, r4
 8002492:	4973      	ldr	r1, [pc, #460]	@ (8002660 <printRadioSettings+0x6dc>)
 8002494:	f005 fb1e 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 8002498:	f107 0308 	add.w	r3, r7, #8
 800249c:	4618      	mov	r0, r3
 800249e:	f7fd fe57 	bl	8000150 <strlen>
 80024a2:	4603      	mov	r3, r0
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	f107 0108 	add.w	r1, r7, #8
 80024aa:	230a      	movs	r3, #10
 80024ac:	4865      	ldr	r0, [pc, #404]	@ (8002644 <printRadioSettings+0x6c0>)
 80024ae:	f003 fdbb 	bl	8006028 <HAL_UART_Transmit>
			10);

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80024b2:	2011      	movs	r0, #17
 80024b4:	f7ff f888 	bl	80015c8 <NRF24_read_register>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80024be:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80024c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024c6:	f107 0308 	add.w	r3, r7, #8
 80024ca:	4966      	ldr	r1, [pc, #408]	@ (8002664 <printRadioSettings+0x6e0>)
 80024cc:	4618      	mov	r0, r3
 80024ce:	f005 fb01 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 80024d2:	f107 0308 	add.w	r3, r7, #8
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fd fe3a 	bl	8000150 <strlen>
 80024dc:	4603      	mov	r3, r0
 80024de:	b29a      	uxth	r2, r3
 80024e0:	f107 0108 	add.w	r1, r7, #8
 80024e4:	230a      	movs	r3, #10
 80024e6:	4857      	ldr	r0, [pc, #348]	@ (8002644 <printRadioSettings+0x6c0>)
 80024e8:	f003 fd9e 	bl	8006028 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 1);
 80024ec:	2012      	movs	r0, #18
 80024ee:	f7ff f86b 	bl	80015c8 <NRF24_read_register>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80024f8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80024fc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002500:	f107 0308 	add.w	r3, r7, #8
 8002504:	4958      	ldr	r1, [pc, #352]	@ (8002668 <printRadioSettings+0x6e4>)
 8002506:	4618      	mov	r0, r3
 8002508:	f005 fae4 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 800250c:	f107 0308 	add.w	r3, r7, #8
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd fe1d 	bl	8000150 <strlen>
 8002516:	4603      	mov	r3, r0
 8002518:	b29a      	uxth	r2, r3
 800251a:	f107 0108 	add.w	r1, r7, #8
 800251e:	230a      	movs	r3, #10
 8002520:	4848      	ldr	r0, [pc, #288]	@ (8002644 <printRadioSettings+0x6c0>)
 8002522:	f003 fd81 	bl	8006028 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 2);
 8002526:	2013      	movs	r0, #19
 8002528:	f7ff f84e 	bl	80015c8 <NRF24_read_register>
 800252c:	4603      	mov	r3, r0
 800252e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 8002532:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002536:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800253a:	f107 0308 	add.w	r3, r7, #8
 800253e:	494b      	ldr	r1, [pc, #300]	@ (800266c <printRadioSettings+0x6e8>)
 8002540:	4618      	mov	r0, r3
 8002542:	f005 fac7 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 8002546:	f107 0308 	add.w	r3, r7, #8
 800254a:	4618      	mov	r0, r3
 800254c:	f7fd fe00 	bl	8000150 <strlen>
 8002550:	4603      	mov	r3, r0
 8002552:	b29a      	uxth	r2, r3
 8002554:	f107 0108 	add.w	r1, r7, #8
 8002558:	230a      	movs	r3, #10
 800255a:	483a      	ldr	r0, [pc, #232]	@ (8002644 <printRadioSettings+0x6c0>)
 800255c:	f003 fd64 	bl	8006028 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 3);
 8002560:	2014      	movs	r0, #20
 8002562:	f7ff f831 	bl	80015c8 <NRF24_read_register>
 8002566:	4603      	mov	r3, r0
 8002568:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 800256c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002570:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002574:	f107 0308 	add.w	r3, r7, #8
 8002578:	493d      	ldr	r1, [pc, #244]	@ (8002670 <printRadioSettings+0x6ec>)
 800257a:	4618      	mov	r0, r3
 800257c:	f005 faaa 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 8002580:	f107 0308 	add.w	r3, r7, #8
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd fde3 	bl	8000150 <strlen>
 800258a:	4603      	mov	r3, r0
 800258c:	b29a      	uxth	r2, r3
 800258e:	f107 0108 	add.w	r1, r7, #8
 8002592:	230a      	movs	r3, #10
 8002594:	482b      	ldr	r0, [pc, #172]	@ (8002644 <printRadioSettings+0x6c0>)
 8002596:	f003 fd47 	bl	8006028 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 4);
 800259a:	2015      	movs	r0, #21
 800259c:	f7ff f814 	bl	80015c8 <NRF24_read_register>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80025a6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80025aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	4930      	ldr	r1, [pc, #192]	@ (8002674 <printRadioSettings+0x6f0>)
 80025b4:	4618      	mov	r0, r3
 80025b6:	f005 fa8d 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd fdc6 	bl	8000150 <strlen>
 80025c4:	4603      	mov	r3, r0
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	f107 0108 	add.w	r1, r7, #8
 80025cc:	230a      	movs	r3, #10
 80025ce:	481d      	ldr	r0, [pc, #116]	@ (8002644 <printRadioSettings+0x6c0>)
 80025d0:	f003 fd2a 	bl	8006028 <HAL_UART_Transmit>
			10);

	reg8Val = NRF24_read_register(0x11 + 5);
 80025d4:	2016      	movs	r0, #22
 80025d6:	f7fe fff7 	bl	80015c8 <NRF24_read_register>
 80025da:	4603      	mov	r3, r0
 80025dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val & 0x3F);
 80025e0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80025e4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025e8:	f107 0308 	add.w	r3, r7, #8
 80025ec:	4922      	ldr	r1, [pc, #136]	@ (8002678 <printRadioSettings+0x6f4>)
 80025ee:	4618      	mov	r0, r3
 80025f0:	f005 fa70 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 80025f4:	f107 0308 	add.w	r3, r7, #8
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd fda9 	bl	8000150 <strlen>
 80025fe:	4603      	mov	r3, r0
 8002600:	b29a      	uxth	r2, r3
 8002602:	f107 0108 	add.w	r1, r7, #8
 8002606:	230a      	movs	r3, #10
 8002608:	480e      	ldr	r0, [pc, #56]	@ (8002644 <printRadioSettings+0x6c0>)
 800260a:	f003 fd0d 	bl	8006028 <HAL_UART_Transmit>
			10);

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800260e:	201c      	movs	r0, #28
 8002610:	f7fe ffda 	bl	80015c8 <NRF24_read_register>
 8002614:	4603      	mov	r3, r0
 8002616:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	sprintf(uartTxBuf,
			"DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 800261a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800261e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf,
 8002622:	2b00      	cmp	r3, #0
 8002624:	bfcc      	ite	gt
 8002626:	2301      	movgt	r3, #1
 8002628:	2300      	movle	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	461d      	mov	r5, r3
			_BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)),
 800262e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002632:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf,
 8002636:	2b00      	cmp	r3, #0
 8002638:	bfcc      	ite	gt
 800263a:	2301      	movgt	r3, #1
 800263c:	2300      	movle	r3, #0
 800263e:	e01d      	b.n	800267c <printRadioSettings+0x6f8>
 8002640:	0800b4f4 	.word	0x0800b4f4
 8002644:	20000288 	.word	0x20000288
 8002648:	0800b508 	.word	0x0800b508
 800264c:	0800b538 	.word	0x0800b538
 8002650:	0800b568 	.word	0x0800b568
 8002654:	0800b590 	.word	0x0800b590
 8002658:	0800b5b8 	.word	0x0800b5b8
 800265c:	0800b5e0 	.word	0x0800b5e0
 8002660:	0800b608 	.word	0x0800b608
 8002664:	0800b634 	.word	0x0800b634
 8002668:	0800b650 	.word	0x0800b650
 800266c:	0800b66c 	.word	0x0800b66c
 8002670:	0800b688 	.word	0x0800b688
 8002674:	0800b6a4 	.word	0x0800b6a4
 8002678:	0800b6c0 	.word	0x0800b6c0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461e      	mov	r6, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8002680:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002684:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf,
 8002688:	2b00      	cmp	r3, #0
 800268a:	bfcc      	ite	gt
 800268c:	2301      	movgt	r3, #1
 800268e:	2300      	movle	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
			_BOOL(reg8Val & (1 << 2)), _BOOL(reg8Val & (1 << 3)),
 8002694:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002698:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf,
 800269c:	2b00      	cmp	r3, #0
 800269e:	bfcc      	ite	gt
 80026a0:	2301      	movgt	r3, #1
 80026a2:	2300      	movle	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	4619      	mov	r1, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80026a8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80026ac:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf,
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bfcc      	ite	gt
 80026b4:	2301      	movgt	r3, #1
 80026b6:	2300      	movle	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461c      	mov	r4, r3
			_BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80026bc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80026c0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf,
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bfcc      	ite	gt
 80026c8:	2301      	movgt	r3, #1
 80026ca:	2300      	movle	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f107 0008 	add.w	r0, r7, #8
 80026d2:	9303      	str	r3, [sp, #12]
 80026d4:	9402      	str	r4, [sp, #8]
 80026d6:	9101      	str	r1, [sp, #4]
 80026d8:	9200      	str	r2, [sp, #0]
 80026da:	4633      	mov	r3, r6
 80026dc:	462a      	mov	r2, r5
 80026de:	4936      	ldr	r1, [pc, #216]	@ (80027b8 <printRadioSettings+0x834>)
 80026e0:	f005 f9f8 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 80026e4:	f107 0308 	add.w	r3, r7, #8
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd fd31 	bl	8000150 <strlen>
 80026ee:	4603      	mov	r3, r0
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	f107 0108 	add.w	r1, r7, #8
 80026f6:	230a      	movs	r3, #10
 80026f8:	4830      	ldr	r0, [pc, #192]	@ (80027bc <printRadioSettings+0x838>)
 80026fa:	f003 fc95 	bl	8006028 <HAL_UART_Transmit>
			10);

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80026fe:	201d      	movs	r0, #29
 8002700:	f7fe ff62 	bl	80015c8 <NRF24_read_register>
 8002704:	4603      	mov	r3, r0
 8002706:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (reg8Val & (1 << 2))
 800270a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <printRadioSettings+0x7a0>
		sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002716:	f107 0308 	add.w	r3, r7, #8
 800271a:	4929      	ldr	r1, [pc, #164]	@ (80027c0 <printRadioSettings+0x83c>)
 800271c:	4618      	mov	r0, r3
 800271e:	f005 f9d9 	bl	8007ad4 <siprintf>
 8002722:	e005      	b.n	8002730 <printRadioSettings+0x7ac>
	else
		sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8002724:	f107 0308 	add.w	r3, r7, #8
 8002728:	4926      	ldr	r1, [pc, #152]	@ (80027c4 <printRadioSettings+0x840>)
 800272a:	4618      	mov	r0, r3
 800272c:	f005 f9d2 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 8002730:	f107 0308 	add.w	r3, r7, #8
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd fd0b 	bl	8000150 <strlen>
 800273a:	4603      	mov	r3, r0
 800273c:	b29a      	uxth	r2, r3
 800273e:	f107 0108 	add.w	r1, r7, #8
 8002742:	230a      	movs	r3, #10
 8002744:	481d      	ldr	r0, [pc, #116]	@ (80027bc <printRadioSettings+0x838>)
 8002746:	f003 fc6f 	bl	8006028 <HAL_UART_Transmit>
			10);

	//k) EN_ACK_PAY
	if (reg8Val & (1 << 1))
 800274a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <printRadioSettings+0x7e0>
		sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002756:	f107 0308 	add.w	r3, r7, #8
 800275a:	491b      	ldr	r1, [pc, #108]	@ (80027c8 <printRadioSettings+0x844>)
 800275c:	4618      	mov	r0, r3
 800275e:	f005 f9b9 	bl	8007ad4 <siprintf>
 8002762:	e005      	b.n	8002770 <printRadioSettings+0x7ec>
	else
		sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002764:	f107 0308 	add.w	r3, r7, #8
 8002768:	4918      	ldr	r1, [pc, #96]	@ (80027cc <printRadioSettings+0x848>)
 800276a:	4618      	mov	r0, r3
 800276c:	f005 f9b2 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 8002770:	f107 0308 	add.w	r3, r7, #8
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fceb 	bl	8000150 <strlen>
 800277a:	4603      	mov	r3, r0
 800277c:	b29a      	uxth	r2, r3
 800277e:	f107 0108 	add.w	r1, r7, #8
 8002782:	230a      	movs	r3, #10
 8002784:	480d      	ldr	r0, [pc, #52]	@ (80027bc <printRadioSettings+0x838>)
 8002786:	f003 fc4f 	bl	8006028 <HAL_UART_Transmit>
			10);

	sprintf(uartTxBuf,
 800278a:	f107 0308 	add.w	r3, r7, #8
 800278e:	4910      	ldr	r1, [pc, #64]	@ (80027d0 <printRadioSettings+0x84c>)
 8002790:	4618      	mov	r0, r3
 8002792:	f005 f99f 	bl	8007ad4 <siprintf>
			"\r\n**********************************************\r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
 8002796:	f107 0308 	add.w	r3, r7, #8
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fcd8 	bl	8000150 <strlen>
 80027a0:	4603      	mov	r3, r0
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	f107 0108 	add.w	r1, r7, #8
 80027a8:	230a      	movs	r3, #10
 80027aa:	4804      	ldr	r0, [pc, #16]	@ (80027bc <printRadioSettings+0x838>)
 80027ac:	f003 fc3c 	bl	8006028 <HAL_UART_Transmit>
			10);
}
 80027b0:	bf00      	nop
 80027b2:	3774      	adds	r7, #116	@ 0x74
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b8:	0800b6dc 	.word	0x0800b6dc
 80027bc:	20000288 	.word	0x20000288
 80027c0:	0800b728 	.word	0x0800b728
 80027c4:	0800b740 	.word	0x0800b740
 80027c8:	0800b758 	.word	0x0800b758
 80027cc:	0800b774 	.word	0x0800b774
 80027d0:	0800b348 	.word	0x0800b348

080027d4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t*) uartTxBuf, strlen(uartTxBuf),
			10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart) {
 80027d4:	b084      	sub	sp, #16
 80027d6:	b580      	push	{r7, lr}
 80027d8:	af00      	add	r7, sp, #0
 80027da:	f107 0c08 	add.w	ip, r7, #8
 80027de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80027e2:	4b07      	ldr	r3, [pc, #28]	@ (8002800 <nrf24_DebugUART_Init+0x2c>)
 80027e4:	4618      	mov	r0, r3
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	2248      	movs	r2, #72	@ 0x48
 80027ec:	4619      	mov	r1, r3
 80027ee:	f005 fa74 	bl	8007cda <memcpy>
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027fa:	b004      	add	sp, #16
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000288 	.word	0x20000288

08002804 <ee_write_16>:

/*
 * @brief write data into the EEPROM
 * @args UINT16_T ADDRESS TO WRITE , UINT64_T DATA TO WRITE
 * */
bool ee_write_16(uint32_t Address_To_Write, uint16_t Data_To_Write) {
 8002804:	b5b0      	push	{r4, r5, r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	807b      	strh	r3, [r7, #2]
	HAL_FLASH_Unlock();
 8002810:	f001 fc0e 	bl	8004030 <HAL_FLASH_Unlock>
	HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8002814:	887b      	ldrh	r3, [r7, #2]
 8002816:	2200      	movs	r2, #0
 8002818:	461c      	mov	r4, r3
 800281a:	4615      	mov	r5, r2
 800281c:	4622      	mov	r2, r4
 800281e:	462b      	mov	r3, r5
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	2001      	movs	r0, #1
 8002824:	f001 fb94 	bl	8003f50 <HAL_FLASH_Program>
 8002828:	4603      	mov	r3, r0
 800282a:	73fb      	strb	r3, [r7, #15]
			Address_To_Write, Data_To_Write);
	if (status != HAL_OK) {
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <ee_write_16+0x36>
		HAL_FLASH_Lock();
 8002832:	f001 fc23 	bl	800407c <HAL_FLASH_Lock>
		return false;
 8002836:	2300      	movs	r3, #0
 8002838:	e002      	b.n	8002840 <ee_write_16+0x3c>
	} else {
		HAL_FLASH_Lock();
 800283a:	f001 fc1f 	bl	800407c <HAL_FLASH_Lock>
		return true;
 800283e:	2301      	movs	r3, #1
	}
	return false;
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bdb0      	pop	{r4, r5, r7, pc}

08002848 <ee_read_16>:
/*
 * Read Data into the EEPROM
 * @brief read uin16_t data type from the ee-prom
 * @args Address to read from the ee-prom
 * */
uint16_t ee_read_16(uint32_t Address_To_Read) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	uint16_t RData;
	HAL_FLASH_Unlock();
 8002850:	f001 fbee 	bl	8004030 <HAL_FLASH_Unlock>
	uint32_t *RDAddr = (uint32_t*) Address_To_Read;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	60fb      	str	r3, [r7, #12]
	RData = *RDAddr;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	817b      	strh	r3, [r7, #10]
	HAL_FLASH_Lock();
 800285e:	f001 fc0d 	bl	800407c <HAL_FLASH_Lock>
	return RData;
 8002862:	897b      	ldrh	r3, [r7, #10]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <ee_write_64>:

/*
 * @brief write data into the EEPROM
 * @args UINT32_T ADDRESS TO WRITE , UINT64_T DATA TO WRITE
 * */
bool ee_write_64(uint32_t Address_To_Write, uint64_t Data_To_Write) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_FLASH_Unlock();
 8002878:	f001 fbda 	bl	8004030 <HAL_FLASH_Unlock>
	HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800287c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002880:	68f9      	ldr	r1, [r7, #12]
 8002882:	2003      	movs	r0, #3
 8002884:	f001 fb64 	bl	8003f50 <HAL_FLASH_Program>
 8002888:	4603      	mov	r3, r0
 800288a:	75fb      	strb	r3, [r7, #23]
			Address_To_Write, Data_To_Write);
	if (status != HAL_OK) {
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <ee_write_64+0x2e>
		HAL_FLASH_Lock();
 8002892:	f001 fbf3 	bl	800407c <HAL_FLASH_Lock>
		return false;
 8002896:	2300      	movs	r3, #0
 8002898:	e002      	b.n	80028a0 <ee_write_64+0x34>
	} else {
		HAL_FLASH_Lock();
 800289a:	f001 fbef 	bl	800407c <HAL_FLASH_Lock>
		return true;
 800289e:	2301      	movs	r3, #1
	}
	return false;
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <ee_read_64>:
/*
 * Read Data into the EEPROM
 * @brief read uin64_t data type from the ee-prom
 * @args Address to read from the ee-prom
 * */
uint64_t ee_read_64(uint32_t Address_To_Read) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	uint64_t RData;
	HAL_FLASH_Unlock();
 80028b0:	f001 fbbe 	bl	8004030 <HAL_FLASH_Unlock>
	uint64_t *RDAddr = (uint64_t*) Address_To_Read;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	617b      	str	r3, [r7, #20]
	RData = *RDAddr;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	e9c7 2302 	strd	r2, r3, [r7, #8]
	HAL_FLASH_Lock();
 80028c2:	f001 fbdb 	bl	800407c <HAL_FLASH_Lock>
	return RData;
 80028c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <ee_format_page>:
/*
 * @brief Erase the page before writing data (if using repeated memory location) into the specific page
 * @args Starting adress of the page to eras and nmber of pages to erase
 */
bool ee_format_page(uint32_t Starting_Address, uint8_t Number_Of_Pages) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();
 80028e0:	f001 fba6 	bl	8004030 <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef flashErase;
	uint32_t page_error;
	flashErase.NbPages = Number_Of_Pages;
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	61fb      	str	r3, [r7, #28]
	flashErase.PageAddress = Starting_Address;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	61bb      	str	r3, [r7, #24]
	flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 80028ec:	2300      	movs	r3, #0
 80028ee:	613b      	str	r3, [r7, #16]
	flashErase.Banks = FLASH_BANK_1; //Later if u will be using high density then consider using bank 2 also
 80028f0:	2301      	movs	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
	if (HAL_FLASHEx_Erase(&flashErase, &page_error) == HAL_OK) {
 80028f4:	f107 020c 	add.w	r2, r7, #12
 80028f8:	f107 0310 	add.w	r3, r7, #16
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 fc7e 	bl	8004200 <HAL_FLASHEx_Erase>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <ee_format_page+0x3e>
		HAL_FLASH_Lock();
 800290a:	f001 fbb7 	bl	800407c <HAL_FLASH_Lock>
		return true;
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <ee_format_page+0x40>
	} else {
		return false;
 8002912:	2300      	movs	r3, #0
	}
	return false;
}
 8002914:	4618      	mov	r0, r3
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002930:	4b37      	ldr	r3, [pc, #220]	@ (8002a10 <MX_GPIO_Init+0xf4>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	4a36      	ldr	r2, [pc, #216]	@ (8002a10 <MX_GPIO_Init+0xf4>)
 8002936:	f043 0310 	orr.w	r3, r3, #16
 800293a:	6193      	str	r3, [r2, #24]
 800293c:	4b34      	ldr	r3, [pc, #208]	@ (8002a10 <MX_GPIO_Init+0xf4>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002948:	4b31      	ldr	r3, [pc, #196]	@ (8002a10 <MX_GPIO_Init+0xf4>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	4a30      	ldr	r2, [pc, #192]	@ (8002a10 <MX_GPIO_Init+0xf4>)
 800294e:	f043 0320 	orr.w	r3, r3, #32
 8002952:	6193      	str	r3, [r2, #24]
 8002954:	4b2e      	ldr	r3, [pc, #184]	@ (8002a10 <MX_GPIO_Init+0xf4>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002960:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <MX_GPIO_Init+0xf4>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	4a2a      	ldr	r2, [pc, #168]	@ (8002a10 <MX_GPIO_Init+0xf4>)
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	6193      	str	r3, [r2, #24]
 800296c:	4b28      	ldr	r3, [pc, #160]	@ (8002a10 <MX_GPIO_Init+0xf4>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <MX_GPIO_Init+0xf4>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4a24      	ldr	r2, [pc, #144]	@ (8002a10 <MX_GPIO_Init+0xf4>)
 800297e:	f043 0308 	orr.w	r3, r3, #8
 8002982:	6193      	str	r3, [r2, #24]
 8002984:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <MX_GPIO_Init+0xf4>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002990:	2200      	movs	r2, #0
 8002992:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002996:	481f      	ldr	r0, [pc, #124]	@ (8002a14 <MX_GPIO_Init+0xf8>)
 8002998:	f001 fe75 	bl	8004686 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 800299c:	2200      	movs	r2, #0
 800299e:	2110      	movs	r1, #16
 80029a0:	481d      	ldr	r0, [pc, #116]	@ (8002a18 <MX_GPIO_Init+0xfc>)
 80029a2:	f001 fe70 	bl	8004686 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NRF_CE_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2103      	movs	r1, #3
 80029aa:	481c      	ldr	r0, [pc, #112]	@ (8002a1c <MX_GPIO_Init+0x100>)
 80029ac:	f001 fe6b 	bl	8004686 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80029b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b6:	2301      	movs	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2302      	movs	r3, #2
 80029c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	4619      	mov	r1, r3
 80029c8:	4812      	ldr	r0, [pc, #72]	@ (8002a14 <MX_GPIO_Init+0xf8>)
 80029ca:	f001 fcc1 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80029ce:	2310      	movs	r3, #16
 80029d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d2:	2301      	movs	r3, #1
 80029d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2302      	movs	r3, #2
 80029dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	4619      	mov	r1, r3
 80029e4:	480c      	ldr	r0, [pc, #48]	@ (8002a18 <MX_GPIO_Init+0xfc>)
 80029e6:	f001 fcb3 	bl	8004350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin|NRF_CSN_Pin;
 80029ea:	2303      	movs	r3, #3
 80029ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ee:	2301      	movs	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2302      	movs	r3, #2
 80029f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fa:	f107 0310 	add.w	r3, r7, #16
 80029fe:	4619      	mov	r1, r3
 8002a00:	4806      	ldr	r0, [pc, #24]	@ (8002a1c <MX_GPIO_Init+0x100>)
 8002a02:	f001 fca5 	bl	8004350 <HAL_GPIO_Init>

}
 8002a06:	bf00      	nop
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40011000 	.word	0x40011000
 8002a18:	40010800 	.word	0x40010800
 8002a1c:	40010c00 	.word	0x40010c00

08002a20 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002a26:	f001 f84d 	bl	8003ac4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002a2a:	f000 f8a7 	bl	8002b7c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002a2e:	f7ff ff75 	bl	800291c <MX_GPIO_Init>
	MX_TIM1_Init();
 8002a32:	f000 fb61 	bl	80030f8 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8002a36:	f000 fbf7 	bl	8003228 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8002a3a:	f000 f99d 	bl	8002d78 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8002a3e:	f000 fbc9 	bl	80031d4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8002a42:	483b      	ldr	r0, [pc, #236]	@ (8002b30 <main+0x110>)
 8002a44:	f003 f838 	bl	8005ab8 <HAL_TIM_Base_Start>
	HAL_UART_Receive_IT(&huart2, &r, 1); //for C02
 8002a48:	2201      	movs	r2, #1
 8002a4a:	493a      	ldr	r1, [pc, #232]	@ (8002b34 <main+0x114>)
 8002a4c:	483a      	ldr	r0, [pc, #232]	@ (8002b38 <main+0x118>)
 8002a4e:	f003 fb6e 	bl	800612e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(Debug_Port, (uint8_t*) rx_data, 1); //FOR DEBUG
 8002a52:	2201      	movs	r2, #1
 8002a54:	4939      	ldr	r1, [pc, #228]	@ (8002b3c <main+0x11c>)
 8002a56:	483a      	ldr	r0, [pc, #232]	@ (8002b40 <main+0x120>)
 8002a58:	f003 fb69 	bl	800612e <HAL_UART_Receive_IT>

	//Read PIPE ADDRESS / CHANNEL NUMBER data from flash memory
	uint64_t READ_PIPE_ADRESS = ee_read_64(FLASH_ADDR_4_PIPE_ADDR_FOR_NRF);
 8002a5c:	4839      	ldr	r0, [pc, #228]	@ (8002b44 <main+0x124>)
 8002a5e:	f7ff ff23 	bl	80028a8 <ee_read_64>
 8002a62:	e9c7 0102 	strd	r0, r1, [r7, #8]
	My_Pipe_Address = READ_PIPE_ADRESS;
 8002a66:	4938      	ldr	r1, [pc, #224]	@ (8002b48 <main+0x128>)
 8002a68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a6c:	e9c1 2300 	strd	r2, r3, [r1]
	My_Channel_Num = ee_read_16(FLASH_ADDR_4_Self_Channel);
 8002a70:	4836      	ldr	r0, [pc, #216]	@ (8002b4c <main+0x12c>)
 8002a72:	f7ff fee9 	bl	8002848 <ee_read_16>
 8002a76:	4603      	mov	r3, r0
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4b35      	ldr	r3, [pc, #212]	@ (8002b50 <main+0x130>)
 8002a7c:	701a      	strb	r2, [r3, #0]
	target_pipe_addr = READ_PIPE_ADRESS;
 8002a7e:	4935      	ldr	r1, [pc, #212]	@ (8002b54 <main+0x134>)
 8002a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a84:	e9c1 2300 	strd	r2, r3, [r1]

	target_pipe_addr = READ_PIPE_ADRESS;
 8002a88:	4932      	ldr	r1, [pc, #200]	@ (8002b54 <main+0x134>)
 8002a8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a8e:	e9c1 2300 	strd	r2, r3, [r1]
	target_channel_addr = My_Channel_Num;
 8002a92:	4b2f      	ldr	r3, [pc, #188]	@ (8002b50 <main+0x130>)
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	4b30      	ldr	r3, [pc, #192]	@ (8002b58 <main+0x138>)
 8002a98:	701a      	strb	r2, [r3, #0]

	uint16_t my_device_id = ee_read_16(FLASH_ADDR_4_DEVICE_ID);
 8002a9a:	4830      	ldr	r0, [pc, #192]	@ (8002b5c <main+0x13c>)
 8002a9c:	f7ff fed4 	bl	8002848 <ee_read_16>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	80fb      	strh	r3, [r7, #6]
	// Split the uint16_t value into two uint8_t values
	my_node_id[0] = my_device_id & 0xFF;         // Least significant byte
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b60 <main+0x140>)
 8002aaa:	701a      	strb	r2, [r3, #0]
	my_node_id[1] = (my_device_id >> 8) & 0xFF;  // Most significant byte
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b60 <main+0x140>)
 8002ab6:	705a      	strb	r2, [r3, #1]

	nrf_init();
 8002ab8:	f000 f8ee 	bl	8002c98 <nrf_init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (NRF24_available()) {
 8002abc:	f7fe ffec 	bl	8001a98 <NRF24_available>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <main+0xaa>
			Manage_NRF_Data();
 8002ac6:	f000 fc83 	bl	80033d0 <Manage_NRF_Data>
		}
		//=====HANDLE UART DEBUG PORT DATA
		if (data_avlbl_from_UART_to_read) {
 8002aca:	4b26      	ldr	r3, [pc, #152]	@ (8002b64 <main+0x144>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d023      	beq.n	8002b1a <main+0xfa>
			Print_Debug_Data(
 8002ad2:	4825      	ldr	r0, [pc, #148]	@ (8002b68 <main+0x148>)
 8002ad4:	f000 fd8a 	bl	80035ec <Print_Debug_Data>
					(char*) "\nMSG received from UART DEBUG PORT ::> ");
			HAL_UART_Transmit(&huart1, received_data_from_UART, 32, 100);
 8002ad8:	2364      	movs	r3, #100	@ 0x64
 8002ada:	2220      	movs	r2, #32
 8002adc:	4923      	ldr	r1, [pc, #140]	@ (8002b6c <main+0x14c>)
 8002ade:	4818      	ldr	r0, [pc, #96]	@ (8002b40 <main+0x120>)
 8002ae0:	f003 faa2 	bl	8006028 <HAL_UART_Transmit>
			Print_Debug_Data((char*) "\n");
 8002ae4:	4822      	ldr	r0, [pc, #136]	@ (8002b70 <main+0x150>)
 8002ae6:	f000 fd81 	bl	80035ec <Print_Debug_Data>
			Manage_Received_Data_From_UART((uint8_t*) received_data_from_UART,
 8002aea:	2120      	movs	r1, #32
 8002aec:	481f      	ldr	r0, [pc, #124]	@ (8002b6c <main+0x14c>)
 8002aee:	f000 fd91 	bl	8003614 <Manage_Received_Data_From_UART>
					32);
			//AFTER USING THE DATA CLEAR THE RX BUFFER
			uint8_t i;
			if (rx_buffer_pos == 0) { //RESET THE BUFFER ONLY WHEN RX { BUFFER == 0 }
 8002af2:	4b20      	ldr	r3, [pc, #128]	@ (8002b74 <main+0x154>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10c      	bne.n	8002b14 <main+0xf4>
				for (i = 0; i < 20; i++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]
 8002afe:	e006      	b.n	8002b0e <main+0xee>
					received_data_from_UART[i] = 0;
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	4a1a      	ldr	r2, [pc, #104]	@ (8002b6c <main+0x14c>)
 8002b04:	2100      	movs	r1, #0
 8002b06:	54d1      	strb	r1, [r2, r3]
				for (i = 0; i < 20; i++)
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	2b13      	cmp	r3, #19
 8002b12:	d9f5      	bls.n	8002b00 <main+0xe0>
			}
			data_avlbl_from_UART_to_read = false;
 8002b14:	4b13      	ldr	r3, [pc, #76]	@ (8002b64 <main+0x144>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
		}
		DHT11_READ_TEMP_AND_HUM();
 8002b1a:	f7fe fc49 	bl	80013b0 <DHT11_READ_TEMP_AND_HUM>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002b1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b22:	4815      	ldr	r0, [pc, #84]	@ (8002b78 <main+0x158>)
 8002b24:	f001 fdc7 	bl	80046b6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8002b28:	2064      	movs	r0, #100	@ 0x64
 8002b2a:	f001 f82d 	bl	8003b88 <HAL_Delay>
		if (NRF24_available()) {
 8002b2e:	e7c5      	b.n	8002abc <main+0x9c>
 8002b30:	20000378 	.word	0x20000378
 8002b34:	200002d0 	.word	0x200002d0
 8002b38:	20000408 	.word	0x20000408
 8002b3c:	200002d4 	.word	0x200002d4
 8002b40:	200003c0 	.word	0x200003c0
 8002b44:	0800e808 	.word	0x0800e808
 8002b48:	20000300 	.word	0x20000300
 8002b4c:	0800e804 	.word	0x0800e804
 8002b50:	20000308 	.word	0x20000308
 8002b54:	20000310 	.word	0x20000310
 8002b58:	20000318 	.word	0x20000318
 8002b5c:	0800e818 	.word	0x0800e818
 8002b60:	20000450 	.word	0x20000450
 8002b64:	200002f8 	.word	0x200002f8
 8002b68:	0800b88c 	.word	0x0800b88c
 8002b6c:	200002d8 	.word	0x200002d8
 8002b70:	0800b8b4 	.word	0x0800b8b4
 8002b74:	200002d1 	.word	0x200002d1
 8002b78:	40011000 	.word	0x40011000

08002b7c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b090      	sub	sp, #64	@ 0x40
 8002b80:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002b82:	f107 0318 	add.w	r3, r7, #24
 8002b86:	2228      	movs	r2, #40	@ 0x28
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f005 f805 	bl	8007b9a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
 8002b9c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ba2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ba6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bac:	2301      	movs	r3, #1
 8002bae:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002bba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002bc0:	f107 0318 	add.w	r3, r7, #24
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f001 fd8f 	bl	80046e8 <HAL_RCC_OscConfig>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <SystemClock_Config+0x58>
		Error_Handler();
 8002bd0:	f000 f85c 	bl	8002c8c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002bd4:	230f      	movs	r3, #15
 8002bd6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002be0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002be4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	2102      	movs	r1, #2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 fffc 	bl	8004bec <HAL_RCC_ClockConfig>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <SystemClock_Config+0x82>
		Error_Handler();
 8002bfa:	f000 f847 	bl	8002c8c <Error_Handler>
	}
}
 8002bfe:	bf00      	nop
 8002c00:	3740      	adds	r7, #64	@ 0x40
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a15      	ldr	r2, [pc, #84]	@ (8002c6c <HAL_UART_RxCpltCallback+0x64>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d104      	bne.n	8002c24 <HAL_UART_RxCpltCallback+0x1c>
		PROCESS_C02(r);
 8002c1a:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <HAL_UART_RxCpltCallback+0x68>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fa36 	bl	8001090 <PROCESS_C02>
	}
	if (huart->Instance == USART1) {
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a12      	ldr	r2, [pc, #72]	@ (8002c74 <HAL_UART_RxCpltCallback+0x6c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d11a      	bne.n	8002c64 <HAL_UART_RxCpltCallback+0x5c>
		if (rx_data[0] != '/') { //if it is not equal to 'COMMAND END' then write data into INCREMENTED POS of rx_buffer
 8002c2e:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <HAL_UART_RxCpltCallback+0x70>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c34:	d00b      	beq.n	8002c4e <HAL_UART_RxCpltCallback+0x46>
			received_data_from_UART[rx_buffer_pos++] = rx_data[0];
 8002c36:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <HAL_UART_RxCpltCallback+0x74>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	b2d1      	uxtb	r1, r2
 8002c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c7c <HAL_UART_RxCpltCallback+0x74>)
 8002c40:	7011      	strb	r1, [r2, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <HAL_UART_RxCpltCallback+0x70>)
 8002c46:	7819      	ldrb	r1, [r3, #0]
 8002c48:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <HAL_UART_RxCpltCallback+0x78>)
 8002c4a:	5499      	strb	r1, [r3, r2]
 8002c4c:	e005      	b.n	8002c5a <HAL_UART_RxCpltCallback+0x52>

		} else { // HERE IT MEANS if(rx_data[0] == '/') IF it is equal to 'COMMAND END' then clear the buffer, compare data and move on
			rx_buffer_pos = 0;
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <HAL_UART_RxCpltCallback+0x74>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
			//USE THE DATA RECEIVED FROM INTERRUTP HERE
			data_avlbl_from_UART_to_read = true;
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_UART_RxCpltCallback+0x7c>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
			//process the data, and clear the buffer
		}
		HAL_UART_Receive_IT(&huart1, rx_data, 1); //REINIT THE UART INTERRUPT NOW
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4906      	ldr	r1, [pc, #24]	@ (8002c78 <HAL_UART_RxCpltCallback+0x70>)
 8002c5e:	480a      	ldr	r0, [pc, #40]	@ (8002c88 <HAL_UART_RxCpltCallback+0x80>)
 8002c60:	f003 fa65 	bl	800612e <HAL_UART_Receive_IT>
	}
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40004400 	.word	0x40004400
 8002c70:	200002d0 	.word	0x200002d0
 8002c74:	40013800 	.word	0x40013800
 8002c78:	200002d4 	.word	0x200002d4
 8002c7c:	200002d1 	.word	0x200002d1
 8002c80:	200002d8 	.word	0x200002d8
 8002c84:	200002f8 	.word	0x200002f8
 8002c88:	200003c0 	.word	0x200003c0

08002c8c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c90:	b672      	cpsid	i
}
 8002c92:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c94:	bf00      	nop
 8002c96:	e7fd      	b.n	8002c94 <Error_Handler+0x8>

08002c98 <nrf_init>:
uint8_t target_channel_addr = 0;

extern SPI_HandleTypeDef hspi1;
extern UART_HandleTypeDef huart1;

void nrf_init(void) {
 8002c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9a:	b097      	sub	sp, #92	@ 0x5c
 8002c9c:	af16      	add	r7, sp, #88	@ 0x58
	NRF24_begin(NRF_CE_GPIO_Port, NRF_CSN_Pin, NRF_CE_Pin, hspi1);
 8002c9e:	4c1a      	ldr	r4, [pc, #104]	@ (8002d08 <nrf_init+0x70>)
 8002ca0:	4668      	mov	r0, sp
 8002ca2:	1d23      	adds	r3, r4, #4
 8002ca4:	2254      	movs	r2, #84	@ 0x54
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f005 f817 	bl	8007cda <memcpy>
 8002cac:	6823      	ldr	r3, [r4, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	4816      	ldr	r0, [pc, #88]	@ (8002d0c <nrf_init+0x74>)
 8002cb4:	f7fe fd92 	bl	80017dc <NRF24_begin>
	nrf24_DebugUART_Init(huart1);
 8002cb8:	4e15      	ldr	r6, [pc, #84]	@ (8002d10 <nrf_init+0x78>)
 8002cba:	466d      	mov	r5, sp
 8002cbc:	f106 0410 	add.w	r4, r6, #16
 8002cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ccc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cd4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002cd8:	f7ff fd7c 	bl	80027d4 <nrf24_DebugUART_Init>
	NRF24_setChannel(My_Channel_Num);
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <nrf_init+0x7c>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe ff8e 	bl	8001c02 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 8002ce6:	2020      	movs	r0, #32
 8002ce8:	f7fe ffa0 	bl	8001c2c <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, My_Pipe_Address);
 8002cec:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <nrf_init+0x80>)
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f7fe ff1c 	bl	8001b30 <NRF24_openReadingPipe>
	NRF24_startListening();
 8002cf8:	f7fe fe50 	bl	800199c <NRF24_startListening>
	printRadioSettings();
 8002cfc:	f7ff f942 	bl	8001f84 <printRadioSettings>
}
 8002d00:	bf00      	nop
 8002d02:	3704      	adds	r7, #4
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d08:	2000031c 	.word	0x2000031c
 8002d0c:	40010c00 	.word	0x40010c00
 8002d10:	200003c0 	.word	0x200003c0
 8002d14:	20000308 	.word	0x20000308
 8002d18:	20000300 	.word	0x20000300

08002d1c <Switch_to_Transmitt_mode>:
void Switch_to_Transmitt_mode() {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
	NRF24_stopListening();
 8002d20:	f7fe fe62 	bl	80019e8 <NRF24_stopListening>
	NRF24_openWritingPipe(target_pipe_addr);
 8002d24:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <Switch_to_Transmitt_mode+0x24>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f7fe fedb 	bl	8001ae8 <NRF24_openWritingPipe>
	NRF24_setChannel(target_channel_addr);
 8002d32:	4b04      	ldr	r3, [pc, #16]	@ (8002d44 <Switch_to_Transmitt_mode+0x28>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe ff63 	bl	8001c02 <NRF24_setChannel>
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000310 	.word	0x20000310
 8002d44:	20000318 	.word	0x20000318

08002d48 <Switch_to_Receiver_mode>:
void Switch_to_Receiver_mode(void) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	NRF24_stopListening();
 8002d4c:	f7fe fe4c 	bl	80019e8 <NRF24_stopListening>
	NRF24_setChannel(My_Channel_Num);
 8002d50:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <Switch_to_Receiver_mode+0x28>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fe ff54 	bl	8001c02 <NRF24_setChannel>
	NRF24_openReadingPipe(1, My_Pipe_Address);
 8002d5a:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <Switch_to_Receiver_mode+0x2c>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	2001      	movs	r0, #1
 8002d62:	f7fe fee5 	bl	8001b30 <NRF24_openReadingPipe>
	NRF24_startListening();
 8002d66:	f7fe fe19 	bl	800199c <NRF24_startListening>
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000308 	.word	0x20000308
 8002d74:	20000300 	.word	0x20000300

08002d78 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d7c:	4b17      	ldr	r3, [pc, #92]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002d7e:	4a18      	ldr	r2, [pc, #96]	@ (8002de0 <MX_SPI1_Init+0x68>)
 8002d80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d82:	4b16      	ldr	r3, [pc, #88]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002d84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d8a:	4b14      	ldr	r3, [pc, #80]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d90:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d96:	4b11      	ldr	r3, [pc, #68]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002da2:	4b0e      	ldr	r3, [pc, #56]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002da8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002daa:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002dac:	2218      	movs	r2, #24
 8002dae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002db0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002db6:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dbc:	4b07      	ldr	r3, [pc, #28]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002dc2:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002dc4:	220a      	movs	r2, #10
 8002dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dc8:	4804      	ldr	r0, [pc, #16]	@ (8002ddc <MX_SPI1_Init+0x64>)
 8002dca:	f002 f89d 	bl	8004f08 <HAL_SPI_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002dd4:	f7ff ff5a 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	2000031c 	.word	0x2000031c
 8002de0:	40013000 	.word	0x40013000

08002de4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8002e6c <HAL_SPI_MspInit+0x88>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d12f      	bne.n	8002e64 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e04:	4b1a      	ldr	r3, [pc, #104]	@ (8002e70 <HAL_SPI_MspInit+0x8c>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4a19      	ldr	r2, [pc, #100]	@ (8002e70 <HAL_SPI_MspInit+0x8c>)
 8002e0a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e0e:	6193      	str	r3, [r2, #24]
 8002e10:	4b17      	ldr	r3, [pc, #92]	@ (8002e70 <HAL_SPI_MspInit+0x8c>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	4b14      	ldr	r3, [pc, #80]	@ (8002e70 <HAL_SPI_MspInit+0x8c>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	4a13      	ldr	r2, [pc, #76]	@ (8002e70 <HAL_SPI_MspInit+0x8c>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	6193      	str	r3, [r2, #24]
 8002e28:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <HAL_SPI_MspInit+0x8c>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002e34:	23a0      	movs	r3, #160	@ 0xa0
 8002e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e40:	f107 0310 	add.w	r3, r7, #16
 8002e44:	4619      	mov	r1, r3
 8002e46:	480b      	ldr	r0, [pc, #44]	@ (8002e74 <HAL_SPI_MspInit+0x90>)
 8002e48:	f001 fa82 	bl	8004350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e4c:	2340      	movs	r3, #64	@ 0x40
 8002e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4805      	ldr	r0, [pc, #20]	@ (8002e74 <HAL_SPI_MspInit+0x90>)
 8002e60:	f001 fa76 	bl	8004350 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002e64:	bf00      	nop
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40013000 	.word	0x40013000
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40010800 	.word	0x40010800

08002e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <HAL_MspInit+0x5c>)
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	4a14      	ldr	r2, [pc, #80]	@ (8002ed4 <HAL_MspInit+0x5c>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6193      	str	r3, [r2, #24]
 8002e8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <HAL_MspInit+0x5c>)
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed4 <HAL_MspInit+0x5c>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed4 <HAL_MspInit+0x5c>)
 8002e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea0:	61d3      	str	r3, [r2, #28]
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed4 <HAL_MspInit+0x5c>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002eae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <HAL_MspInit+0x60>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	4a04      	ldr	r2, [pc, #16]	@ (8002ed8 <HAL_MspInit+0x60>)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40010000 	.word	0x40010000

08002edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ee0:	bf00      	nop
 8002ee2:	e7fd      	b.n	8002ee0 <NMI_Handler+0x4>

08002ee4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ee8:	bf00      	nop
 8002eea:	e7fd      	b.n	8002ee8 <HardFault_Handler+0x4>

08002eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef0:	bf00      	nop
 8002ef2:	e7fd      	b.n	8002ef0 <MemManage_Handler+0x4>

08002ef4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ef8:	bf00      	nop
 8002efa:	e7fd      	b.n	8002ef8 <BusFault_Handler+0x4>

08002efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f00:	bf00      	nop
 8002f02:	e7fd      	b.n	8002f00 <UsageFault_Handler+0x4>

08002f04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f2c:	f000 fe10 	bl	8003b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f30:	bf00      	nop
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f38:	4802      	ldr	r0, [pc, #8]	@ (8002f44 <USART1_IRQHandler+0x10>)
 8002f3a:	f003 f91d 	bl	8006178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200003c0 	.word	0x200003c0

08002f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f4c:	4804      	ldr	r0, [pc, #16]	@ (8002f60 <USART2_IRQHandler+0x18>)
 8002f4e:	f003 f913 	bl	8006178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, &r, 1);
 8002f52:	2201      	movs	r2, #1
 8002f54:	4903      	ldr	r1, [pc, #12]	@ (8002f64 <USART2_IRQHandler+0x1c>)
 8002f56:	4802      	ldr	r0, [pc, #8]	@ (8002f60 <USART2_IRQHandler+0x18>)
 8002f58:	f003 f8e9 	bl	800612e <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000408 	.word	0x20000408
 8002f64:	200002d0 	.word	0x200002d0

08002f68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return 1;
 8002f6c:	2301      	movs	r3, #1
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <_kill>:

int _kill(int pid, int sig)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f80:	f004 fe70 	bl	8007c64 <__errno>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2216      	movs	r2, #22
 8002f88:	601a      	str	r2, [r3, #0]
  return -1;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <_exit>:

void _exit (int status)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ffe7 	bl	8002f76 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fa8:	bf00      	nop
 8002faa:	e7fd      	b.n	8002fa8 <_exit+0x12>

08002fac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	e00a      	b.n	8002fd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fbe:	f3af 8000 	nop.w
 8002fc2:	4601      	mov	r1, r0
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	60ba      	str	r2, [r7, #8]
 8002fca:	b2ca      	uxtb	r2, r1
 8002fcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	dbf0      	blt.n	8002fbe <_read+0x12>
  }

  return len;
 8002fdc:	687b      	ldr	r3, [r7, #4]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e009      	b.n	800300c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	60ba      	str	r2, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3301      	adds	r3, #1
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	429a      	cmp	r2, r3
 8003012:	dbf1      	blt.n	8002ff8 <_write+0x12>
  }
  return len;
 8003014:	687b      	ldr	r3, [r7, #4]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <_close>:

int _close(int file)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003026:	f04f 33ff 	mov.w	r3, #4294967295
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003044:	605a      	str	r2, [r3, #4]
  return 0;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <_isatty>:

int _isatty(int file)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800305a:	2301      	movs	r3, #1
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
	...

08003080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003088:	4a14      	ldr	r2, [pc, #80]	@ (80030dc <_sbrk+0x5c>)
 800308a:	4b15      	ldr	r3, [pc, #84]	@ (80030e0 <_sbrk+0x60>)
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003094:	4b13      	ldr	r3, [pc, #76]	@ (80030e4 <_sbrk+0x64>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800309c:	4b11      	ldr	r3, [pc, #68]	@ (80030e4 <_sbrk+0x64>)
 800309e:	4a12      	ldr	r2, [pc, #72]	@ (80030e8 <_sbrk+0x68>)
 80030a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030a2:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <_sbrk+0x64>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d207      	bcs.n	80030c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030b0:	f004 fdd8 	bl	8007c64 <__errno>
 80030b4:	4603      	mov	r3, r0
 80030b6:	220c      	movs	r2, #12
 80030b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295
 80030be:	e009      	b.n	80030d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030c0:	4b08      	ldr	r3, [pc, #32]	@ (80030e4 <_sbrk+0x64>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030c6:	4b07      	ldr	r3, [pc, #28]	@ (80030e4 <_sbrk+0x64>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	4a05      	ldr	r2, [pc, #20]	@ (80030e4 <_sbrk+0x64>)
 80030d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030d2:	68fb      	ldr	r3, [r7, #12]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20005000 	.word	0x20005000
 80030e0:	00000400 	.word	0x00000400
 80030e4:	20000374 	.word	0x20000374
 80030e8:	200005c8 	.word	0x200005c8

080030ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030fe:	f107 0308 	add.w	r3, r7, #8
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310c:	463b      	mov	r3, r7
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003114:	4b1e      	ldr	r3, [pc, #120]	@ (8003190 <MX_TIM1_Init+0x98>)
 8003116:	4a1f      	ldr	r2, [pc, #124]	@ (8003194 <MX_TIM1_Init+0x9c>)
 8003118:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800311a:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <MX_TIM1_Init+0x98>)
 800311c:	2247      	movs	r2, #71	@ 0x47
 800311e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003120:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <MX_TIM1_Init+0x98>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003126:	4b1a      	ldr	r3, [pc, #104]	@ (8003190 <MX_TIM1_Init+0x98>)
 8003128:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800312c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800312e:	4b18      	ldr	r3, [pc, #96]	@ (8003190 <MX_TIM1_Init+0x98>)
 8003130:	2200      	movs	r2, #0
 8003132:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003134:	4b16      	ldr	r3, [pc, #88]	@ (8003190 <MX_TIM1_Init+0x98>)
 8003136:	2200      	movs	r2, #0
 8003138:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800313a:	4b15      	ldr	r3, [pc, #84]	@ (8003190 <MX_TIM1_Init+0x98>)
 800313c:	2200      	movs	r2, #0
 800313e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003140:	4813      	ldr	r0, [pc, #76]	@ (8003190 <MX_TIM1_Init+0x98>)
 8003142:	f002 fc69 	bl	8005a18 <HAL_TIM_Base_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800314c:	f7ff fd9e 	bl	8002c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003150:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003156:	f107 0308 	add.w	r3, r7, #8
 800315a:	4619      	mov	r1, r3
 800315c:	480c      	ldr	r0, [pc, #48]	@ (8003190 <MX_TIM1_Init+0x98>)
 800315e:	f002 fcf5 	bl	8005b4c <HAL_TIM_ConfigClockSource>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003168:	f7ff fd90 	bl	8002c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800316c:	2300      	movs	r3, #0
 800316e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003170:	2300      	movs	r3, #0
 8003172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003174:	463b      	mov	r3, r7
 8003176:	4619      	mov	r1, r3
 8003178:	4805      	ldr	r0, [pc, #20]	@ (8003190 <MX_TIM1_Init+0x98>)
 800317a:	f002 fea7 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003184:	f7ff fd82 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000378 	.word	0x20000378
 8003194:	40012c00 	.word	0x40012c00

08003198 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a09      	ldr	r2, [pc, #36]	@ (80031cc <HAL_TIM_Base_MspInit+0x34>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d10b      	bne.n	80031c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031aa:	4b09      	ldr	r3, [pc, #36]	@ (80031d0 <HAL_TIM_Base_MspInit+0x38>)
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	4a08      	ldr	r2, [pc, #32]	@ (80031d0 <HAL_TIM_Base_MspInit+0x38>)
 80031b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80031b4:	6193      	str	r3, [r2, #24]
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <HAL_TIM_Base_MspInit+0x38>)
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40021000 	.word	0x40021000

080031d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031d8:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <MX_USART1_UART_Init+0x4c>)
 80031da:	4a12      	ldr	r2, [pc, #72]	@ (8003224 <MX_USART1_UART_Init+0x50>)
 80031dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031de:	4b10      	ldr	r3, [pc, #64]	@ (8003220 <MX_USART1_UART_Init+0x4c>)
 80031e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003220 <MX_USART1_UART_Init+0x4c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003220 <MX_USART1_UART_Init+0x4c>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003220 <MX_USART1_UART_Init+0x4c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031f8:	4b09      	ldr	r3, [pc, #36]	@ (8003220 <MX_USART1_UART_Init+0x4c>)
 80031fa:	220c      	movs	r2, #12
 80031fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031fe:	4b08      	ldr	r3, [pc, #32]	@ (8003220 <MX_USART1_UART_Init+0x4c>)
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003204:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <MX_USART1_UART_Init+0x4c>)
 8003206:	2200      	movs	r2, #0
 8003208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800320a:	4805      	ldr	r0, [pc, #20]	@ (8003220 <MX_USART1_UART_Init+0x4c>)
 800320c:	f002 febc 	bl	8005f88 <HAL_UART_Init>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003216:	f7ff fd39 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	200003c0 	.word	0x200003c0
 8003224:	40013800 	.word	0x40013800

08003228 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800322c:	4b11      	ldr	r3, [pc, #68]	@ (8003274 <MX_USART2_UART_Init+0x4c>)
 800322e:	4a12      	ldr	r2, [pc, #72]	@ (8003278 <MX_USART2_UART_Init+0x50>)
 8003230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003232:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <MX_USART2_UART_Init+0x4c>)
 8003234:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800323a:	4b0e      	ldr	r3, [pc, #56]	@ (8003274 <MX_USART2_UART_Init+0x4c>)
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003240:	4b0c      	ldr	r3, [pc, #48]	@ (8003274 <MX_USART2_UART_Init+0x4c>)
 8003242:	2200      	movs	r2, #0
 8003244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003246:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <MX_USART2_UART_Init+0x4c>)
 8003248:	2200      	movs	r2, #0
 800324a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800324c:	4b09      	ldr	r3, [pc, #36]	@ (8003274 <MX_USART2_UART_Init+0x4c>)
 800324e:	220c      	movs	r2, #12
 8003250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003252:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <MX_USART2_UART_Init+0x4c>)
 8003254:	2200      	movs	r2, #0
 8003256:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003258:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <MX_USART2_UART_Init+0x4c>)
 800325a:	2200      	movs	r2, #0
 800325c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800325e:	4805      	ldr	r0, [pc, #20]	@ (8003274 <MX_USART2_UART_Init+0x4c>)
 8003260:	f002 fe92 	bl	8005f88 <HAL_UART_Init>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800326a:	f7ff fd0f 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000408 	.word	0x20000408
 8003278:	40004400 	.word	0x40004400

0800327c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	@ 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 0318 	add.w	r3, r7, #24
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a3f      	ldr	r2, [pc, #252]	@ (8003394 <HAL_UART_MspInit+0x118>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d13a      	bne.n	8003312 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800329c:	4b3e      	ldr	r3, [pc, #248]	@ (8003398 <HAL_UART_MspInit+0x11c>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	4a3d      	ldr	r2, [pc, #244]	@ (8003398 <HAL_UART_MspInit+0x11c>)
 80032a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032a6:	6193      	str	r3, [r2, #24]
 80032a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003398 <HAL_UART_MspInit+0x11c>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b4:	4b38      	ldr	r3, [pc, #224]	@ (8003398 <HAL_UART_MspInit+0x11c>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	4a37      	ldr	r2, [pc, #220]	@ (8003398 <HAL_UART_MspInit+0x11c>)
 80032ba:	f043 0304 	orr.w	r3, r3, #4
 80032be:	6193      	str	r3, [r2, #24]
 80032c0:	4b35      	ldr	r3, [pc, #212]	@ (8003398 <HAL_UART_MspInit+0x11c>)
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d2:	2302      	movs	r3, #2
 80032d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032d6:	2303      	movs	r3, #3
 80032d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032da:	f107 0318 	add.w	r3, r7, #24
 80032de:	4619      	mov	r1, r3
 80032e0:	482e      	ldr	r0, [pc, #184]	@ (800339c <HAL_UART_MspInit+0x120>)
 80032e2:	f001 f835 	bl	8004350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f4:	f107 0318 	add.w	r3, r7, #24
 80032f8:	4619      	mov	r1, r3
 80032fa:	4828      	ldr	r0, [pc, #160]	@ (800339c <HAL_UART_MspInit+0x120>)
 80032fc:	f001 f828 	bl	8004350 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003300:	2200      	movs	r2, #0
 8003302:	2100      	movs	r1, #0
 8003304:	2025      	movs	r0, #37	@ 0x25
 8003306:	f000 fd3a 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800330a:	2025      	movs	r0, #37	@ 0x25
 800330c:	f000 fd53 	bl	8003db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003310:	e03c      	b.n	800338c <HAL_UART_MspInit+0x110>
  else if(uartHandle->Instance==USART2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a22      	ldr	r2, [pc, #136]	@ (80033a0 <HAL_UART_MspInit+0x124>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d137      	bne.n	800338c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800331c:	4b1e      	ldr	r3, [pc, #120]	@ (8003398 <HAL_UART_MspInit+0x11c>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	4a1d      	ldr	r2, [pc, #116]	@ (8003398 <HAL_UART_MspInit+0x11c>)
 8003322:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003326:	61d3      	str	r3, [r2, #28]
 8003328:	4b1b      	ldr	r3, [pc, #108]	@ (8003398 <HAL_UART_MspInit+0x11c>)
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003334:	4b18      	ldr	r3, [pc, #96]	@ (8003398 <HAL_UART_MspInit+0x11c>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	4a17      	ldr	r2, [pc, #92]	@ (8003398 <HAL_UART_MspInit+0x11c>)
 800333a:	f043 0304 	orr.w	r3, r3, #4
 800333e:	6193      	str	r3, [r2, #24]
 8003340:	4b15      	ldr	r3, [pc, #84]	@ (8003398 <HAL_UART_MspInit+0x11c>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800334c:	2304      	movs	r3, #4
 800334e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003354:	2303      	movs	r3, #3
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003358:	f107 0318 	add.w	r3, r7, #24
 800335c:	4619      	mov	r1, r3
 800335e:	480f      	ldr	r0, [pc, #60]	@ (800339c <HAL_UART_MspInit+0x120>)
 8003360:	f000 fff6 	bl	8004350 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003364:	2308      	movs	r3, #8
 8003366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003370:	f107 0318 	add.w	r3, r7, #24
 8003374:	4619      	mov	r1, r3
 8003376:	4809      	ldr	r0, [pc, #36]	@ (800339c <HAL_UART_MspInit+0x120>)
 8003378:	f000 ffea 	bl	8004350 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800337c:	2200      	movs	r2, #0
 800337e:	2100      	movs	r1, #0
 8003380:	2026      	movs	r0, #38	@ 0x26
 8003382:	f000 fcfc 	bl	8003d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003386:	2026      	movs	r0, #38	@ 0x26
 8003388:	f000 fd15 	bl	8003db6 <HAL_NVIC_EnableIRQ>
}
 800338c:	bf00      	nop
 800338e:	3728      	adds	r7, #40	@ 0x28
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40013800 	.word	0x40013800
 8003398:	40021000 	.word	0x40021000
 800339c:	40010800 	.word	0x40010800
 80033a0:	40004400 	.word	0x40004400

080033a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80033a8:	f3bf 8f4f 	dsb	sy
}
 80033ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80033ae:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <__NVIC_SystemReset+0x24>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80033b6:	4904      	ldr	r1, [pc, #16]	@ (80033c8 <__NVIC_SystemReset+0x24>)
 80033b8:	4b04      	ldr	r3, [pc, #16]	@ (80033cc <__NVIC_SystemReset+0x28>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80033be:	f3bf 8f4f 	dsb	sy
}
 80033c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <__NVIC_SystemReset+0x20>
 80033c8:	e000ed00 	.word	0xe000ed00
 80033cc:	05fa0004 	.word	0x05fa0004

080033d0 <Manage_NRF_Data>:
extern float RH;
extern uint32_t PPM_VALUE;

void Transmitt_reply_to_gateway(char *msg);

void Manage_NRF_Data() {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b09a      	sub	sp, #104	@ 0x68
 80033d4:	af00      	add	r7, sp, #0
	uint8_t temp;
	char received_data_from_gateway[50] = "";
 80033d6:	2300      	movs	r3, #0
 80033d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80033da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033de:	222e      	movs	r2, #46	@ 0x2e
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f004 fbd9 	bl	8007b9a <memset>
	NRF24_read(received_data_from_gateway, 5); //store received data
 80033e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80033ec:	2105      	movs	r1, #5
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe fb5a 	bl	8001aa8 <NRF24_read>

	//copy the 3rd byte, it is the command
	char rcvd_command;
	rcvd_command = received_data_from_gateway[2];
 80033f4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80033f8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	//commands
	char get_temperature = '0';
 80033fc:	2330      	movs	r3, #48	@ 0x30
 80033fe:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	char get_humidity = '1';
 8003402:	2331      	movs	r3, #49	@ 0x31
 8003404:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	char get_CO2 = '2';
 8003408:	2332      	movs	r3, #50	@ 0x32
 800340a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

	char return_data[10];
	//==================if received command is to GET TEMPERATURE ===========//
	if (rcvd_command == get_temperature) {  //Read Temp From Sensor
 800340e:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8003412:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8003416:	429a      	cmp	r2, r3
 8003418:	d10e      	bne.n	8003438 <Manage_NRF_Data+0x68>
		DHT11_READ_TEMP_AND_HUM();
 800341a:	f7fd ffc9 	bl	80013b0 <DHT11_READ_TEMP_AND_HUM>
		// Convert float to string
		sprintf(return_data, "%f", tCelsius);
 800341e:	4b41      	ldr	r3, [pc, #260]	@ (8003524 <Manage_NRF_Data+0x154>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd f800 	bl	8000428 <__aeabi_f2d>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003430:	493d      	ldr	r1, [pc, #244]	@ (8003528 <Manage_NRF_Data+0x158>)
 8003432:	f004 fb4f 	bl	8007ad4 <siprintf>
 8003436:	e029      	b.n	800348c <Manage_NRF_Data+0xbc>
	} else if (rcvd_command == get_humidity) {  //Read Temp From Sensor
 8003438:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800343c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8003440:	429a      	cmp	r2, r3
 8003442:	d10e      	bne.n	8003462 <Manage_NRF_Data+0x92>
		DHT11_READ_TEMP_AND_HUM();
 8003444:	f7fd ffb4 	bl	80013b0 <DHT11_READ_TEMP_AND_HUM>
		// Convert float to string
		sprintf(return_data, "%f", RH);
 8003448:	4b38      	ldr	r3, [pc, #224]	@ (800352c <Manage_NRF_Data+0x15c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7fc ffeb 	bl	8000428 <__aeabi_f2d>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800345a:	4933      	ldr	r1, [pc, #204]	@ (8003528 <Manage_NRF_Data+0x158>)
 800345c:	f004 fb3a 	bl	8007ad4 <siprintf>
 8003460:	e014      	b.n	800348c <Manage_NRF_Data+0xbc>
	} else if (rcvd_command == get_CO2) {  //Read Temp From Sensor
 8003462:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 8003466:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800346a:	429a      	cmp	r2, r3
 800346c:	d10a      	bne.n	8003484 <Manage_NRF_Data+0xb4>
		DHT11_READ_TEMP_AND_HUM();
 800346e:	f7fd ff9f 	bl	80013b0 <DHT11_READ_TEMP_AND_HUM>
		// Convert float to string
		sprintf(return_data, "%d", PPM_VALUE);
 8003472:	4b2f      	ldr	r3, [pc, #188]	@ (8003530 <Manage_NRF_Data+0x160>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800347a:	492e      	ldr	r1, [pc, #184]	@ (8003534 <Manage_NRF_Data+0x164>)
 800347c:	4618      	mov	r0, r3
 800347e:	f004 fb29 	bl	8007ad4 <siprintf>
 8003482:	e003      	b.n	800348c <Manage_NRF_Data+0xbc>
	} else {
		Print_Debug_Data((char*) "INVALID COMMAND RECEIVED \n");
 8003484:	482c      	ldr	r0, [pc, #176]	@ (8003538 <Manage_NRF_Data+0x168>)
 8003486:	f000 f8b1 	bl	80035ec <Print_Debug_Data>
 800348a:	e047      	b.n	800351c <Manage_NRF_Data+0x14c>
		return;
	}
	char return_string1[32];
	memcpy(return_string1, my_node_id, 2);
 800348c:	4b2b      	ldr	r3, [pc, #172]	@ (800353c <Manage_NRF_Data+0x16c>)
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	80bb      	strh	r3, [r7, #4]
	return_string1[2] = rcvd_command;
 8003492:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8003496:	71bb      	strb	r3, [r7, #6]
	return_string1[3] = return_data[0];
 8003498:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800349c:	71fb      	strb	r3, [r7, #7]
	return_string1[4] = return_data[1];
 800349e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034a2:	723b      	strb	r3, [r7, #8]
	return_string1[5] = return_data[2];
 80034a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80034a8:	727b      	strb	r3, [r7, #9]
	return_string1[6] = return_data[3];
 80034aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034ae:	72bb      	strb	r3, [r7, #10]

//If it is getting PPM, data will be 4 digit
	if (rcvd_command == get_CO2) {
 80034b0:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 80034b4:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d103      	bne.n	80034c4 <Manage_NRF_Data+0xf4>
		temp = 7;
 80034bc:	2307      	movs	r3, #7
 80034be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80034c2:	e002      	b.n	80034ca <Manage_NRF_Data+0xfa>
	} else {
		temp = 5;
 80034c4:	2305      	movs	r3, #5
 80034c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	}

	for (uint8_t i = temp; i < 32; i++) {
 80034ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80034ce:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80034d2:	e00b      	b.n	80034ec <Manage_NRF_Data+0x11c>
		return_string1[i] = '\0';
 80034d4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80034d8:	3368      	adds	r3, #104	@ 0x68
 80034da:	443b      	add	r3, r7
 80034dc:	2200      	movs	r2, #0
 80034de:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (uint8_t i = temp; i < 32; i++) {
 80034e2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80034e6:	3301      	adds	r3, #1
 80034e8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80034ec:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80034f0:	2b1f      	cmp	r3, #31
 80034f2:	d9ef      	bls.n	80034d4 <Manage_NRF_Data+0x104>
	}

	HAL_UART_Transmit(&huart1, (uint8_t*) "\nReturning data ::> ",
 80034f4:	230a      	movs	r3, #10
 80034f6:	2214      	movs	r2, #20
 80034f8:	4911      	ldr	r1, [pc, #68]	@ (8003540 <Manage_NRF_Data+0x170>)
 80034fa:	4812      	ldr	r0, [pc, #72]	@ (8003544 <Manage_NRF_Data+0x174>)
 80034fc:	f002 fd94 	bl	8006028 <HAL_UART_Transmit>
			strlen("\nReturning data ::> "), 10);
	HAL_UART_Transmit(&huart1, (uint8_t*) return_string1, 7, 10);
 8003500:	1d39      	adds	r1, r7, #4
 8003502:	230a      	movs	r3, #10
 8003504:	2207      	movs	r2, #7
 8003506:	480f      	ldr	r0, [pc, #60]	@ (8003544 <Manage_NRF_Data+0x174>)
 8003508:	f002 fd8e 	bl	8006028 <HAL_UART_Transmit>
	Switch_to_Transmitt_mode();
 800350c:	f7ff fc06 	bl	8002d1c <Switch_to_Transmitt_mode>
	Transmitt_reply_to_gateway(return_string1);
 8003510:	1d3b      	adds	r3, r7, #4
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f818 	bl	8003548 <Transmitt_reply_to_gateway>
	Switch_to_Receiver_mode();
 8003518:	f7ff fc16 	bl	8002d48 <Switch_to_Receiver_mode>
}
 800351c:	3768      	adds	r7, #104	@ 0x68
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	2000020c 	.word	0x2000020c
 8003528:	0800b8b8 	.word	0x0800b8b8
 800352c:	20000214 	.word	0x20000214
 8003530:	200001f8 	.word	0x200001f8
 8003534:	0800b8bc 	.word	0x0800b8bc
 8003538:	0800b8c0 	.word	0x0800b8c0
 800353c:	20000450 	.word	0x20000450
 8003540:	0800b8dc 	.word	0x0800b8dc
 8003544:	200003c0 	.word	0x200003c0

08003548 <Transmitt_reply_to_gateway>:
void Transmitt_reply_to_gateway(char *msg) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,
 8003550:	230a      	movs	r3, #10
 8003552:	2231      	movs	r2, #49	@ 0x31
 8003554:	4920      	ldr	r1, [pc, #128]	@ (80035d8 <Transmitt_reply_to_gateway+0x90>)
 8003556:	4821      	ldr	r0, [pc, #132]	@ (80035dc <Transmitt_reply_to_gateway+0x94>)
 8003558:	f002 fd66 	bl	8006028 <HAL_UART_Transmit>
			(uint8_t*) "\nTransmitting reply to gateway .. waiting for ack",
			strlen("\nTransmitting reply to gateway .. waiting for ack"), 10);
	char received_data_from_srvr1[10];
	memcpy(received_data_from_srvr1, msg, 32);
 800355c:	f107 0308 	add.w	r3, r7, #8
 8003560:	2220      	movs	r2, #32
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4618      	mov	r0, r3
 8003566:	f004 fbb8 	bl	8007cda <memcpy>
	for (int i = 0; i <= 10; i++) {
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	e026      	b.n	80035be <Transmitt_reply_to_gateway+0x76>
		if (!NRF24_write(received_data_from_srvr1, 32)) {
 8003570:	f107 0308 	add.w	r3, r7, #8
 8003574:	2120      	movs	r1, #32
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe fa42 	bl	8001a00 <NRF24_write>
 800357c:	4603      	mov	r3, r0
 800357e:	f083 0301 	eor.w	r3, r3, #1
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d010      	beq.n	80035aa <Transmitt_reply_to_gateway+0x62>
			NRF24_write(received_data_from_srvr1, 32);
 8003588:	f107 0308 	add.w	r3, r7, #8
 800358c:	2120      	movs	r1, #32
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe fa36 	bl	8001a00 <NRF24_write>
			HAL_UART_Transmit(&huart1, (uint8_t*) ".", strlen("."), 10);
 8003594:	230a      	movs	r3, #10
 8003596:	2201      	movs	r2, #1
 8003598:	4911      	ldr	r1, [pc, #68]	@ (80035e0 <Transmitt_reply_to_gateway+0x98>)
 800359a:	4810      	ldr	r0, [pc, #64]	@ (80035dc <Transmitt_reply_to_gateway+0x94>)
 800359c:	f002 fd44 	bl	8006028 <HAL_UART_Transmit>
			HAL_Delay(400);
 80035a0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80035a4:	f000 faf0 	bl	8003b88 <HAL_Delay>
 80035a8:	e006      	b.n	80035b8 <Transmitt_reply_to_gateway+0x70>
		} else {
			HAL_UART_Transmit(&huart1,
 80035aa:	230a      	movs	r3, #10
 80035ac:	222a      	movs	r2, #42	@ 0x2a
 80035ae:	490d      	ldr	r1, [pc, #52]	@ (80035e4 <Transmitt_reply_to_gateway+0x9c>)
 80035b0:	480a      	ldr	r0, [pc, #40]	@ (80035dc <Transmitt_reply_to_gateway+0x94>)
 80035b2:	f002 fd39 	bl	8006028 <HAL_UART_Transmit>
 80035b6:	e00b      	b.n	80035d0 <Transmitt_reply_to_gateway+0x88>
	for (int i = 0; i <= 10; i++) {
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	3301      	adds	r3, #1
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b0a      	cmp	r3, #10
 80035c2:	ddd5      	ble.n	8003570 <Transmitt_reply_to_gateway+0x28>
					(uint8_t*) "\nReply Transmitted to gateway successfully",
					strlen("\nReply Transmitted to gateway successfully"), 10);
			return;
		}
	}
	HAL_UART_Transmit(&huart1,
 80035c4:	230a      	movs	r3, #10
 80035c6:	2231      	movs	r2, #49	@ 0x31
 80035c8:	4907      	ldr	r1, [pc, #28]	@ (80035e8 <Transmitt_reply_to_gateway+0xa0>)
 80035ca:	4804      	ldr	r0, [pc, #16]	@ (80035dc <Transmitt_reply_to_gateway+0x94>)
 80035cc:	f002 fd2c 	bl	8006028 <HAL_UART_Transmit>
			(uint8_t*) "\nTransmission Failed, No acknowledgement received",
			strlen("\nTransmission Failed, No acknowledgement received"), 10);

}
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	0800b8f4 	.word	0x0800b8f4
 80035dc:	200003c0 	.word	0x200003c0
 80035e0:	0800b928 	.word	0x0800b928
 80035e4:	0800b92c 	.word	0x0800b92c
 80035e8:	0800b958 	.word	0x0800b958

080035ec <Print_Debug_Data>:

void Print_Debug_Data(char *Debug_Msg) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*) Debug_Msg, strlen(Debug_Msg),
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7fc fdab 	bl	8000150 <strlen>
 80035fa:	4603      	mov	r3, r0
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	23c8      	movs	r3, #200	@ 0xc8
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4803      	ldr	r0, [pc, #12]	@ (8003610 <Print_Debug_Data+0x24>)
 8003604:	f002 fd10 	bl	8006028 <HAL_UART_Transmit>
			200);
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	200003c0 	.word	0x200003c0

08003614 <Manage_Received_Data_From_UART>:
void Manage_Received_Data_From_UART(uint8_t UART_DATA[], size_t data_length) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	@ 0x28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
// Check if the first element is '*'
	if (data_length > 0 && UART_DATA[0] == '*') {
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80c0 	beq.w	80037a6 <Manage_Received_Data_From_UART+0x192>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b2a      	cmp	r3, #42	@ 0x2a
 800362c:	f040 80bb 	bne.w	80037a6 <Manage_Received_Data_From_UART+0x192>

//IF THE COMAMND IS TO ERASE FDLASH [It will erase the next three page, which contain the data ]
		if (strncmp((char*) &UART_DATA[1], "ERASE_NRF_DATA", 14) == 0) {
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3301      	adds	r3, #1
 8003634:	220e      	movs	r2, #14
 8003636:	495e      	ldr	r1, [pc, #376]	@ (80037b0 <Manage_Received_Data_From_UART+0x19c>)
 8003638:	4618      	mov	r0, r3
 800363a:	f004 fab6 	bl	8007baa <strncmp>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d114      	bne.n	800366e <Manage_Received_Data_From_UART+0x5a>
			//Erase FLASH_ADDR_4_No_Of_Polling_Node
			bool status = ee_format_page(FLASH_ADDR_START_PG_29_USER_VAR, 4);
 8003644:	2104      	movs	r1, #4
 8003646:	485b      	ldr	r0, [pc, #364]	@ (80037b4 <Manage_Received_Data_From_UART+0x1a0>)
 8003648:	f7ff f944 	bl	80028d4 <ee_format_page>
 800364c:	4603      	mov	r3, r0
 800364e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (!status) {
 8003652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003656:	f083 0301 	eor.w	r3, r3, #1
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <Manage_Received_Data_From_UART+0x54>
				Print_Debug_Data(
 8003660:	4855      	ldr	r0, [pc, #340]	@ (80037b8 <Manage_Received_Data_From_UART+0x1a4>)
 8003662:	f7ff ffc3 	bl	80035ec <Print_Debug_Data>
 8003666:	e002      	b.n	800366e <Manage_Received_Data_From_UART+0x5a>
						(char*) "[ERASE FLASH ERROR] UNABLE TO ERASE \n");
			} else {
				Print_Debug_Data(
 8003668:	4854      	ldr	r0, [pc, #336]	@ (80037bc <Manage_Received_Data_From_UART+0x1a8>)
 800366a:	f7ff ffbf 	bl	80035ec <Print_Debug_Data>
						(char*) "[ERASE FLASH ] FLASH ERASED SUCCESFULLY \n");
			}
		}

//IF THE COMAMND IS TO STORE NRF CHANNEL
		if (strncmp((char*) &UART_DATA[1], "NRF_CH:", 7) == 0) {
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3301      	adds	r3, #1
 8003672:	2207      	movs	r2, #7
 8003674:	4952      	ldr	r1, [pc, #328]	@ (80037c0 <Manage_Received_Data_From_UART+0x1ac>)
 8003676:	4618      	mov	r0, r3
 8003678:	f004 fa97 	bl	8007baa <strncmp>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d12d      	bne.n	80036de <Manage_Received_Data_From_UART+0xca>
			//if the condition meet, then the next two byte is the channel
			uint8_t nrfChannel[2];
			nrfChannel[0] = UART_DATA[8];
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	7a1b      	ldrb	r3, [r3, #8]
 8003686:	733b      	strb	r3, [r7, #12]
			nrfChannel[1] = UART_DATA[9];
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	7a5b      	ldrb	r3, [r3, #9]
 800368c:	737b      	strb	r3, [r7, #13]
			// Convert ASCII characters to numeric values
			uint8_t highValue = nrfChannel[0] - '0';
 800368e:	7b3b      	ldrb	r3, [r7, #12]
 8003690:	3b30      	subs	r3, #48	@ 0x30
 8003692:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			uint8_t lowValue = nrfChannel[1] - '0';
 8003696:	7b7b      	ldrb	r3, [r7, #13]
 8003698:	3b30      	subs	r3, #48	@ 0x30
 800369a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			// Combine the digits into a single uint8_t
			uint8_t nrfChannel_8_t = (highValue * 10) + lowValue;
 800369e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80036a2:	461a      	mov	r2, r3
 80036a4:	0092      	lsls	r2, r2, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80036b0:	4413      	add	r3, r2
 80036b2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			if (!ee_write_16(FLASH_ADDR_4_Self_Channel, nrfChannel_8_t)) {
 80036b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	4619      	mov	r1, r3
 80036be:	4841      	ldr	r0, [pc, #260]	@ (80037c4 <Manage_Received_Data_From_UART+0x1b0>)
 80036c0:	f7ff f8a0 	bl	8002804 <ee_write_16>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f083 0301 	eor.w	r3, r3, #1
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <Manage_Received_Data_From_UART+0xc4>
				Print_Debug_Data(
 80036d0:	483d      	ldr	r0, [pc, #244]	@ (80037c8 <Manage_Received_Data_From_UART+0x1b4>)
 80036d2:	f7ff ff8b 	bl	80035ec <Print_Debug_Data>
 80036d6:	e002      	b.n	80036de <Manage_Received_Data_From_UART+0xca>
						(char*) "[ERROR WRITING FLASH] UNABLE TO WRITE CHANNEL Variable\n");
			} else {
				Print_Debug_Data(
 80036d8:	483c      	ldr	r0, [pc, #240]	@ (80037cc <Manage_Received_Data_From_UART+0x1b8>)
 80036da:	f7ff ff87 	bl	80035ec <Print_Debug_Data>
						(char*) "[Writing Channel] Channel Written SUCCESFULLY \n");
			}
		}
//IF THE COMAMND IS TO STORE NRF PIPE ADDRESS
		if (strncmp((char*) &UART_DATA[1], "NRF_PIPE_ADDR:", 14) == 0) {
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3301      	adds	r3, #1
 80036e2:	220e      	movs	r2, #14
 80036e4:	493a      	ldr	r1, [pc, #232]	@ (80037d0 <Manage_Received_Data_From_UART+0x1bc>)
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 fa5f 	bl	8007baa <strncmp>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d14d      	bne.n	800378e <Manage_Received_Data_From_UART+0x17a>
			// If the condition is met, copy the next two bytes to another array
			uint8_t PIPE_Addr[2];
			PIPE_Addr[0] = UART_DATA[15];
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	7bdb      	ldrb	r3, [r3, #15]
 80036f6:	723b      	strb	r3, [r7, #8]
			PIPE_Addr[1] = UART_DATA[16];
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7c1b      	ldrb	r3, [r3, #16]
 80036fc:	727b      	strb	r3, [r7, #9]
			//process the command

			//STORE THE NODE ID, like 01 or 02, which will be required for REPLY
			uint16_t DEVICE_ADDRESS = (PIPE_Addr[1] << 8) | PIPE_Addr[0];
 80036fe:	7a7b      	ldrb	r3, [r7, #9]
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	b21a      	sxth	r2, r3
 8003704:	7a3b      	ldrb	r3, [r7, #8]
 8003706:	b21b      	sxth	r3, r3
 8003708:	4313      	orrs	r3, r2
 800370a:	b21b      	sxth	r3, r3
 800370c:	847b      	strh	r3, [r7, #34]	@ 0x22
			if (!ee_write_16(FLASH_ADDR_4_DEVICE_ID, DEVICE_ADDRESS)) {
 800370e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003710:	4619      	mov	r1, r3
 8003712:	4830      	ldr	r0, [pc, #192]	@ (80037d4 <Manage_Received_Data_From_UART+0x1c0>)
 8003714:	f7ff f876 	bl	8002804 <ee_write_16>
 8003718:	4603      	mov	r3, r0
 800371a:	f083 0301 	eor.w	r3, r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <Manage_Received_Data_From_UART+0x118>
				Print_Debug_Data(
 8003724:	482c      	ldr	r0, [pc, #176]	@ (80037d8 <Manage_Received_Data_From_UART+0x1c4>)
 8003726:	f7ff ff61 	bl	80035ec <Print_Debug_Data>
 800372a:	e002      	b.n	8003732 <Manage_Received_Data_From_UART+0x11e>
						(char*) "[ERROR WRITING FLASH] UNABLE TO WRITE DEVICE ID Variable\n");
			} else {
				Print_Debug_Data(
 800372c:	482b      	ldr	r0, [pc, #172]	@ (80037dc <Manage_Received_Data_From_UART+0x1c8>)
 800372e:	f7ff ff5d 	bl	80035ec <Print_Debug_Data>
						(char*) "[Writing DEVICE ID] DEVICE ID Written SUCCESFULLY \n");
			}

			HAL_Delay(100);
 8003732:	2064      	movs	r0, #100	@ 0x64
 8003734:	f000 fa28 	bl	8003b88 <HAL_Delay>

			// Convert ASCII characters to numeric values
			uint8_t highValue = PIPE_Addr[0] - '0';
 8003738:	7a3b      	ldrb	r3, [r7, #8]
 800373a:	3b30      	subs	r3, #48	@ 0x30
 800373c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			uint8_t lowValue = PIPE_Addr[1] - '0';
 8003740:	7a7b      	ldrb	r3, [r7, #9]
 8003742:	3b30      	subs	r3, #48	@ 0x30
 8003744:	f887 3020 	strb.w	r3, [r7, #32]
			// Combine the digits into a single uint8_t
			uint8_t nrf_8_t = (highValue * 10) + lowValue;
 8003748:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800374c:	461a      	mov	r2, r3
 800374e:	0092      	lsls	r2, r2, #2
 8003750:	4413      	add	r3, r2
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	b2da      	uxtb	r2, r3
 8003756:	f897 3020 	ldrb.w	r3, [r7, #32]
 800375a:	4413      	add	r3, r2
 800375c:	77fb      	strb	r3, [r7, #31]
			//copy the gateway code of finding address, and save the address
			uint64_t NRF_Pipe_Addr = Get_Pipe_Address(nrf_8_t);
 800375e:	7ffb      	ldrb	r3, [r7, #31]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 f845 	bl	80037f0 <Get_Pipe_Address>
 8003766:	e9c7 0104 	strd	r0, r1, [r7, #16]
			//WRITE IT EEPROM
			if (!ee_write_64(FLASH_ADDR_4_PIPE_ADDR_FOR_NRF, NRF_Pipe_Addr)) {
 800376a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800376e:	481c      	ldr	r0, [pc, #112]	@ (80037e0 <Manage_Received_Data_From_UART+0x1cc>)
 8003770:	f7ff f87c 	bl	800286c <ee_write_64>
 8003774:	4603      	mov	r3, r0
 8003776:	f083 0301 	eor.w	r3, r3, #1
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <Manage_Received_Data_From_UART+0x174>
				Print_Debug_Data(
 8003780:	4818      	ldr	r0, [pc, #96]	@ (80037e4 <Manage_Received_Data_From_UART+0x1d0>)
 8003782:	f7ff ff33 	bl	80035ec <Print_Debug_Data>
 8003786:	e002      	b.n	800378e <Manage_Received_Data_From_UART+0x17a>
						(char*) "[UART CB] UNABLE TO WRITE NRF PIPE ADDRES\n");
			} else {
				Print_Debug_Data(
 8003788:	4817      	ldr	r0, [pc, #92]	@ (80037e8 <Manage_Received_Data_From_UART+0x1d4>)
 800378a:	f7ff ff2f 	bl	80035ec <Print_Debug_Data>
						(char*) "[UART CB] VALID ADDRESS FOUND AND IS SAVED INTO THE EMULATED EEPROM\n");
			}
		}
//IF THE COMMAND IS TO RESTART STM32
		if (strncmp((char*) &UART_DATA[1], "RESTART", 7) == 0) {
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3301      	adds	r3, #1
 8003792:	2207      	movs	r2, #7
 8003794:	4915      	ldr	r1, [pc, #84]	@ (80037ec <Manage_Received_Data_From_UART+0x1d8>)
 8003796:	4618      	mov	r0, r3
 8003798:	f004 fa07 	bl	8007baa <strncmp>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <Manage_Received_Data_From_UART+0x192>
			NVIC_SystemReset();
 80037a2:	f7ff fdff 	bl	80033a4 <__NVIC_SystemReset>
		}
	}
}
 80037a6:	bf00      	nop
 80037a8:	3728      	adds	r7, #40	@ 0x28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	0800b98c 	.word	0x0800b98c
 80037b4:	0800e800 	.word	0x0800e800
 80037b8:	0800b99c 	.word	0x0800b99c
 80037bc:	0800b9c4 	.word	0x0800b9c4
 80037c0:	0800b9f0 	.word	0x0800b9f0
 80037c4:	0800e804 	.word	0x0800e804
 80037c8:	0800b9f8 	.word	0x0800b9f8
 80037cc:	0800ba30 	.word	0x0800ba30
 80037d0:	0800ba60 	.word	0x0800ba60
 80037d4:	0800e818 	.word	0x0800e818
 80037d8:	0800ba70 	.word	0x0800ba70
 80037dc:	0800baac 	.word	0x0800baac
 80037e0:	0800e808 	.word	0x0800e808
 80037e4:	0800bae0 	.word	0x0800bae0
 80037e8:	0800bb0c 	.word	0x0800bb0c
 80037ec:	0800bb54 	.word	0x0800bb54

080037f0 <Get_Pipe_Address>:

uint64_t Get_Pipe_Address(uint8_t nrf_8_t) {
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	71fb      	strb	r3, [r7, #7]
	switch (nrf_8_t) {
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	2b1d      	cmp	r3, #29
 8003800:	f200 80b8 	bhi.w	8003974 <Get_Pipe_Address+0x184>
 8003804:	a201      	add	r2, pc, #4	@ (adr r2, 800380c <Get_Pipe_Address+0x1c>)
 8003806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380a:	bf00      	nop
 800380c:	08003885 	.word	0x08003885
 8003810:	0800388d 	.word	0x0800388d
 8003814:	08003895 	.word	0x08003895
 8003818:	0800389d 	.word	0x0800389d
 800381c:	080038a5 	.word	0x080038a5
 8003820:	080038ad 	.word	0x080038ad
 8003824:	080038b5 	.word	0x080038b5
 8003828:	080038bd 	.word	0x080038bd
 800382c:	080038c5 	.word	0x080038c5
 8003830:	080038cd 	.word	0x080038cd
 8003834:	080038d5 	.word	0x080038d5
 8003838:	080038dd 	.word	0x080038dd
 800383c:	080038e5 	.word	0x080038e5
 8003840:	080038ed 	.word	0x080038ed
 8003844:	080038f5 	.word	0x080038f5
 8003848:	080038fd 	.word	0x080038fd
 800384c:	08003905 	.word	0x08003905
 8003850:	0800390d 	.word	0x0800390d
 8003854:	08003915 	.word	0x08003915
 8003858:	0800391d 	.word	0x0800391d
 800385c:	08003925 	.word	0x08003925
 8003860:	0800392d 	.word	0x0800392d
 8003864:	08003935 	.word	0x08003935
 8003868:	0800393d 	.word	0x0800393d
 800386c:	08003945 	.word	0x08003945
 8003870:	0800394d 	.word	0x0800394d
 8003874:	08003955 	.word	0x08003955
 8003878:	0800395d 	.word	0x0800395d
 800387c:	08003965 	.word	0x08003965
 8003880:	0800396d 	.word	0x0800396d
	case 1:
		return 0x11223344AA;
 8003884:	a340      	add	r3, pc, #256	@ (adr r3, 8003988 <Get_Pipe_Address+0x198>)
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	e077      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 2:
		return 0x11223344AB;
 800388c:	a340      	add	r3, pc, #256	@ (adr r3, 8003990 <Get_Pipe_Address+0x1a0>)
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	e073      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 3:
		return 0x11223344AC;
 8003894:	a340      	add	r3, pc, #256	@ (adr r3, 8003998 <Get_Pipe_Address+0x1a8>)
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	e06f      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 4:
		return 0x11223344AD;
 800389c:	a340      	add	r3, pc, #256	@ (adr r3, 80039a0 <Get_Pipe_Address+0x1b0>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	e06b      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 5:
		return 0x11223344AE;
 80038a4:	a340      	add	r3, pc, #256	@ (adr r3, 80039a8 <Get_Pipe_Address+0x1b8>)
 80038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038aa:	e067      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 6:
		return 0x11223344AF;
 80038ac:	a340      	add	r3, pc, #256	@ (adr r3, 80039b0 <Get_Pipe_Address+0x1c0>)
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	e063      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 7:
		return 0x11223344B0;
 80038b4:	a340      	add	r3, pc, #256	@ (adr r3, 80039b8 <Get_Pipe_Address+0x1c8>)
 80038b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ba:	e05f      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 8:
		return 0x11223344B1;
 80038bc:	a340      	add	r3, pc, #256	@ (adr r3, 80039c0 <Get_Pipe_Address+0x1d0>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	e05b      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 9:
		return 0x11223344B2;
 80038c4:	a340      	add	r3, pc, #256	@ (adr r3, 80039c8 <Get_Pipe_Address+0x1d8>)
 80038c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ca:	e057      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 10:
		return 0x11223344B3;
 80038cc:	a340      	add	r3, pc, #256	@ (adr r3, 80039d0 <Get_Pipe_Address+0x1e0>)
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	e053      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 11:
		return 0x11223344B4;
 80038d4:	a340      	add	r3, pc, #256	@ (adr r3, 80039d8 <Get_Pipe_Address+0x1e8>)
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	e04f      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 12:
		return 0x11223344B5;
 80038dc:	a340      	add	r3, pc, #256	@ (adr r3, 80039e0 <Get_Pipe_Address+0x1f0>)
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	e04b      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 13:
		return 0x11223344B6;
 80038e4:	a340      	add	r3, pc, #256	@ (adr r3, 80039e8 <Get_Pipe_Address+0x1f8>)
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	e047      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 14:
		return 0x11223344B7;
 80038ec:	a340      	add	r3, pc, #256	@ (adr r3, 80039f0 <Get_Pipe_Address+0x200>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	e043      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 15:
		return 0x11223344B8;
 80038f4:	a340      	add	r3, pc, #256	@ (adr r3, 80039f8 <Get_Pipe_Address+0x208>)
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	e03f      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 16:
		return 0x11223344B9;
 80038fc:	a340      	add	r3, pc, #256	@ (adr r3, 8003a00 <Get_Pipe_Address+0x210>)
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	e03b      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 17:
		return 0x11223344BA;
 8003904:	a340      	add	r3, pc, #256	@ (adr r3, 8003a08 <Get_Pipe_Address+0x218>)
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	e037      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 18:
		return 0x11223344BB;
 800390c:	a340      	add	r3, pc, #256	@ (adr r3, 8003a10 <Get_Pipe_Address+0x220>)
 800390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003912:	e033      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 19:
		return 0x11223344BC;
 8003914:	a340      	add	r3, pc, #256	@ (adr r3, 8003a18 <Get_Pipe_Address+0x228>)
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	e02f      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 20:
		return 0x11223344BD;
 800391c:	a340      	add	r3, pc, #256	@ (adr r3, 8003a20 <Get_Pipe_Address+0x230>)
 800391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003922:	e02b      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 21:
		return 0x11223344BE;
 8003924:	a340      	add	r3, pc, #256	@ (adr r3, 8003a28 <Get_Pipe_Address+0x238>)
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	e027      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 22:
		return 0x11223344BF;
 800392c:	a340      	add	r3, pc, #256	@ (adr r3, 8003a30 <Get_Pipe_Address+0x240>)
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	e023      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 23:
		return 0x11223344C0;
 8003934:	a340      	add	r3, pc, #256	@ (adr r3, 8003a38 <Get_Pipe_Address+0x248>)
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	e01f      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 24:
		return 0x11223344C1;
 800393c:	a340      	add	r3, pc, #256	@ (adr r3, 8003a40 <Get_Pipe_Address+0x250>)
 800393e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003942:	e01b      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 25:
		return 0x11223344C2;
 8003944:	a340      	add	r3, pc, #256	@ (adr r3, 8003a48 <Get_Pipe_Address+0x258>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	e017      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 26:
		return 0x11223344C3;
 800394c:	a340      	add	r3, pc, #256	@ (adr r3, 8003a50 <Get_Pipe_Address+0x260>)
 800394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003952:	e013      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 27:
		return 0x11223344C4;
 8003954:	a340      	add	r3, pc, #256	@ (adr r3, 8003a58 <Get_Pipe_Address+0x268>)
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	e00f      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 28:
		return 0x11223344C5;
 800395c:	a340      	add	r3, pc, #256	@ (adr r3, 8003a60 <Get_Pipe_Address+0x270>)
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	e00b      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 29:
		return 0x11223344C6;
 8003964:	a340      	add	r3, pc, #256	@ (adr r3, 8003a68 <Get_Pipe_Address+0x278>)
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	e007      	b.n	800397c <Get_Pipe_Address+0x18c>
	case 30:
		return 0x11223344C7;
 800396c:	a340      	add	r3, pc, #256	@ (adr r3, 8003a70 <Get_Pipe_Address+0x280>)
 800396e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003972:	e003      	b.n	800397c <Get_Pipe_Address+0x18c>
	default:
		return 0;
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
	}
	return 0;
}
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	223344aa 	.word	0x223344aa
 800398c:	00000011 	.word	0x00000011
 8003990:	223344ab 	.word	0x223344ab
 8003994:	00000011 	.word	0x00000011
 8003998:	223344ac 	.word	0x223344ac
 800399c:	00000011 	.word	0x00000011
 80039a0:	223344ad 	.word	0x223344ad
 80039a4:	00000011 	.word	0x00000011
 80039a8:	223344ae 	.word	0x223344ae
 80039ac:	00000011 	.word	0x00000011
 80039b0:	223344af 	.word	0x223344af
 80039b4:	00000011 	.word	0x00000011
 80039b8:	223344b0 	.word	0x223344b0
 80039bc:	00000011 	.word	0x00000011
 80039c0:	223344b1 	.word	0x223344b1
 80039c4:	00000011 	.word	0x00000011
 80039c8:	223344b2 	.word	0x223344b2
 80039cc:	00000011 	.word	0x00000011
 80039d0:	223344b3 	.word	0x223344b3
 80039d4:	00000011 	.word	0x00000011
 80039d8:	223344b4 	.word	0x223344b4
 80039dc:	00000011 	.word	0x00000011
 80039e0:	223344b5 	.word	0x223344b5
 80039e4:	00000011 	.word	0x00000011
 80039e8:	223344b6 	.word	0x223344b6
 80039ec:	00000011 	.word	0x00000011
 80039f0:	223344b7 	.word	0x223344b7
 80039f4:	00000011 	.word	0x00000011
 80039f8:	223344b8 	.word	0x223344b8
 80039fc:	00000011 	.word	0x00000011
 8003a00:	223344b9 	.word	0x223344b9
 8003a04:	00000011 	.word	0x00000011
 8003a08:	223344ba 	.word	0x223344ba
 8003a0c:	00000011 	.word	0x00000011
 8003a10:	223344bb 	.word	0x223344bb
 8003a14:	00000011 	.word	0x00000011
 8003a18:	223344bc 	.word	0x223344bc
 8003a1c:	00000011 	.word	0x00000011
 8003a20:	223344bd 	.word	0x223344bd
 8003a24:	00000011 	.word	0x00000011
 8003a28:	223344be 	.word	0x223344be
 8003a2c:	00000011 	.word	0x00000011
 8003a30:	223344bf 	.word	0x223344bf
 8003a34:	00000011 	.word	0x00000011
 8003a38:	223344c0 	.word	0x223344c0
 8003a3c:	00000011 	.word	0x00000011
 8003a40:	223344c1 	.word	0x223344c1
 8003a44:	00000011 	.word	0x00000011
 8003a48:	223344c2 	.word	0x223344c2
 8003a4c:	00000011 	.word	0x00000011
 8003a50:	223344c3 	.word	0x223344c3
 8003a54:	00000011 	.word	0x00000011
 8003a58:	223344c4 	.word	0x223344c4
 8003a5c:	00000011 	.word	0x00000011
 8003a60:	223344c5 	.word	0x223344c5
 8003a64:	00000011 	.word	0x00000011
 8003a68:	223344c6 	.word	0x223344c6
 8003a6c:	00000011 	.word	0x00000011
 8003a70:	223344c7 	.word	0x223344c7
 8003a74:	00000011 	.word	0x00000011

08003a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a78:	f7ff fb38 	bl	80030ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a7c:	480b      	ldr	r0, [pc, #44]	@ (8003aac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003a7e:	490c      	ldr	r1, [pc, #48]	@ (8003ab0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003a80:	4a0c      	ldr	r2, [pc, #48]	@ (8003ab4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a84:	e002      	b.n	8003a8c <LoopCopyDataInit>

08003a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a8a:	3304      	adds	r3, #4

08003a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a90:	d3f9      	bcc.n	8003a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a92:	4a09      	ldr	r2, [pc, #36]	@ (8003ab8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003a94:	4c09      	ldr	r4, [pc, #36]	@ (8003abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a98:	e001      	b.n	8003a9e <LoopFillZerobss>

08003a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a9c:	3204      	adds	r2, #4

08003a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aa0:	d3fb      	bcc.n	8003a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003aa2:	f004 f8e5 	bl	8007c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003aa6:	f7fe ffbb 	bl	8002a20 <main>
  bx lr
 8003aaa:	4770      	bx	lr
  ldr r0, =_sdata
 8003aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ab0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003ab4:	0800bfd8 	.word	0x0800bfd8
  ldr r2, =_sbss
 8003ab8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003abc:	200005c4 	.word	0x200005c4

08003ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ac0:	e7fe      	b.n	8003ac0 <ADC1_2_IRQHandler>
	...

08003ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ac8:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <HAL_Init+0x28>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a07      	ldr	r2, [pc, #28]	@ (8003aec <HAL_Init+0x28>)
 8003ace:	f043 0310 	orr.w	r3, r3, #16
 8003ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ad4:	2003      	movs	r0, #3
 8003ad6:	f000 f947 	bl	8003d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ada:	200f      	movs	r0, #15
 8003adc:	f000 f808 	bl	8003af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ae0:	f7ff f9ca 	bl	8002e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40022000 	.word	0x40022000

08003af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003af8:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <HAL_InitTick+0x54>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b12      	ldr	r3, [pc, #72]	@ (8003b48 <HAL_InitTick+0x58>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	4619      	mov	r1, r3
 8003b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f95f 	bl	8003dd2 <HAL_SYSTICK_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e00e      	b.n	8003b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b0f      	cmp	r3, #15
 8003b22:	d80a      	bhi.n	8003b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b24:	2200      	movs	r2, #0
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2c:	f000 f927 	bl	8003d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b30:	4a06      	ldr	r2, [pc, #24]	@ (8003b4c <HAL_InitTick+0x5c>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e000      	b.n	8003b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000000 	.word	0x20000000
 8003b48:	20000008 	.word	0x20000008
 8003b4c:	20000004 	.word	0x20000004

08003b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <HAL_IncTick+0x1c>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <HAL_IncTick+0x20>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4413      	add	r3, r2
 8003b60:	4a03      	ldr	r2, [pc, #12]	@ (8003b70 <HAL_IncTick+0x20>)
 8003b62:	6013      	str	r3, [r2, #0]
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	20000008 	.word	0x20000008
 8003b70:	20000454 	.word	0x20000454

08003b74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  return uwTick;
 8003b78:	4b02      	ldr	r3, [pc, #8]	@ (8003b84 <HAL_GetTick+0x10>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	20000454 	.word	0x20000454

08003b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b90:	f7ff fff0 	bl	8003b74 <HAL_GetTick>
 8003b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d005      	beq.n	8003bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <HAL_Delay+0x44>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bae:	bf00      	nop
 8003bb0:	f7ff ffe0 	bl	8003b74 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d8f7      	bhi.n	8003bb0 <HAL_Delay+0x28>
  {
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000008 	.word	0x20000008

08003bd0 <__NVIC_SetPriorityGrouping>:
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003be0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c14 <__NVIC_SetPriorityGrouping+0x44>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bec:	4013      	ands	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c02:	4a04      	ldr	r2, [pc, #16]	@ (8003c14 <__NVIC_SetPriorityGrouping+0x44>)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	60d3      	str	r3, [r2, #12]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <__NVIC_GetPriorityGrouping>:
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c1c:	4b04      	ldr	r3, [pc, #16]	@ (8003c30 <__NVIC_GetPriorityGrouping+0x18>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	0a1b      	lsrs	r3, r3, #8
 8003c22:	f003 0307 	and.w	r3, r3, #7
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <__NVIC_EnableIRQ>:
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	db0b      	blt.n	8003c5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	f003 021f 	and.w	r2, r3, #31
 8003c4c:	4906      	ldr	r1, [pc, #24]	@ (8003c68 <__NVIC_EnableIRQ+0x34>)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	2001      	movs	r0, #1
 8003c56:	fa00 f202 	lsl.w	r2, r0, r2
 8003c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	e000e100 	.word	0xe000e100

08003c6c <__NVIC_SetPriority>:
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	6039      	str	r1, [r7, #0]
 8003c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	db0a      	blt.n	8003c96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	490c      	ldr	r1, [pc, #48]	@ (8003cb8 <__NVIC_SetPriority+0x4c>)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	0112      	lsls	r2, r2, #4
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	440b      	add	r3, r1
 8003c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c94:	e00a      	b.n	8003cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	4908      	ldr	r1, [pc, #32]	@ (8003cbc <__NVIC_SetPriority+0x50>)
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	3b04      	subs	r3, #4
 8003ca4:	0112      	lsls	r2, r2, #4
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	440b      	add	r3, r1
 8003caa:	761a      	strb	r2, [r3, #24]
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	e000e100 	.word	0xe000e100
 8003cbc:	e000ed00 	.word	0xe000ed00

08003cc0 <NVIC_EncodePriority>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	@ 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f1c3 0307 	rsb	r3, r3, #7
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	bf28      	it	cs
 8003cde:	2304      	movcs	r3, #4
 8003ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	2b06      	cmp	r3, #6
 8003ce8:	d902      	bls.n	8003cf0 <NVIC_EncodePriority+0x30>
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3b03      	subs	r3, #3
 8003cee:	e000      	b.n	8003cf2 <NVIC_EncodePriority+0x32>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	401a      	ands	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d08:	f04f 31ff 	mov.w	r1, #4294967295
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d12:	43d9      	mvns	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d18:	4313      	orrs	r3, r2
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3724      	adds	r7, #36	@ 0x24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d34:	d301      	bcc.n	8003d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d36:	2301      	movs	r3, #1
 8003d38:	e00f      	b.n	8003d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d64 <SysTick_Config+0x40>)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d42:	210f      	movs	r1, #15
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	f7ff ff90 	bl	8003c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d4c:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <SysTick_Config+0x40>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d52:	4b04      	ldr	r3, [pc, #16]	@ (8003d64 <SysTick_Config+0x40>)
 8003d54:	2207      	movs	r2, #7
 8003d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	e000e010 	.word	0xe000e010

08003d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff2d 	bl	8003bd0 <__NVIC_SetPriorityGrouping>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	4603      	mov	r3, r0
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d90:	f7ff ff42 	bl	8003c18 <__NVIC_GetPriorityGrouping>
 8003d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	6978      	ldr	r0, [r7, #20]
 8003d9c:	f7ff ff90 	bl	8003cc0 <NVIC_EncodePriority>
 8003da0:	4602      	mov	r2, r0
 8003da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da6:	4611      	mov	r1, r2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff5f 	bl	8003c6c <__NVIC_SetPriority>
}
 8003dae:	bf00      	nop
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff35 	bl	8003c34 <__NVIC_EnableIRQ>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ffa2 	bl	8003d24 <SysTick_Config>
 8003de0:	4603      	mov	r3, r0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b085      	sub	sp, #20
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d008      	beq.n	8003e14 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2204      	movs	r2, #4
 8003e06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e020      	b.n	8003e56 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 020e 	bic.w	r2, r2, #14
 8003e22:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e42:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d005      	beq.n	8003e84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	73fb      	strb	r3, [r7, #15]
 8003e82:	e051      	b.n	8003f28 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 020e 	bic.w	r2, r2, #14
 8003e92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0201 	bic.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a22      	ldr	r2, [pc, #136]	@ (8003f34 <HAL_DMA_Abort_IT+0xd4>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d029      	beq.n	8003f02 <HAL_DMA_Abort_IT+0xa2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a21      	ldr	r2, [pc, #132]	@ (8003f38 <HAL_DMA_Abort_IT+0xd8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d022      	beq.n	8003efe <HAL_DMA_Abort_IT+0x9e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f3c <HAL_DMA_Abort_IT+0xdc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01a      	beq.n	8003ef8 <HAL_DMA_Abort_IT+0x98>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f40 <HAL_DMA_Abort_IT+0xe0>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d012      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0x92>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f44 <HAL_DMA_Abort_IT+0xe4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00a      	beq.n	8003eec <HAL_DMA_Abort_IT+0x8c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1b      	ldr	r2, [pc, #108]	@ (8003f48 <HAL_DMA_Abort_IT+0xe8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d102      	bne.n	8003ee6 <HAL_DMA_Abort_IT+0x86>
 8003ee0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003ee4:	e00e      	b.n	8003f04 <HAL_DMA_Abort_IT+0xa4>
 8003ee6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003eea:	e00b      	b.n	8003f04 <HAL_DMA_Abort_IT+0xa4>
 8003eec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ef0:	e008      	b.n	8003f04 <HAL_DMA_Abort_IT+0xa4>
 8003ef2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ef6:	e005      	b.n	8003f04 <HAL_DMA_Abort_IT+0xa4>
 8003ef8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003efc:	e002      	b.n	8003f04 <HAL_DMA_Abort_IT+0xa4>
 8003efe:	2310      	movs	r3, #16
 8003f00:	e000      	b.n	8003f04 <HAL_DMA_Abort_IT+0xa4>
 8003f02:	2301      	movs	r3, #1
 8003f04:	4a11      	ldr	r2, [pc, #68]	@ (8003f4c <HAL_DMA_Abort_IT+0xec>)
 8003f06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	4798      	blx	r3
    } 
  }
  return status;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40020008 	.word	0x40020008
 8003f38:	4002001c 	.word	0x4002001c
 8003f3c:	40020030 	.word	0x40020030
 8003f40:	40020044 	.word	0x40020044
 8003f44:	40020058 	.word	0x40020058
 8003f48:	4002006c 	.word	0x4002006c
 8003f4c:	40020000 	.word	0x40020000

08003f50 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8004028 <HAL_FLASH_Program+0xd8>)
 8003f6c:	7e1b      	ldrb	r3, [r3, #24]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_FLASH_Program+0x26>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e054      	b.n	8004020 <HAL_FLASH_Program+0xd0>
 8003f76:	4b2c      	ldr	r3, [pc, #176]	@ (8004028 <HAL_FLASH_Program+0xd8>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003f7c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f80:	f000 f8a8 	bl	80040d4 <FLASH_WaitForLastOperation>
 8003f84:	4603      	mov	r3, r0
 8003f86:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d144      	bne.n	8004018 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d102      	bne.n	8003f9a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003f94:	2301      	movs	r3, #1
 8003f96:	757b      	strb	r3, [r7, #21]
 8003f98:	e007      	b.n	8003faa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d102      	bne.n	8003fa6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	757b      	strb	r3, [r7, #21]
 8003fa4:	e001      	b.n	8003faa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003faa:	2300      	movs	r3, #0
 8003fac:	75bb      	strb	r3, [r7, #22]
 8003fae:	e02d      	b.n	800400c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003fb0:	7dbb      	ldrb	r3, [r7, #22]
 8003fb2:	005a      	lsls	r2, r3, #1
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	eb02 0c03 	add.w	ip, r2, r3
 8003fba:	7dbb      	ldrb	r3, [r7, #22]
 8003fbc:	0119      	lsls	r1, r3, #4
 8003fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fc2:	f1c1 0620 	rsb	r6, r1, #32
 8003fc6:	f1a1 0020 	sub.w	r0, r1, #32
 8003fca:	fa22 f401 	lsr.w	r4, r2, r1
 8003fce:	fa03 f606 	lsl.w	r6, r3, r6
 8003fd2:	4334      	orrs	r4, r6
 8003fd4:	fa23 f000 	lsr.w	r0, r3, r0
 8003fd8:	4304      	orrs	r4, r0
 8003fda:	fa23 f501 	lsr.w	r5, r3, r1
 8003fde:	b2a3      	uxth	r3, r4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4660      	mov	r0, ip
 8003fe4:	f000 f85a 	bl	800409c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003fe8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003fec:	f000 f872 	bl	80040d4 <FLASH_WaitForLastOperation>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800402c <HAL_FLASH_Program+0xdc>)
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800402c <HAL_FLASH_Program+0xdc>)
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8004000:	7dfb      	ldrb	r3, [r7, #23]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d107      	bne.n	8004016 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8004006:	7dbb      	ldrb	r3, [r7, #22]
 8004008:	3301      	adds	r3, #1
 800400a:	75bb      	strb	r3, [r7, #22]
 800400c:	7dba      	ldrb	r2, [r7, #22]
 800400e:	7d7b      	ldrb	r3, [r7, #21]
 8004010:	429a      	cmp	r2, r3
 8004012:	d3cd      	bcc.n	8003fb0 <HAL_FLASH_Program+0x60>
 8004014:	e000      	b.n	8004018 <HAL_FLASH_Program+0xc8>
      {
        break;
 8004016:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004018:	4b03      	ldr	r3, [pc, #12]	@ (8004028 <HAL_FLASH_Program+0xd8>)
 800401a:	2200      	movs	r2, #0
 800401c:	761a      	strb	r2, [r3, #24]

  return status;
 800401e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004020:	4618      	mov	r0, r3
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004028:	20000458 	.word	0x20000458
 800402c:	40022000 	.word	0x40022000

08004030 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800403a:	4b0d      	ldr	r3, [pc, #52]	@ (8004070 <HAL_FLASH_Unlock+0x40>)
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00d      	beq.n	8004062 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004046:	4b0a      	ldr	r3, [pc, #40]	@ (8004070 <HAL_FLASH_Unlock+0x40>)
 8004048:	4a0a      	ldr	r2, [pc, #40]	@ (8004074 <HAL_FLASH_Unlock+0x44>)
 800404a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800404c:	4b08      	ldr	r3, [pc, #32]	@ (8004070 <HAL_FLASH_Unlock+0x40>)
 800404e:	4a0a      	ldr	r2, [pc, #40]	@ (8004078 <HAL_FLASH_Unlock+0x48>)
 8004050:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004052:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <HAL_FLASH_Unlock+0x40>)
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8004062:	79fb      	ldrb	r3, [r7, #7]
}
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40022000 	.word	0x40022000
 8004074:	45670123 	.word	0x45670123
 8004078:	cdef89ab 	.word	0xcdef89ab

0800407c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004080:	4b05      	ldr	r3, [pc, #20]	@ (8004098 <HAL_FLASH_Lock+0x1c>)
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	4a04      	ldr	r2, [pc, #16]	@ (8004098 <HAL_FLASH_Lock+0x1c>)
 8004086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800408a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40022000 	.word	0x40022000

0800409c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040a8:	4b08      	ldr	r3, [pc, #32]	@ (80040cc <FLASH_Program_HalfWord+0x30>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80040ae:	4b08      	ldr	r3, [pc, #32]	@ (80040d0 <FLASH_Program_HalfWord+0x34>)
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	4a07      	ldr	r2, [pc, #28]	@ (80040d0 <FLASH_Program_HalfWord+0x34>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	887a      	ldrh	r2, [r7, #2]
 80040be:	801a      	strh	r2, [r3, #0]
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000458 	.word	0x20000458
 80040d0:	40022000 	.word	0x40022000

080040d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80040dc:	f7ff fd4a 	bl	8003b74 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80040e2:	e010      	b.n	8004106 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d00c      	beq.n	8004106 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <FLASH_WaitForLastOperation+0x2e>
 80040f2:	f7ff fd3f 	bl	8003b74 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d201      	bcs.n	8004106 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e025      	b.n	8004152 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004106:	4b15      	ldr	r3, [pc, #84]	@ (800415c <FLASH_WaitForLastOperation+0x88>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e8      	bne.n	80040e4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004112:	4b12      	ldr	r3, [pc, #72]	@ (800415c <FLASH_WaitForLastOperation+0x88>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800411e:	4b0f      	ldr	r3, [pc, #60]	@ (800415c <FLASH_WaitForLastOperation+0x88>)
 8004120:	2220      	movs	r2, #32
 8004122:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004124:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <FLASH_WaitForLastOperation+0x88>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10b      	bne.n	8004148 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004130:	4b0a      	ldr	r3, [pc, #40]	@ (800415c <FLASH_WaitForLastOperation+0x88>)
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800413c:	4b07      	ldr	r3, [pc, #28]	@ (800415c <FLASH_WaitForLastOperation+0x88>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004148:	f000 f80a 	bl	8004160 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40022000 	.word	0x40022000

08004160 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800416a:	4b23      	ldr	r3, [pc, #140]	@ (80041f8 <FLASH_SetErrorCode+0x98>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004176:	4b21      	ldr	r3, [pc, #132]	@ (80041fc <FLASH_SetErrorCode+0x9c>)
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f043 0302 	orr.w	r3, r3, #2
 800417e:	4a1f      	ldr	r2, [pc, #124]	@ (80041fc <FLASH_SetErrorCode+0x9c>)
 8004180:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f043 0310 	orr.w	r3, r3, #16
 8004188:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800418a:	4b1b      	ldr	r3, [pc, #108]	@ (80041f8 <FLASH_SetErrorCode+0x98>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d009      	beq.n	80041aa <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004196:	4b19      	ldr	r3, [pc, #100]	@ (80041fc <FLASH_SetErrorCode+0x9c>)
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	4a17      	ldr	r2, [pc, #92]	@ (80041fc <FLASH_SetErrorCode+0x9c>)
 80041a0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f043 0304 	orr.w	r3, r3, #4
 80041a8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80041aa:	4b13      	ldr	r3, [pc, #76]	@ (80041f8 <FLASH_SetErrorCode+0x98>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00b      	beq.n	80041ce <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80041b6:	4b11      	ldr	r3, [pc, #68]	@ (80041fc <FLASH_SetErrorCode+0x9c>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f043 0304 	orr.w	r3, r3, #4
 80041be:	4a0f      	ldr	r2, [pc, #60]	@ (80041fc <FLASH_SetErrorCode+0x9c>)
 80041c0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80041c2:	4b0d      	ldr	r3, [pc, #52]	@ (80041f8 <FLASH_SetErrorCode+0x98>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4a0c      	ldr	r2, [pc, #48]	@ (80041f8 <FLASH_SetErrorCode+0x98>)
 80041c8:	f023 0301 	bic.w	r3, r3, #1
 80041cc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f240 1201 	movw	r2, #257	@ 0x101
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d106      	bne.n	80041e6 <FLASH_SetErrorCode+0x86>
 80041d8:	4b07      	ldr	r3, [pc, #28]	@ (80041f8 <FLASH_SetErrorCode+0x98>)
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	4a06      	ldr	r2, [pc, #24]	@ (80041f8 <FLASH_SetErrorCode+0x98>)
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	61d3      	str	r3, [r2, #28]
}  
 80041e4:	e002      	b.n	80041ec <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80041e6:	4a04      	ldr	r2, [pc, #16]	@ (80041f8 <FLASH_SetErrorCode+0x98>)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	60d3      	str	r3, [r2, #12]
}  
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40022000 	.word	0x40022000
 80041fc:	20000458 	.word	0x20000458

08004200 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004212:	4b2f      	ldr	r3, [pc, #188]	@ (80042d0 <HAL_FLASHEx_Erase+0xd0>)
 8004214:	7e1b      	ldrb	r3, [r3, #24]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_FLASHEx_Erase+0x1e>
 800421a:	2302      	movs	r3, #2
 800421c:	e053      	b.n	80042c6 <HAL_FLASHEx_Erase+0xc6>
 800421e:	4b2c      	ldr	r3, [pc, #176]	@ (80042d0 <HAL_FLASHEx_Erase+0xd0>)
 8004220:	2201      	movs	r2, #1
 8004222:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b02      	cmp	r3, #2
 800422a:	d116      	bne.n	800425a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800422c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004230:	f7ff ff50 	bl	80040d4 <FLASH_WaitForLastOperation>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d141      	bne.n	80042be <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800423a:	2001      	movs	r0, #1
 800423c:	f000 f84c 	bl	80042d8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004240:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004244:	f7ff ff46 	bl	80040d4 <FLASH_WaitForLastOperation>
 8004248:	4603      	mov	r3, r0
 800424a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800424c:	4b21      	ldr	r3, [pc, #132]	@ (80042d4 <HAL_FLASHEx_Erase+0xd4>)
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	4a20      	ldr	r2, [pc, #128]	@ (80042d4 <HAL_FLASHEx_Erase+0xd4>)
 8004252:	f023 0304 	bic.w	r3, r3, #4
 8004256:	6113      	str	r3, [r2, #16]
 8004258:	e031      	b.n	80042be <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800425a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800425e:	f7ff ff39 	bl	80040d4 <FLASH_WaitForLastOperation>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d12a      	bne.n	80042be <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f04f 32ff 	mov.w	r2, #4294967295
 800426e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	e019      	b.n	80042ac <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004278:	68b8      	ldr	r0, [r7, #8]
 800427a:	f000 f849 	bl	8004310 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800427e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004282:	f7ff ff27 	bl	80040d4 <FLASH_WaitForLastOperation>
 8004286:	4603      	mov	r3, r0
 8004288:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800428a:	4b12      	ldr	r3, [pc, #72]	@ (80042d4 <HAL_FLASHEx_Erase+0xd4>)
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	4a11      	ldr	r2, [pc, #68]	@ (80042d4 <HAL_FLASHEx_Erase+0xd4>)
 8004290:	f023 0302 	bic.w	r3, r3, #2
 8004294:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	601a      	str	r2, [r3, #0]
            break;
 80042a2:	e00c      	b.n	80042be <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042aa:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	029a      	lsls	r2, r3, #10
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	4413      	add	r3, r2
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d3dc      	bcc.n	8004278 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80042be:	4b04      	ldr	r3, [pc, #16]	@ (80042d0 <HAL_FLASHEx_Erase+0xd0>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	761a      	strb	r2, [r3, #24]

  return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000458 	.word	0x20000458
 80042d4:	40022000 	.word	0x40022000

080042d8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042e0:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <FLASH_MassErase+0x30>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80042e6:	4b09      	ldr	r3, [pc, #36]	@ (800430c <FLASH_MassErase+0x34>)
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	4a08      	ldr	r2, [pc, #32]	@ (800430c <FLASH_MassErase+0x34>)
 80042ec:	f043 0304 	orr.w	r3, r3, #4
 80042f0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80042f2:	4b06      	ldr	r3, [pc, #24]	@ (800430c <FLASH_MassErase+0x34>)
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	4a05      	ldr	r2, [pc, #20]	@ (800430c <FLASH_MassErase+0x34>)
 80042f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042fc:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr
 8004308:	20000458 	.word	0x20000458
 800430c:	40022000 	.word	0x40022000

08004310 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004318:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <FLASH_PageErase+0x38>)
 800431a:	2200      	movs	r2, #0
 800431c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800431e:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <FLASH_PageErase+0x3c>)
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	4a0a      	ldr	r2, [pc, #40]	@ (800434c <FLASH_PageErase+0x3c>)
 8004324:	f043 0302 	orr.w	r3, r3, #2
 8004328:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800432a:	4a08      	ldr	r2, [pc, #32]	@ (800434c <FLASH_PageErase+0x3c>)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004330:	4b06      	ldr	r3, [pc, #24]	@ (800434c <FLASH_PageErase+0x3c>)
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	4a05      	ldr	r2, [pc, #20]	@ (800434c <FLASH_PageErase+0x3c>)
 8004336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800433a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000458 	.word	0x20000458
 800434c:	40022000 	.word	0x40022000

08004350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004350:	b480      	push	{r7}
 8004352:	b08b      	sub	sp, #44	@ 0x2c
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800435e:	2300      	movs	r3, #0
 8004360:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004362:	e169      	b.n	8004638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004364:	2201      	movs	r2, #1
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69fa      	ldr	r2, [r7, #28]
 8004374:	4013      	ands	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	429a      	cmp	r2, r3
 800437e:	f040 8158 	bne.w	8004632 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	4a9a      	ldr	r2, [pc, #616]	@ (80045f0 <HAL_GPIO_Init+0x2a0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d05e      	beq.n	800444a <HAL_GPIO_Init+0xfa>
 800438c:	4a98      	ldr	r2, [pc, #608]	@ (80045f0 <HAL_GPIO_Init+0x2a0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d875      	bhi.n	800447e <HAL_GPIO_Init+0x12e>
 8004392:	4a98      	ldr	r2, [pc, #608]	@ (80045f4 <HAL_GPIO_Init+0x2a4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d058      	beq.n	800444a <HAL_GPIO_Init+0xfa>
 8004398:	4a96      	ldr	r2, [pc, #600]	@ (80045f4 <HAL_GPIO_Init+0x2a4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d86f      	bhi.n	800447e <HAL_GPIO_Init+0x12e>
 800439e:	4a96      	ldr	r2, [pc, #600]	@ (80045f8 <HAL_GPIO_Init+0x2a8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d052      	beq.n	800444a <HAL_GPIO_Init+0xfa>
 80043a4:	4a94      	ldr	r2, [pc, #592]	@ (80045f8 <HAL_GPIO_Init+0x2a8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d869      	bhi.n	800447e <HAL_GPIO_Init+0x12e>
 80043aa:	4a94      	ldr	r2, [pc, #592]	@ (80045fc <HAL_GPIO_Init+0x2ac>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d04c      	beq.n	800444a <HAL_GPIO_Init+0xfa>
 80043b0:	4a92      	ldr	r2, [pc, #584]	@ (80045fc <HAL_GPIO_Init+0x2ac>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d863      	bhi.n	800447e <HAL_GPIO_Init+0x12e>
 80043b6:	4a92      	ldr	r2, [pc, #584]	@ (8004600 <HAL_GPIO_Init+0x2b0>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d046      	beq.n	800444a <HAL_GPIO_Init+0xfa>
 80043bc:	4a90      	ldr	r2, [pc, #576]	@ (8004600 <HAL_GPIO_Init+0x2b0>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d85d      	bhi.n	800447e <HAL_GPIO_Init+0x12e>
 80043c2:	2b12      	cmp	r3, #18
 80043c4:	d82a      	bhi.n	800441c <HAL_GPIO_Init+0xcc>
 80043c6:	2b12      	cmp	r3, #18
 80043c8:	d859      	bhi.n	800447e <HAL_GPIO_Init+0x12e>
 80043ca:	a201      	add	r2, pc, #4	@ (adr r2, 80043d0 <HAL_GPIO_Init+0x80>)
 80043cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d0:	0800444b 	.word	0x0800444b
 80043d4:	08004425 	.word	0x08004425
 80043d8:	08004437 	.word	0x08004437
 80043dc:	08004479 	.word	0x08004479
 80043e0:	0800447f 	.word	0x0800447f
 80043e4:	0800447f 	.word	0x0800447f
 80043e8:	0800447f 	.word	0x0800447f
 80043ec:	0800447f 	.word	0x0800447f
 80043f0:	0800447f 	.word	0x0800447f
 80043f4:	0800447f 	.word	0x0800447f
 80043f8:	0800447f 	.word	0x0800447f
 80043fc:	0800447f 	.word	0x0800447f
 8004400:	0800447f 	.word	0x0800447f
 8004404:	0800447f 	.word	0x0800447f
 8004408:	0800447f 	.word	0x0800447f
 800440c:	0800447f 	.word	0x0800447f
 8004410:	0800447f 	.word	0x0800447f
 8004414:	0800442d 	.word	0x0800442d
 8004418:	08004441 	.word	0x08004441
 800441c:	4a79      	ldr	r2, [pc, #484]	@ (8004604 <HAL_GPIO_Init+0x2b4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d013      	beq.n	800444a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004422:	e02c      	b.n	800447e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	623b      	str	r3, [r7, #32]
          break;
 800442a:	e029      	b.n	8004480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	3304      	adds	r3, #4
 8004432:	623b      	str	r3, [r7, #32]
          break;
 8004434:	e024      	b.n	8004480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	3308      	adds	r3, #8
 800443c:	623b      	str	r3, [r7, #32]
          break;
 800443e:	e01f      	b.n	8004480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	330c      	adds	r3, #12
 8004446:	623b      	str	r3, [r7, #32]
          break;
 8004448:	e01a      	b.n	8004480 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d102      	bne.n	8004458 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004452:	2304      	movs	r3, #4
 8004454:	623b      	str	r3, [r7, #32]
          break;
 8004456:	e013      	b.n	8004480 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d105      	bne.n	800446c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004460:	2308      	movs	r3, #8
 8004462:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69fa      	ldr	r2, [r7, #28]
 8004468:	611a      	str	r2, [r3, #16]
          break;
 800446a:	e009      	b.n	8004480 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800446c:	2308      	movs	r3, #8
 800446e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	615a      	str	r2, [r3, #20]
          break;
 8004476:	e003      	b.n	8004480 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004478:	2300      	movs	r3, #0
 800447a:	623b      	str	r3, [r7, #32]
          break;
 800447c:	e000      	b.n	8004480 <HAL_GPIO_Init+0x130>
          break;
 800447e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2bff      	cmp	r3, #255	@ 0xff
 8004484:	d801      	bhi.n	800448a <HAL_GPIO_Init+0x13a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	e001      	b.n	800448e <HAL_GPIO_Init+0x13e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3304      	adds	r3, #4
 800448e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2bff      	cmp	r3, #255	@ 0xff
 8004494:	d802      	bhi.n	800449c <HAL_GPIO_Init+0x14c>
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	e002      	b.n	80044a2 <HAL_GPIO_Init+0x152>
 800449c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449e:	3b08      	subs	r3, #8
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	210f      	movs	r1, #15
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	401a      	ands	r2, r3
 80044b4:	6a39      	ldr	r1, [r7, #32]
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	fa01 f303 	lsl.w	r3, r1, r3
 80044bc:	431a      	orrs	r2, r3
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 80b1 	beq.w	8004632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004608 <HAL_GPIO_Init+0x2b8>)
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	4a4c      	ldr	r2, [pc, #304]	@ (8004608 <HAL_GPIO_Init+0x2b8>)
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	6193      	str	r3, [r2, #24]
 80044dc:	4b4a      	ldr	r3, [pc, #296]	@ (8004608 <HAL_GPIO_Init+0x2b8>)
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80044e8:	4a48      	ldr	r2, [pc, #288]	@ (800460c <HAL_GPIO_Init+0x2bc>)
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	089b      	lsrs	r3, r3, #2
 80044ee:	3302      	adds	r3, #2
 80044f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	220f      	movs	r2, #15
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4013      	ands	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a40      	ldr	r2, [pc, #256]	@ (8004610 <HAL_GPIO_Init+0x2c0>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d013      	beq.n	800453c <HAL_GPIO_Init+0x1ec>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a3f      	ldr	r2, [pc, #252]	@ (8004614 <HAL_GPIO_Init+0x2c4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00d      	beq.n	8004538 <HAL_GPIO_Init+0x1e8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a3e      	ldr	r2, [pc, #248]	@ (8004618 <HAL_GPIO_Init+0x2c8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d007      	beq.n	8004534 <HAL_GPIO_Init+0x1e4>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a3d      	ldr	r2, [pc, #244]	@ (800461c <HAL_GPIO_Init+0x2cc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d101      	bne.n	8004530 <HAL_GPIO_Init+0x1e0>
 800452c:	2303      	movs	r3, #3
 800452e:	e006      	b.n	800453e <HAL_GPIO_Init+0x1ee>
 8004530:	2304      	movs	r3, #4
 8004532:	e004      	b.n	800453e <HAL_GPIO_Init+0x1ee>
 8004534:	2302      	movs	r3, #2
 8004536:	e002      	b.n	800453e <HAL_GPIO_Init+0x1ee>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <HAL_GPIO_Init+0x1ee>
 800453c:	2300      	movs	r3, #0
 800453e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004540:	f002 0203 	and.w	r2, r2, #3
 8004544:	0092      	lsls	r2, r2, #2
 8004546:	4093      	lsls	r3, r2
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800454e:	492f      	ldr	r1, [pc, #188]	@ (800460c <HAL_GPIO_Init+0x2bc>)
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	3302      	adds	r3, #2
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d006      	beq.n	8004576 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004568:	4b2d      	ldr	r3, [pc, #180]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	492c      	ldr	r1, [pc, #176]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]
 8004574:	e006      	b.n	8004584 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004576:	4b2a      	ldr	r3, [pc, #168]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	43db      	mvns	r3, r3
 800457e:	4928      	ldr	r1, [pc, #160]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 8004580:	4013      	ands	r3, r2
 8004582:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d006      	beq.n	800459e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004590:	4b23      	ldr	r3, [pc, #140]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	4922      	ldr	r1, [pc, #136]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	60cb      	str	r3, [r1, #12]
 800459c:	e006      	b.n	80045ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800459e:	4b20      	ldr	r3, [pc, #128]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	491e      	ldr	r1, [pc, #120]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d006      	beq.n	80045c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045b8:	4b19      	ldr	r3, [pc, #100]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	4918      	ldr	r1, [pc, #96]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	604b      	str	r3, [r1, #4]
 80045c4:	e006      	b.n	80045d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045c6:	4b16      	ldr	r3, [pc, #88]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	43db      	mvns	r3, r3
 80045ce:	4914      	ldr	r1, [pc, #80]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d021      	beq.n	8004624 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80045e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	490e      	ldr	r1, [pc, #56]	@ (8004620 <HAL_GPIO_Init+0x2d0>)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	600b      	str	r3, [r1, #0]
 80045ec:	e021      	b.n	8004632 <HAL_GPIO_Init+0x2e2>
 80045ee:	bf00      	nop
 80045f0:	10320000 	.word	0x10320000
 80045f4:	10310000 	.word	0x10310000
 80045f8:	10220000 	.word	0x10220000
 80045fc:	10210000 	.word	0x10210000
 8004600:	10120000 	.word	0x10120000
 8004604:	10110000 	.word	0x10110000
 8004608:	40021000 	.word	0x40021000
 800460c:	40010000 	.word	0x40010000
 8004610:	40010800 	.word	0x40010800
 8004614:	40010c00 	.word	0x40010c00
 8004618:	40011000 	.word	0x40011000
 800461c:	40011400 	.word	0x40011400
 8004620:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004624:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <HAL_GPIO_Init+0x304>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	43db      	mvns	r3, r3
 800462c:	4909      	ldr	r1, [pc, #36]	@ (8004654 <HAL_GPIO_Init+0x304>)
 800462e:	4013      	ands	r3, r2
 8004630:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	3301      	adds	r3, #1
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463e:	fa22 f303 	lsr.w	r3, r2, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	f47f ae8e 	bne.w	8004364 <HAL_GPIO_Init+0x14>
  }
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	372c      	adds	r7, #44	@ 0x2c
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr
 8004654:	40010400 	.word	0x40010400

08004658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	460b      	mov	r3, r1
 8004662:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	887b      	ldrh	r3, [r7, #2]
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004670:	2301      	movs	r3, #1
 8004672:	73fb      	strb	r3, [r7, #15]
 8004674:	e001      	b.n	800467a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	807b      	strh	r3, [r7, #2]
 8004692:	4613      	mov	r3, r2
 8004694:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004696:	787b      	ldrb	r3, [r7, #1]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800469c:	887a      	ldrh	r2, [r7, #2]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80046a2:	e003      	b.n	80046ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80046a4:	887b      	ldrh	r3, [r7, #2]
 80046a6:	041a      	lsls	r2, r3, #16
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	611a      	str	r2, [r3, #16]
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b085      	sub	sp, #20
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046c8:	887a      	ldrh	r2, [r7, #2]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4013      	ands	r3, r2
 80046ce:	041a      	lsls	r2, r3, #16
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	43d9      	mvns	r1, r3
 80046d4:	887b      	ldrh	r3, [r7, #2]
 80046d6:	400b      	ands	r3, r1
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	611a      	str	r2, [r3, #16]
}
 80046de:	bf00      	nop
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e272      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8087 	beq.w	8004816 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004708:	4b92      	ldr	r3, [pc, #584]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b04      	cmp	r3, #4
 8004712:	d00c      	beq.n	800472e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004714:	4b8f      	ldr	r3, [pc, #572]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 030c 	and.w	r3, r3, #12
 800471c:	2b08      	cmp	r3, #8
 800471e:	d112      	bne.n	8004746 <HAL_RCC_OscConfig+0x5e>
 8004720:	4b8c      	ldr	r3, [pc, #560]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800472c:	d10b      	bne.n	8004746 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472e:	4b89      	ldr	r3, [pc, #548]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d06c      	beq.n	8004814 <HAL_RCC_OscConfig+0x12c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d168      	bne.n	8004814 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e24c      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800474e:	d106      	bne.n	800475e <HAL_RCC_OscConfig+0x76>
 8004750:	4b80      	ldr	r3, [pc, #512]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a7f      	ldr	r2, [pc, #508]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	e02e      	b.n	80047bc <HAL_RCC_OscConfig+0xd4>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x98>
 8004766:	4b7b      	ldr	r3, [pc, #492]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a7a      	ldr	r2, [pc, #488]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 800476c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b78      	ldr	r3, [pc, #480]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a77      	ldr	r2, [pc, #476]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004778:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e01d      	b.n	80047bc <HAL_RCC_OscConfig+0xd4>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004788:	d10c      	bne.n	80047a4 <HAL_RCC_OscConfig+0xbc>
 800478a:	4b72      	ldr	r3, [pc, #456]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a71      	ldr	r2, [pc, #452]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	4b6f      	ldr	r3, [pc, #444]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a6e      	ldr	r2, [pc, #440]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 800479c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	e00b      	b.n	80047bc <HAL_RCC_OscConfig+0xd4>
 80047a4:	4b6b      	ldr	r3, [pc, #428]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a6a      	ldr	r2, [pc, #424]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 80047aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	4b68      	ldr	r3, [pc, #416]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a67      	ldr	r2, [pc, #412]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 80047b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d013      	beq.n	80047ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c4:	f7ff f9d6 	bl	8003b74 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047cc:	f7ff f9d2 	bl	8003b74 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b64      	cmp	r3, #100	@ 0x64
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e200      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047de:	4b5d      	ldr	r3, [pc, #372]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0xe4>
 80047ea:	e014      	b.n	8004816 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7ff f9c2 	bl	8003b74 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f4:	f7ff f9be 	bl	8003b74 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b64      	cmp	r3, #100	@ 0x64
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e1ec      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004806:	4b53      	ldr	r3, [pc, #332]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x10c>
 8004812:	e000      	b.n	8004816 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d063      	beq.n	80048ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004822:	4b4c      	ldr	r3, [pc, #304]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800482e:	4b49      	ldr	r3, [pc, #292]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b08      	cmp	r3, #8
 8004838:	d11c      	bne.n	8004874 <HAL_RCC_OscConfig+0x18c>
 800483a:	4b46      	ldr	r3, [pc, #280]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d116      	bne.n	8004874 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004846:	4b43      	ldr	r3, [pc, #268]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_RCC_OscConfig+0x176>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d001      	beq.n	800485e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e1c0      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485e:	4b3d      	ldr	r3, [pc, #244]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4939      	ldr	r1, [pc, #228]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 800486e:	4313      	orrs	r3, r2
 8004870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004872:	e03a      	b.n	80048ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d020      	beq.n	80048be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800487c:	4b36      	ldr	r3, [pc, #216]	@ (8004958 <HAL_RCC_OscConfig+0x270>)
 800487e:	2201      	movs	r2, #1
 8004880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004882:	f7ff f977 	bl	8003b74 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800488a:	f7ff f973 	bl	8003b74 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e1a1      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800489c:	4b2d      	ldr	r3, [pc, #180]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	4927      	ldr	r1, [pc, #156]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	600b      	str	r3, [r1, #0]
 80048bc:	e015      	b.n	80048ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048be:	4b26      	ldr	r3, [pc, #152]	@ (8004958 <HAL_RCC_OscConfig+0x270>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7ff f956 	bl	8003b74 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048cc:	f7ff f952 	bl	8003b74 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e180      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048de:	4b1d      	ldr	r3, [pc, #116]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d03a      	beq.n	800496c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d019      	beq.n	8004932 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048fe:	4b17      	ldr	r3, [pc, #92]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004904:	f7ff f936 	bl	8003b74 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800490c:	f7ff f932 	bl	8003b74 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e160      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491e:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <HAL_RCC_OscConfig+0x26c>)
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800492a:	2001      	movs	r0, #1
 800492c:	f000 face 	bl	8004ecc <RCC_Delay>
 8004930:	e01c      	b.n	800496c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004932:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <HAL_RCC_OscConfig+0x274>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004938:	f7ff f91c 	bl	8003b74 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800493e:	e00f      	b.n	8004960 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004940:	f7ff f918 	bl	8003b74 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d908      	bls.n	8004960 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e146      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000
 8004958:	42420000 	.word	0x42420000
 800495c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004960:	4b92      	ldr	r3, [pc, #584]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e9      	bne.n	8004940 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80a6 	beq.w	8004ac6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497a:	2300      	movs	r3, #0
 800497c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800497e:	4b8b      	ldr	r3, [pc, #556]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10d      	bne.n	80049a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800498a:	4b88      	ldr	r3, [pc, #544]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	4a87      	ldr	r2, [pc, #540]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004994:	61d3      	str	r3, [r2, #28]
 8004996:	4b85      	ldr	r3, [pc, #532]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049a2:	2301      	movs	r3, #1
 80049a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a6:	4b82      	ldr	r3, [pc, #520]	@ (8004bb0 <HAL_RCC_OscConfig+0x4c8>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d118      	bne.n	80049e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b2:	4b7f      	ldr	r3, [pc, #508]	@ (8004bb0 <HAL_RCC_OscConfig+0x4c8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a7e      	ldr	r2, [pc, #504]	@ (8004bb0 <HAL_RCC_OscConfig+0x4c8>)
 80049b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049be:	f7ff f8d9 	bl	8003b74 <HAL_GetTick>
 80049c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c4:	e008      	b.n	80049d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c6:	f7ff f8d5 	bl	8003b74 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b64      	cmp	r3, #100	@ 0x64
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e103      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d8:	4b75      	ldr	r3, [pc, #468]	@ (8004bb0 <HAL_RCC_OscConfig+0x4c8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f0      	beq.n	80049c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d106      	bne.n	80049fa <HAL_RCC_OscConfig+0x312>
 80049ec:	4b6f      	ldr	r3, [pc, #444]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	4a6e      	ldr	r2, [pc, #440]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	6213      	str	r3, [r2, #32]
 80049f8:	e02d      	b.n	8004a56 <HAL_RCC_OscConfig+0x36e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10c      	bne.n	8004a1c <HAL_RCC_OscConfig+0x334>
 8004a02:	4b6a      	ldr	r3, [pc, #424]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	4a69      	ldr	r2, [pc, #420]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	6213      	str	r3, [r2, #32]
 8004a0e:	4b67      	ldr	r3, [pc, #412]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	4a66      	ldr	r2, [pc, #408]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	f023 0304 	bic.w	r3, r3, #4
 8004a18:	6213      	str	r3, [r2, #32]
 8004a1a:	e01c      	b.n	8004a56 <HAL_RCC_OscConfig+0x36e>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b05      	cmp	r3, #5
 8004a22:	d10c      	bne.n	8004a3e <HAL_RCC_OscConfig+0x356>
 8004a24:	4b61      	ldr	r3, [pc, #388]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	4a60      	ldr	r2, [pc, #384]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004a2a:	f043 0304 	orr.w	r3, r3, #4
 8004a2e:	6213      	str	r3, [r2, #32]
 8004a30:	4b5e      	ldr	r3, [pc, #376]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	4a5d      	ldr	r2, [pc, #372]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6213      	str	r3, [r2, #32]
 8004a3c:	e00b      	b.n	8004a56 <HAL_RCC_OscConfig+0x36e>
 8004a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	4a5a      	ldr	r2, [pc, #360]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	6213      	str	r3, [r2, #32]
 8004a4a:	4b58      	ldr	r3, [pc, #352]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	4a57      	ldr	r2, [pc, #348]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d015      	beq.n	8004a8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a5e:	f7ff f889 	bl	8003b74 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a64:	e00a      	b.n	8004a7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a66:	f7ff f885 	bl	8003b74 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e0b1      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0ee      	beq.n	8004a66 <HAL_RCC_OscConfig+0x37e>
 8004a88:	e014      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8a:	f7ff f873 	bl	8003b74 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a90:	e00a      	b.n	8004aa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a92:	f7ff f86f 	bl	8003b74 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e09b      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa8:	4b40      	ldr	r3, [pc, #256]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ee      	bne.n	8004a92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ab4:	7dfb      	ldrb	r3, [r7, #23]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d105      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aba:	4b3c      	ldr	r3, [pc, #240]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	4a3b      	ldr	r2, [pc, #236]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004ac0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ac4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 8087 	beq.w	8004bde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ad0:	4b36      	ldr	r3, [pc, #216]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d061      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	69db      	ldr	r3, [r3, #28]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d146      	bne.n	8004b72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae4:	4b33      	ldr	r3, [pc, #204]	@ (8004bb4 <HAL_RCC_OscConfig+0x4cc>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aea:	f7ff f843 	bl	8003b74 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af2:	f7ff f83f 	bl	8003b74 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e06d      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b04:	4b29      	ldr	r3, [pc, #164]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f0      	bne.n	8004af2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b18:	d108      	bne.n	8004b2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b1a:	4b24      	ldr	r3, [pc, #144]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	4921      	ldr	r1, [pc, #132]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a19      	ldr	r1, [r3, #32]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	491b      	ldr	r1, [pc, #108]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b44:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb4 <HAL_RCC_OscConfig+0x4cc>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4a:	f7ff f813 	bl	8003b74 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b52:	f7ff f80f 	bl	8003b74 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e03d      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b64:	4b11      	ldr	r3, [pc, #68]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x46a>
 8004b70:	e035      	b.n	8004bde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b72:	4b10      	ldr	r3, [pc, #64]	@ (8004bb4 <HAL_RCC_OscConfig+0x4cc>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b78:	f7fe fffc 	bl	8003b74 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b80:	f7fe fff8 	bl	8003b74 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e026      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b92:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <HAL_RCC_OscConfig+0x4c4>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x498>
 8004b9e:	e01e      	b.n	8004bde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d107      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e019      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	40007000 	.word	0x40007000
 8004bb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <HAL_RCC_OscConfig+0x500>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d106      	bne.n	8004bda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d001      	beq.n	8004bde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000

08004bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0d0      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c00:	4b6a      	ldr	r3, [pc, #424]	@ (8004dac <HAL_RCC_ClockConfig+0x1c0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d910      	bls.n	8004c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0e:	4b67      	ldr	r3, [pc, #412]	@ (8004dac <HAL_RCC_ClockConfig+0x1c0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 0207 	bic.w	r2, r3, #7
 8004c16:	4965      	ldr	r1, [pc, #404]	@ (8004dac <HAL_RCC_ClockConfig+0x1c0>)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b63      	ldr	r3, [pc, #396]	@ (8004dac <HAL_RCC_ClockConfig+0x1c0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0b8      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c48:	4b59      	ldr	r3, [pc, #356]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4a58      	ldr	r2, [pc, #352]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c60:	4b53      	ldr	r3, [pc, #332]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	4a52      	ldr	r2, [pc, #328]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004c6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c6c:	4b50      	ldr	r3, [pc, #320]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	494d      	ldr	r1, [pc, #308]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d040      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c92:	4b47      	ldr	r3, [pc, #284]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d115      	bne.n	8004cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e07f      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d107      	bne.n	8004cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004caa:	4b41      	ldr	r3, [pc, #260]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d109      	bne.n	8004cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e073      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cba:	4b3d      	ldr	r3, [pc, #244]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e06b      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cca:	4b39      	ldr	r3, [pc, #228]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f023 0203 	bic.w	r2, r3, #3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	4936      	ldr	r1, [pc, #216]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cdc:	f7fe ff4a 	bl	8003b74 <HAL_GetTick>
 8004ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce2:	e00a      	b.n	8004cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce4:	f7fe ff46 	bl	8003b74 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e053      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f003 020c 	and.w	r2, r3, #12
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d1eb      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d0c:	4b27      	ldr	r3, [pc, #156]	@ (8004dac <HAL_RCC_ClockConfig+0x1c0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d210      	bcs.n	8004d3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1a:	4b24      	ldr	r3, [pc, #144]	@ (8004dac <HAL_RCC_ClockConfig+0x1c0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f023 0207 	bic.w	r2, r3, #7
 8004d22:	4922      	ldr	r1, [pc, #136]	@ (8004dac <HAL_RCC_ClockConfig+0x1c0>)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2a:	4b20      	ldr	r3, [pc, #128]	@ (8004dac <HAL_RCC_ClockConfig+0x1c0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d001      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e032      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d008      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d48:	4b19      	ldr	r3, [pc, #100]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4916      	ldr	r1, [pc, #88]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d66:	4b12      	ldr	r3, [pc, #72]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	490e      	ldr	r1, [pc, #56]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d7a:	f000 f821 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	4b0b      	ldr	r3, [pc, #44]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	490a      	ldr	r1, [pc, #40]	@ (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8c:	5ccb      	ldrb	r3, [r1, r3]
 8004d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d92:	4a09      	ldr	r2, [pc, #36]	@ (8004db8 <HAL_RCC_ClockConfig+0x1cc>)
 8004d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d96:	4b09      	ldr	r3, [pc, #36]	@ (8004dbc <HAL_RCC_ClockConfig+0x1d0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe fea8 	bl	8003af0 <HAL_InitTick>

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40022000 	.word	0x40022000
 8004db0:	40021000 	.word	0x40021000
 8004db4:	0800bb6c 	.word	0x0800bb6c
 8004db8:	20000000 	.word	0x20000000
 8004dbc:	20000004 	.word	0x20000004

08004dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60bb      	str	r3, [r7, #8]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004dda:	4b1e      	ldr	r3, [pc, #120]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 030c 	and.w	r3, r3, #12
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d002      	beq.n	8004df0 <HAL_RCC_GetSysClockFreq+0x30>
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d003      	beq.n	8004df6 <HAL_RCC_GetSysClockFreq+0x36>
 8004dee:	e027      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004df0:	4b19      	ldr	r3, [pc, #100]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8004df2:	613b      	str	r3, [r7, #16]
      break;
 8004df4:	e027      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	0c9b      	lsrs	r3, r3, #18
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	4a17      	ldr	r2, [pc, #92]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004e00:	5cd3      	ldrb	r3, [r2, r3]
 8004e02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d010      	beq.n	8004e30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e0e:	4b11      	ldr	r3, [pc, #68]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	0c5b      	lsrs	r3, r3, #17
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	4a11      	ldr	r2, [pc, #68]	@ (8004e60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e1a:	5cd3      	ldrb	r3, [r2, r3]
 8004e1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a0d      	ldr	r2, [pc, #52]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e22:	fb03 f202 	mul.w	r2, r3, r2
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	e004      	b.n	8004e3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a0c      	ldr	r2, [pc, #48]	@ (8004e64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e34:	fb02 f303 	mul.w	r3, r2, r3
 8004e38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	613b      	str	r3, [r7, #16]
      break;
 8004e3e:	e002      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e40:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e42:	613b      	str	r3, [r7, #16]
      break;
 8004e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e46:	693b      	ldr	r3, [r7, #16]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	007a1200 	.word	0x007a1200
 8004e5c:	0800bb84 	.word	0x0800bb84
 8004e60:	0800bb94 	.word	0x0800bb94
 8004e64:	003d0900 	.word	0x003d0900

08004e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e6c:	4b02      	ldr	r3, [pc, #8]	@ (8004e78 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr
 8004e78:	20000000 	.word	0x20000000

08004e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e80:	f7ff fff2 	bl	8004e68 <HAL_RCC_GetHCLKFreq>
 8004e84:	4602      	mov	r2, r0
 8004e86:	4b05      	ldr	r3, [pc, #20]	@ (8004e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	0a1b      	lsrs	r3, r3, #8
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	4903      	ldr	r1, [pc, #12]	@ (8004ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e92:	5ccb      	ldrb	r3, [r1, r3]
 8004e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	0800bb7c 	.word	0x0800bb7c

08004ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ea8:	f7ff ffde 	bl	8004e68 <HAL_RCC_GetHCLKFreq>
 8004eac:	4602      	mov	r2, r0
 8004eae:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	0adb      	lsrs	r3, r3, #11
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	4903      	ldr	r1, [pc, #12]	@ (8004ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eba:	5ccb      	ldrb	r3, [r1, r3]
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	0800bb7c 	.word	0x0800bb7c

08004ecc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <RCC_Delay+0x34>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8004f04 <RCC_Delay+0x38>)
 8004eda:	fba2 2303 	umull	r2, r3, r2, r3
 8004ede:	0a5b      	lsrs	r3, r3, #9
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ee8:	bf00      	nop
  }
  while (Delay --);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1e5a      	subs	r2, r3, #1
 8004eee:	60fa      	str	r2, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f9      	bne.n	8004ee8 <RCC_Delay+0x1c>
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr
 8004f00:	20000000 	.word	0x20000000
 8004f04:	10624dd3 	.word	0x10624dd3

08004f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e076      	b.n	8005008 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d108      	bne.n	8004f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f2a:	d009      	beq.n	8004f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	61da      	str	r2, [r3, #28]
 8004f32:	e005      	b.n	8004f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fd ff42 	bl	8002de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc4:	ea42 0103 	orr.w	r1, r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fcc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	0c1a      	lsrs	r2, r3, #16
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f002 0204 	and.w	r2, r2, #4
 8004fe6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	69da      	ldr	r2, [r3, #28]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	4613      	mov	r3, r2
 800501e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_SPI_Transmit+0x22>
 800502e:	2302      	movs	r3, #2
 8005030:	e12d      	b.n	800528e <HAL_SPI_Transmit+0x27e>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800503a:	f7fe fd9b 	bl	8003b74 <HAL_GetTick>
 800503e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d002      	beq.n	8005056 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005050:	2302      	movs	r3, #2
 8005052:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005054:	e116      	b.n	8005284 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <HAL_SPI_Transmit+0x52>
 800505c:	88fb      	ldrh	r3, [r7, #6]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d102      	bne.n	8005068 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005066:	e10d      	b.n	8005284 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2203      	movs	r2, #3
 800506c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	88fa      	ldrh	r2, [r7, #6]
 8005080:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	88fa      	ldrh	r2, [r7, #6]
 8005086:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ae:	d10f      	bne.n	80050d0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050da:	2b40      	cmp	r3, #64	@ 0x40
 80050dc:	d007      	beq.n	80050ee <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050f6:	d14f      	bne.n	8005198 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_SPI_Transmit+0xf6>
 8005100:	8afb      	ldrh	r3, [r7, #22]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d142      	bne.n	800518c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510a:	881a      	ldrh	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005116:	1c9a      	adds	r2, r3, #2
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800512a:	e02f      	b.n	800518c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b02      	cmp	r3, #2
 8005138:	d112      	bne.n	8005160 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513e:	881a      	ldrh	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514a:	1c9a      	adds	r2, r3, #2
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800515e:	e015      	b.n	800518c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005160:	f7fe fd08 	bl	8003b74 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d803      	bhi.n	8005178 <HAL_SPI_Transmit+0x168>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005176:	d102      	bne.n	800517e <HAL_SPI_Transmit+0x16e>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800518a:	e07b      	b.n	8005284 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1ca      	bne.n	800512c <HAL_SPI_Transmit+0x11c>
 8005196:	e050      	b.n	800523a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_SPI_Transmit+0x196>
 80051a0:	8afb      	ldrh	r3, [r7, #22]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d144      	bne.n	8005230 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	330c      	adds	r3, #12
 80051b0:	7812      	ldrb	r2, [r2, #0]
 80051b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051cc:	e030      	b.n	8005230 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d113      	bne.n	8005204 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	330c      	adds	r3, #12
 80051e6:	7812      	ldrb	r2, [r2, #0]
 80051e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005202:	e015      	b.n	8005230 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005204:	f7fe fcb6 	bl	8003b74 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d803      	bhi.n	800521c <HAL_SPI_Transmit+0x20c>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521a:	d102      	bne.n	8005222 <HAL_SPI_Transmit+0x212>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800522e:	e029      	b.n	8005284 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1c9      	bne.n	80051ce <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	6839      	ldr	r1, [r7, #0]
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fbcc 	bl	80059dc <SPI_EndRxTxTransaction>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	613b      	str	r3, [r7, #16]
 800526c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	77fb      	strb	r3, [r7, #31]
 800527a:	e003      	b.n	8005284 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800528c:	7ffb      	ldrb	r3, [r7, #31]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b088      	sub	sp, #32
 800529a:	af02      	add	r7, sp, #8
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d002      	beq.n	80052bc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80052b6:	2302      	movs	r3, #2
 80052b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052ba:	e0fb      	b.n	80054b4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052c4:	d112      	bne.n	80052ec <HAL_SPI_Receive+0x56>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10e      	bne.n	80052ec <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2204      	movs	r2, #4
 80052d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052d6:	88fa      	ldrh	r2, [r7, #6]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	4613      	mov	r3, r2
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f8ef 	bl	80054c6 <HAL_SPI_TransmitReceive>
 80052e8:	4603      	mov	r3, r0
 80052ea:	e0e8      	b.n	80054be <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_SPI_Receive+0x64>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e0e1      	b.n	80054be <HAL_SPI_Receive+0x228>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005302:	f7fe fc37 	bl	8003b74 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_SPI_Receive+0x7e>
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005318:	e0cc      	b.n	80054b4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2204      	movs	r2, #4
 800531e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	88fa      	ldrh	r2, [r7, #6]
 8005332:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	88fa      	ldrh	r2, [r7, #6]
 8005338:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005360:	d10f      	bne.n	8005382 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005370:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005380:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538c:	2b40      	cmp	r3, #64	@ 0x40
 800538e:	d007      	beq.n	80053a0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800539e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d16a      	bne.n	800547e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053a8:	e032      	b.n	8005410 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d115      	bne.n	80053e4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f103 020c 	add.w	r2, r3, #12
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	7812      	ldrb	r2, [r2, #0]
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ce:	1c5a      	adds	r2, r3, #1
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b01      	subs	r3, #1
 80053dc:	b29a      	uxth	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053e2:	e015      	b.n	8005410 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053e4:	f7fe fbc6 	bl	8003b74 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d803      	bhi.n	80053fc <HAL_SPI_Receive+0x166>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d102      	bne.n	8005402 <HAL_SPI_Receive+0x16c>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800540e:	e051      	b.n	80054b4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1c7      	bne.n	80053aa <HAL_SPI_Receive+0x114>
 800541a:	e035      	b.n	8005488 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b01      	cmp	r3, #1
 8005428:	d113      	bne.n	8005452 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005434:	b292      	uxth	r2, r2
 8005436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543c:	1c9a      	adds	r2, r3, #2
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005450:	e015      	b.n	800547e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005452:	f7fe fb8f 	bl	8003b74 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d803      	bhi.n	800546a <HAL_SPI_Receive+0x1d4>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005468:	d102      	bne.n	8005470 <HAL_SPI_Receive+0x1da>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800547c:	e01a      	b.n	80054b4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1c9      	bne.n	800541c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 fa53 	bl	8005938 <SPI_EndRxTransaction>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	75fb      	strb	r3, [r7, #23]
 80054aa:	e003      	b.n	80054b4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b08c      	sub	sp, #48	@ 0x30
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
 80054d2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054d4:	2301      	movs	r3, #1
 80054d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x26>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e198      	b.n	800581e <HAL_SPI_TransmitReceive+0x358>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054f4:	f7fe fb3e 	bl	8003b74 <HAL_GetTick>
 80054f8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005500:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800550a:	887b      	ldrh	r3, [r7, #2]
 800550c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800550e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005512:	2b01      	cmp	r3, #1
 8005514:	d00f      	beq.n	8005536 <HAL_SPI_TransmitReceive+0x70>
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800551c:	d107      	bne.n	800552e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d103      	bne.n	800552e <HAL_SPI_TransmitReceive+0x68>
 8005526:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800552a:	2b04      	cmp	r3, #4
 800552c:	d003      	beq.n	8005536 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800552e:	2302      	movs	r3, #2
 8005530:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005534:	e16d      	b.n	8005812 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x82>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x82>
 8005542:	887b      	ldrh	r3, [r7, #2]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d103      	bne.n	8005550 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800554e:	e160      	b.n	8005812 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b04      	cmp	r3, #4
 800555a:	d003      	beq.n	8005564 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2205      	movs	r2, #5
 8005560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	887a      	ldrh	r2, [r7, #2]
 8005574:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	887a      	ldrh	r2, [r7, #2]
 800557a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	887a      	ldrh	r2, [r7, #2]
 8005586:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	887a      	ldrh	r2, [r7, #2]
 800558c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a4:	2b40      	cmp	r3, #64	@ 0x40
 80055a6:	d007      	beq.n	80055b8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055c0:	d17c      	bne.n	80056bc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <HAL_SPI_TransmitReceive+0x10a>
 80055ca:	8b7b      	ldrh	r3, [r7, #26]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d16a      	bne.n	80056a6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d4:	881a      	ldrh	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e0:	1c9a      	adds	r2, r3, #2
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f4:	e057      	b.n	80056a6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b02      	cmp	r3, #2
 8005602:	d11b      	bne.n	800563c <HAL_SPI_TransmitReceive+0x176>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d016      	beq.n	800563c <HAL_SPI_TransmitReceive+0x176>
 800560e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d113      	bne.n	800563c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005618:	881a      	ldrh	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005624:	1c9a      	adds	r2, r3, #2
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d119      	bne.n	800567e <HAL_SPI_TransmitReceive+0x1b8>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d014      	beq.n	800567e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565e:	b292      	uxth	r2, r2
 8005660:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005666:	1c9a      	adds	r2, r3, #2
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800567a:	2301      	movs	r3, #1
 800567c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800567e:	f7fe fa79 	bl	8003b74 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800568a:	429a      	cmp	r2, r3
 800568c:	d80b      	bhi.n	80056a6 <HAL_SPI_TransmitReceive+0x1e0>
 800568e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d007      	beq.n	80056a6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80056a4:	e0b5      	b.n	8005812 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1a2      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x130>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d19d      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x130>
 80056ba:	e080      	b.n	80057be <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <HAL_SPI_TransmitReceive+0x204>
 80056c4:	8b7b      	ldrh	r3, [r7, #26]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d16f      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	330c      	adds	r3, #12
 80056d4:	7812      	ldrb	r2, [r2, #0]
 80056d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056f0:	e05b      	b.n	80057aa <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d11c      	bne.n	800573a <HAL_SPI_TransmitReceive+0x274>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d017      	beq.n	800573a <HAL_SPI_TransmitReceive+0x274>
 800570a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d114      	bne.n	800573a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	7812      	ldrb	r2, [r2, #0]
 800571c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b01      	cmp	r3, #1
 8005746:	d119      	bne.n	800577c <HAL_SPI_TransmitReceive+0x2b6>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d014      	beq.n	800577c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005778:	2301      	movs	r3, #1
 800577a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800577c:	f7fe f9fa 	bl	8003b74 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005788:	429a      	cmp	r2, r3
 800578a:	d803      	bhi.n	8005794 <HAL_SPI_TransmitReceive+0x2ce>
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d102      	bne.n	800579a <HAL_SPI_TransmitReceive+0x2d4>
 8005794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005796:	2b00      	cmp	r3, #0
 8005798:	d107      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80057a8:	e033      	b.n	8005812 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d19e      	bne.n	80056f2 <HAL_SPI_TransmitReceive+0x22c>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d199      	bne.n	80056f2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f90a 	bl	80059dc <SPI_EndRxTxTransaction>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d006      	beq.n	80057dc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2220      	movs	r2, #32
 80057d8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80057da:	e01a      	b.n	8005812 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005808:	e003      	b.n	8005812 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800581a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800581e:	4618      	mov	r0, r3
 8005820:	3730      	adds	r7, #48	@ 0x30
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	4613      	mov	r3, r2
 8005836:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005838:	f7fe f99c 	bl	8003b74 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	4413      	add	r3, r2
 8005846:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005848:	f7fe f994 	bl	8003b74 <HAL_GetTick>
 800584c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800584e:	4b39      	ldr	r3, [pc, #228]	@ (8005934 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	015b      	lsls	r3, r3, #5
 8005854:	0d1b      	lsrs	r3, r3, #20
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	fb02 f303 	mul.w	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800585e:	e054      	b.n	800590a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d050      	beq.n	800590a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005868:	f7fe f984 	bl	8003b74 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	429a      	cmp	r2, r3
 8005876:	d902      	bls.n	800587e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d13d      	bne.n	80058fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800588c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005896:	d111      	bne.n	80058bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058a0:	d004      	beq.n	80058ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058aa:	d107      	bne.n	80058bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058c4:	d10f      	bne.n	80058e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e017      	b.n	800592a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	3b01      	subs	r3, #1
 8005908:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4013      	ands	r3, r2
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	429a      	cmp	r2, r3
 8005918:	bf0c      	ite	eq
 800591a:	2301      	moveq	r3, #1
 800591c:	2300      	movne	r3, #0
 800591e:	b2db      	uxtb	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	429a      	cmp	r2, r3
 8005926:	d19b      	bne.n	8005860 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000000 	.word	0x20000000

08005938 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800594c:	d111      	bne.n	8005972 <SPI_EndRxTransaction+0x3a>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005956:	d004      	beq.n	8005962 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005960:	d107      	bne.n	8005972 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005970:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800597a:	d117      	bne.n	80059ac <SPI_EndRxTransaction+0x74>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005984:	d112      	bne.n	80059ac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2200      	movs	r2, #0
 800598e:	2101      	movs	r1, #1
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff ff49 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01a      	beq.n	80059d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a0:	f043 0220 	orr.w	r2, r3, #32
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e013      	b.n	80059d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	2180      	movs	r1, #128	@ 0x80
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff ff36 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c6:	f043 0220 	orr.w	r2, r3, #32
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e000      	b.n	80059d4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2200      	movs	r2, #0
 80059f0:	2180      	movs	r1, #128	@ 0x80
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f7ff ff18 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a02:	f043 0220 	orr.w	r2, r3, #32
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e000      	b.n	8005a10 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e041      	b.n	8005aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fd fbaa 	bl	8003198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4619      	mov	r1, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	f000 f940 	bl	8005cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d001      	beq.n	8005ad0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e032      	b.n	8005b36 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a18      	ldr	r2, [pc, #96]	@ (8005b40 <HAL_TIM_Base_Start+0x88>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00e      	beq.n	8005b00 <HAL_TIM_Base_Start+0x48>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aea:	d009      	beq.n	8005b00 <HAL_TIM_Base_Start+0x48>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a14      	ldr	r2, [pc, #80]	@ (8005b44 <HAL_TIM_Base_Start+0x8c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d004      	beq.n	8005b00 <HAL_TIM_Base_Start+0x48>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a13      	ldr	r2, [pc, #76]	@ (8005b48 <HAL_TIM_Base_Start+0x90>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d111      	bne.n	8005b24 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2b06      	cmp	r3, #6
 8005b10:	d010      	beq.n	8005b34 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f042 0201 	orr.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b22:	e007      	b.n	8005b34 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr
 8005b40:	40012c00 	.word	0x40012c00
 8005b44:	40000400 	.word	0x40000400
 8005b48:	40000800 	.word	0x40000800

08005b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_TIM_ConfigClockSource+0x1c>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e0b4      	b.n	8005cd2 <HAL_TIM_ConfigClockSource+0x186>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ba0:	d03e      	beq.n	8005c20 <HAL_TIM_ConfigClockSource+0xd4>
 8005ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ba6:	f200 8087 	bhi.w	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bae:	f000 8086 	beq.w	8005cbe <HAL_TIM_ConfigClockSource+0x172>
 8005bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb6:	d87f      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb8:	2b70      	cmp	r3, #112	@ 0x70
 8005bba:	d01a      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0xa6>
 8005bbc:	2b70      	cmp	r3, #112	@ 0x70
 8005bbe:	d87b      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc0:	2b60      	cmp	r3, #96	@ 0x60
 8005bc2:	d050      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x11a>
 8005bc4:	2b60      	cmp	r3, #96	@ 0x60
 8005bc6:	d877      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc8:	2b50      	cmp	r3, #80	@ 0x50
 8005bca:	d03c      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0xfa>
 8005bcc:	2b50      	cmp	r3, #80	@ 0x50
 8005bce:	d873      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd0:	2b40      	cmp	r3, #64	@ 0x40
 8005bd2:	d058      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x13a>
 8005bd4:	2b40      	cmp	r3, #64	@ 0x40
 8005bd6:	d86f      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd8:	2b30      	cmp	r3, #48	@ 0x30
 8005bda:	d064      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8005bdc:	2b30      	cmp	r3, #48	@ 0x30
 8005bde:	d86b      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d060      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d867      	bhi.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d05c      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d05a      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8005bf0:	e062      	b.n	8005cb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c02:	f000 f944 	bl	8005e8e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005c14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	609a      	str	r2, [r3, #8]
      break;
 8005c1e:	e04f      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c30:	f000 f92d 	bl	8005e8e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c42:	609a      	str	r2, [r3, #8]
      break;
 8005c44:	e03c      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c52:	461a      	mov	r2, r3
 8005c54:	f000 f8a4 	bl	8005da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2150      	movs	r1, #80	@ 0x50
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 f8fb 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 8005c64:	e02c      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c72:	461a      	mov	r2, r3
 8005c74:	f000 f8c2 	bl	8005dfc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2160      	movs	r1, #96	@ 0x60
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 f8eb 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 8005c84:	e01c      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c92:	461a      	mov	r2, r3
 8005c94:	f000 f884 	bl	8005da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2140      	movs	r1, #64	@ 0x40
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 f8db 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 8005ca4:	e00c      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f000 f8d2 	bl	8005e5a <TIM_ITRx_SetConfig>
      break;
 8005cb6:	e003      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	73fb      	strb	r3, [r7, #15]
      break;
 8005cbc:	e000      	b.n	8005cc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a29      	ldr	r2, [pc, #164]	@ (8005d94 <TIM_Base_SetConfig+0xb8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <TIM_Base_SetConfig+0x30>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cfa:	d007      	beq.n	8005d0c <TIM_Base_SetConfig+0x30>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a26      	ldr	r2, [pc, #152]	@ (8005d98 <TIM_Base_SetConfig+0xbc>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_Base_SetConfig+0x30>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a25      	ldr	r2, [pc, #148]	@ (8005d9c <TIM_Base_SetConfig+0xc0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d108      	bne.n	8005d1e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a1c      	ldr	r2, [pc, #112]	@ (8005d94 <TIM_Base_SetConfig+0xb8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00b      	beq.n	8005d3e <TIM_Base_SetConfig+0x62>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d2c:	d007      	beq.n	8005d3e <TIM_Base_SetConfig+0x62>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a19      	ldr	r2, [pc, #100]	@ (8005d98 <TIM_Base_SetConfig+0xbc>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d003      	beq.n	8005d3e <TIM_Base_SetConfig+0x62>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a18      	ldr	r2, [pc, #96]	@ (8005d9c <TIM_Base_SetConfig+0xc0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d108      	bne.n	8005d50 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a07      	ldr	r2, [pc, #28]	@ (8005d94 <TIM_Base_SetConfig+0xb8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d103      	bne.n	8005d84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	615a      	str	r2, [r3, #20]
}
 8005d8a:	bf00      	nop
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr
 8005d94:	40012c00 	.word	0x40012c00
 8005d98:	40000400 	.word	0x40000400
 8005d9c:	40000800 	.word	0x40000800

08005da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f023 0201 	bic.w	r2, r3, #1
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f023 030a 	bic.w	r3, r3, #10
 8005ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr

08005dfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0210 	bic.w	r2, r3, #16
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	031b      	lsls	r3, r3, #12
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	621a      	str	r2, [r3, #32]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr

08005e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f043 0307 	orr.w	r3, r3, #7
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	609a      	str	r2, [r3, #8]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bc80      	pop	{r7}
 8005e8c:	4770      	bx	lr

08005e8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b087      	sub	sp, #28
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	021a      	lsls	r2, r3, #8
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	609a      	str	r2, [r3, #8]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr

08005ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d101      	bne.n	8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e046      	b.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a16      	ldr	r2, [pc, #88]	@ (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00e      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f30:	d009      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a12      	ldr	r2, [pc, #72]	@ (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d004      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a10      	ldr	r2, [pc, #64]	@ (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d10c      	bne.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	40000400 	.word	0x40000400
 8005f84:	40000800 	.word	0x40000800

08005f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e042      	b.n	8006020 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d106      	bne.n	8005fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fd f964 	bl	800327c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2224      	movs	r2, #36	@ 0x24
 8005fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fdc5 	bl	8006b5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	695a      	ldr	r2, [r3, #20]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08a      	sub	sp, #40	@ 0x28
 800602c:	af02      	add	r7, sp, #8
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	603b      	str	r3, [r7, #0]
 8006034:	4613      	mov	r3, r2
 8006036:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b20      	cmp	r3, #32
 8006046:	d16d      	bne.n	8006124 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d002      	beq.n	8006054 <HAL_UART_Transmit+0x2c>
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e066      	b.n	8006126 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2221      	movs	r2, #33	@ 0x21
 8006062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006066:	f7fd fd85 	bl	8003b74 <HAL_GetTick>
 800606a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	88fa      	ldrh	r2, [r7, #6]
 8006070:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	88fa      	ldrh	r2, [r7, #6]
 8006076:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006080:	d108      	bne.n	8006094 <HAL_UART_Transmit+0x6c>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d104      	bne.n	8006094 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	e003      	b.n	800609c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006098:	2300      	movs	r3, #0
 800609a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800609c:	e02a      	b.n	80060f4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2200      	movs	r2, #0
 80060a6:	2180      	movs	r1, #128	@ 0x80
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 fb14 	bl	80066d6 <UART_WaitOnFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e036      	b.n	8006126 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	3302      	adds	r3, #2
 80060d2:	61bb      	str	r3, [r7, #24]
 80060d4:	e007      	b.n	80060e6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	781a      	ldrb	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	3301      	adds	r3, #1
 80060e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1cf      	bne.n	800609e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2200      	movs	r2, #0
 8006106:	2140      	movs	r1, #64	@ 0x40
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 fae4 	bl	80066d6 <UART_WaitOnFlagUntilTimeout>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e006      	b.n	8006126 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006120:	2300      	movs	r3, #0
 8006122:	e000      	b.n	8006126 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006124:	2302      	movs	r3, #2
  }
}
 8006126:	4618      	mov	r0, r3
 8006128:	3720      	adds	r7, #32
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	4613      	mov	r3, r2
 800613a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b20      	cmp	r3, #32
 8006146:	d112      	bne.n	800616e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_UART_Receive_IT+0x26>
 800614e:	88fb      	ldrh	r3, [r7, #6]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e00b      	b.n	8006170 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	461a      	mov	r2, r3
 8006162:	68b9      	ldr	r1, [r7, #8]
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 fb24 	bl	80067b2 <UART_Start_Receive_IT>
 800616a:	4603      	mov	r3, r0
 800616c:	e000      	b.n	8006170 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800616e:	2302      	movs	r3, #2
  }
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b0ba      	sub	sp, #232	@ 0xe8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800619e:	2300      	movs	r3, #0
 80061a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ae:	f003 030f 	and.w	r3, r3, #15
 80061b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80061b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10f      	bne.n	80061de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d009      	beq.n	80061de <HAL_UART_IRQHandler+0x66>
 80061ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fc01 	bl	80069de <UART_Receive_IT>
      return;
 80061dc:	e25b      	b.n	8006696 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80061de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 80de 	beq.w	80063a4 <HAL_UART_IRQHandler+0x22c>
 80061e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d106      	bne.n	8006202 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 80d1 	beq.w	80063a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00b      	beq.n	8006226 <HAL_UART_IRQHandler+0xae>
 800620e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006216:	2b00      	cmp	r3, #0
 8006218:	d005      	beq.n	8006226 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800621e:	f043 0201 	orr.w	r2, r3, #1
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00b      	beq.n	800624a <HAL_UART_IRQHandler+0xd2>
 8006232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006242:	f043 0202 	orr.w	r2, r3, #2
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800624a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <HAL_UART_IRQHandler+0xf6>
 8006256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d005      	beq.n	800626e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006266:	f043 0204 	orr.w	r2, r3, #4
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800626e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d011      	beq.n	800629e <HAL_UART_IRQHandler+0x126>
 800627a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d105      	bne.n	8006292 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d005      	beq.n	800629e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006296:	f043 0208 	orr.w	r2, r3, #8
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 81f2 	beq.w	800668c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_UART_IRQHandler+0x14e>
 80062b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fb8c 	bl	80069de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	bf14      	ite	ne
 80062d4:	2301      	movne	r3, #1
 80062d6:	2300      	moveq	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e2:	f003 0308 	and.w	r3, r3, #8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <HAL_UART_IRQHandler+0x17a>
 80062ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d04f      	beq.n	8006392 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fa96 	bl	8006824 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	d041      	beq.n	800638a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3314      	adds	r3, #20
 800630c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800631c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006324:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3314      	adds	r3, #20
 800632e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006332:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006336:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800633e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800634a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1d9      	bne.n	8006306 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d013      	beq.n	8006382 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800635e:	4a7e      	ldr	r2, [pc, #504]	@ (8006558 <HAL_UART_IRQHandler+0x3e0>)
 8006360:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006366:	4618      	mov	r0, r3
 8006368:	f7fd fd7a 	bl	8003e60 <HAL_DMA_Abort_IT>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d016      	beq.n	80063a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800637c:	4610      	mov	r0, r2
 800637e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	e00e      	b.n	80063a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f993 	bl	80066ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006388:	e00a      	b.n	80063a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f98f 	bl	80066ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006390:	e006      	b.n	80063a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f98b 	bl	80066ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800639e:	e175      	b.n	800668c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a0:	bf00      	nop
    return;
 80063a2:	e173      	b.n	800668c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	f040 814f 	bne.w	800664c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 8148 	beq.w	800664c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 8141 	beq.w	800664c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063ca:	2300      	movs	r3, #0
 80063cc:	60bb      	str	r3, [r7, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60bb      	str	r3, [r7, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	60bb      	str	r3, [r7, #8]
 80063de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 80b6 	beq.w	800655c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8145 	beq.w	8006690 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800640a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800640e:	429a      	cmp	r2, r3
 8006410:	f080 813e 	bcs.w	8006690 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800641a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	2b20      	cmp	r3, #32
 8006424:	f000 8088 	beq.w	8006538 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	330c      	adds	r3, #12
 800642e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800643e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006442:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006446:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	330c      	adds	r3, #12
 8006450:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006454:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006458:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006460:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800646c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1d9      	bne.n	8006428 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3314      	adds	r3, #20
 800647a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006484:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006486:	f023 0301 	bic.w	r3, r3, #1
 800648a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3314      	adds	r3, #20
 8006494:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006498:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800649c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80064a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80064a4:	e841 2300 	strex	r3, r2, [r1]
 80064a8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80064aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e1      	bne.n	8006474 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3314      	adds	r3, #20
 80064b6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80064c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3314      	adds	r3, #20
 80064d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80064d4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80064d6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80064da:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80064e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e3      	bne.n	80064b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	330c      	adds	r3, #12
 80064fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006508:	f023 0310 	bic.w	r3, r3, #16
 800650c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800651a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800651c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006520:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e3      	bne.n	80064f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006532:	4618      	mov	r0, r3
 8006534:	f7fd fc59 	bl	8003dea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006546:	b29b      	uxth	r3, r3
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	b29b      	uxth	r3, r3
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f8b6 	bl	80066c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006554:	e09c      	b.n	8006690 <HAL_UART_IRQHandler+0x518>
 8006556:	bf00      	nop
 8006558:	080068e9 	.word	0x080068e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006564:	b29b      	uxth	r3, r3
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 808e 	beq.w	8006694 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 8089 	beq.w	8006694 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	330c      	adds	r3, #12
 8006588:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006598:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80065a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80065a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065ae:	e841 2300 	strex	r3, r2, [r1]
 80065b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1e3      	bne.n	8006582 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3314      	adds	r3, #20
 80065c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	623b      	str	r3, [r7, #32]
   return(result);
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	f023 0301 	bic.w	r3, r3, #1
 80065d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3314      	adds	r3, #20
 80065da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80065de:	633a      	str	r2, [r7, #48]	@ 0x30
 80065e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e3      	bne.n	80065ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	330c      	adds	r3, #12
 8006606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	e853 3f00 	ldrex	r3, [r3]
 800660e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0310 	bic.w	r3, r3, #16
 8006616:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	330c      	adds	r3, #12
 8006620:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006624:	61fa      	str	r2, [r7, #28]
 8006626:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	69b9      	ldr	r1, [r7, #24]
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	617b      	str	r3, [r7, #20]
   return(result);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e3      	bne.n	8006600 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800663e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f83b 	bl	80066c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800664a:	e023      	b.n	8006694 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800664c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006654:	2b00      	cmp	r3, #0
 8006656:	d009      	beq.n	800666c <HAL_UART_IRQHandler+0x4f4>
 8006658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800665c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f953 	bl	8006910 <UART_Transmit_IT>
    return;
 800666a:	e014      	b.n	8006696 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800666c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00e      	beq.n	8006696 <HAL_UART_IRQHandler+0x51e>
 8006678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800667c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f992 	bl	80069ae <UART_EndTransmit_IT>
    return;
 800668a:	e004      	b.n	8006696 <HAL_UART_IRQHandler+0x51e>
    return;
 800668c:	bf00      	nop
 800668e:	e002      	b.n	8006696 <HAL_UART_IRQHandler+0x51e>
      return;
 8006690:	bf00      	nop
 8006692:	e000      	b.n	8006696 <HAL_UART_IRQHandler+0x51e>
      return;
 8006694:	bf00      	nop
  }
}
 8006696:	37e8      	adds	r7, #232	@ 0xe8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bc80      	pop	{r7}
 80066ac:	4770      	bx	lr

080066ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr

080066c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr

080066d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b090      	sub	sp, #64	@ 0x40
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	4613      	mov	r3, r2
 80066e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e6:	e050      	b.n	800678a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ee:	d04c      	beq.n	800678a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d007      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0x30>
 80066f6:	f7fd fa3d 	bl	8003b74 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006702:	429a      	cmp	r2, r3
 8006704:	d241      	bcs.n	800678a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	330c      	adds	r3, #12
 800670c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800671c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	330c      	adds	r3, #12
 8006724:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006726:	637a      	str	r2, [r7, #52]	@ 0x34
 8006728:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800672c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e5      	bne.n	8006706 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3314      	adds	r3, #20
 8006740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	613b      	str	r3, [r7, #16]
   return(result);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f023 0301 	bic.w	r3, r3, #1
 8006750:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3314      	adds	r3, #20
 8006758:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800675a:	623a      	str	r2, [r7, #32]
 800675c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	69f9      	ldr	r1, [r7, #28]
 8006760:	6a3a      	ldr	r2, [r7, #32]
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	61bb      	str	r3, [r7, #24]
   return(result);
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e5      	bne.n	800673a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e00f      	b.n	80067aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4013      	ands	r3, r2
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	429a      	cmp	r2, r3
 8006798:	bf0c      	ite	eq
 800679a:	2301      	moveq	r3, #1
 800679c:	2300      	movne	r3, #0
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	461a      	mov	r2, r3
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d09f      	beq.n	80066e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3740      	adds	r7, #64	@ 0x40
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	4613      	mov	r3, r2
 80067be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	88fa      	ldrh	r2, [r7, #6]
 80067ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	88fa      	ldrh	r2, [r7, #6]
 80067d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2222      	movs	r2, #34	@ 0x22
 80067dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695a      	ldr	r2, [r3, #20]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0201 	orr.w	r2, r2, #1
 8006806:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0220 	orr.w	r2, r2, #32
 8006816:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006824:	b480      	push	{r7}
 8006826:	b095      	sub	sp, #84	@ 0x54
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	330c      	adds	r3, #12
 8006832:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800683c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	330c      	adds	r3, #12
 800684a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800684c:	643a      	str	r2, [r7, #64]	@ 0x40
 800684e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006852:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800685a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e5      	bne.n	800682c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3314      	adds	r3, #20
 8006866:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	e853 3f00 	ldrex	r3, [r3]
 800686e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f023 0301 	bic.w	r3, r3, #1
 8006876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3314      	adds	r3, #20
 800687e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006880:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006882:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006888:	e841 2300 	strex	r3, r2, [r1]
 800688c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1e5      	bne.n	8006860 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006898:	2b01      	cmp	r3, #1
 800689a:	d119      	bne.n	80068d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	330c      	adds	r3, #12
 80068a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f023 0310 	bic.w	r3, r3, #16
 80068b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	330c      	adds	r3, #12
 80068ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068bc:	61ba      	str	r2, [r7, #24]
 80068be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	6979      	ldr	r1, [r7, #20]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	e841 2300 	strex	r3, r2, [r1]
 80068c8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1e5      	bne.n	800689c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80068de:	bf00      	nop
 80068e0:	3754      	adds	r7, #84	@ 0x54
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr

080068e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff fed3 	bl	80066ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006908:	bf00      	nop
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b21      	cmp	r3, #33	@ 0x21
 8006922:	d13e      	bne.n	80069a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800692c:	d114      	bne.n	8006958 <UART_Transmit_IT+0x48>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d110      	bne.n	8006958 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800694a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	1c9a      	adds	r2, r3, #2
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	621a      	str	r2, [r3, #32]
 8006956:	e008      	b.n	800696a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	1c59      	adds	r1, r3, #1
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6211      	str	r1, [r2, #32]
 8006962:	781a      	ldrb	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29b      	uxth	r3, r3
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	4619      	mov	r1, r3
 8006978:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10f      	bne.n	800699e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800698c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800699c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	e000      	b.n	80069a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069a2:	2302      	movs	r3, #2
  }
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bc80      	pop	{r7}
 80069ac:	4770      	bx	lr

080069ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff fe64 	bl	800669c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b08c      	sub	sp, #48	@ 0x30
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b22      	cmp	r3, #34	@ 0x22
 80069f0:	f040 80ae 	bne.w	8006b50 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069fc:	d117      	bne.n	8006a2e <UART_Receive_IT+0x50>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d113      	bne.n	8006a2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a26:	1c9a      	adds	r2, r3, #2
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a2c:	e026      	b.n	8006a7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006a34:	2300      	movs	r3, #0
 8006a36:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a40:	d007      	beq.n	8006a52 <UART_Receive_IT+0x74>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10a      	bne.n	8006a60 <UART_Receive_IT+0x82>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	e008      	b.n	8006a72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d15d      	bne.n	8006b4c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0220 	bic.w	r2, r2, #32
 8006a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	695a      	ldr	r2, [r3, #20]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0201 	bic.w	r2, r2, #1
 8006abe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d135      	bne.n	8006b42 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	613b      	str	r3, [r7, #16]
   return(result);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f023 0310 	bic.w	r3, r3, #16
 8006af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006afc:	623a      	str	r2, [r7, #32]
 8006afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	69f9      	ldr	r1, [r7, #28]
 8006b02:	6a3a      	ldr	r2, [r7, #32]
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e5      	bne.n	8006adc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	2b10      	cmp	r3, #16
 8006b1c:	d10a      	bne.n	8006b34 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff fdc0 	bl	80066c0 <HAL_UARTEx_RxEventCallback>
 8006b40:	e002      	b.n	8006b48 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fc f860 	bl	8002c08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e002      	b.n	8006b52 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e000      	b.n	8006b52 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006b50:	2302      	movs	r3, #2
  }
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3730      	adds	r7, #48	@ 0x30
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	431a      	orrs	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006b96:	f023 030c 	bic.w	r3, r3, #12
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	68b9      	ldr	r1, [r7, #8]
 8006ba0:	430b      	orrs	r3, r1
 8006ba2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8006c70 <UART_SetConfig+0x114>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d103      	bne.n	8006bcc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006bc4:	f7fe f96e 	bl	8004ea4 <HAL_RCC_GetPCLK2Freq>
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	e002      	b.n	8006bd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006bcc:	f7fe f956 	bl	8004e7c <HAL_RCC_GetPCLK1Freq>
 8006bd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	009a      	lsls	r2, r3, #2
 8006bdc:	441a      	add	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be8:	4a22      	ldr	r2, [pc, #136]	@ (8006c74 <UART_SetConfig+0x118>)
 8006bea:	fba2 2303 	umull	r2, r3, r2, r3
 8006bee:	095b      	lsrs	r3, r3, #5
 8006bf0:	0119      	lsls	r1, r3, #4
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	009a      	lsls	r2, r3, #2
 8006bfc:	441a      	add	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c08:	4b1a      	ldr	r3, [pc, #104]	@ (8006c74 <UART_SetConfig+0x118>)
 8006c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	2064      	movs	r0, #100	@ 0x64
 8006c12:	fb00 f303 	mul.w	r3, r0, r3
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	011b      	lsls	r3, r3, #4
 8006c1a:	3332      	adds	r3, #50	@ 0x32
 8006c1c:	4a15      	ldr	r2, [pc, #84]	@ (8006c74 <UART_SetConfig+0x118>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c28:	4419      	add	r1, r3
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	009a      	lsls	r2, r3, #2
 8006c34:	441a      	add	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c40:	4b0c      	ldr	r3, [pc, #48]	@ (8006c74 <UART_SetConfig+0x118>)
 8006c42:	fba3 0302 	umull	r0, r3, r3, r2
 8006c46:	095b      	lsrs	r3, r3, #5
 8006c48:	2064      	movs	r0, #100	@ 0x64
 8006c4a:	fb00 f303 	mul.w	r3, r0, r3
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	3332      	adds	r3, #50	@ 0x32
 8006c54:	4a07      	ldr	r2, [pc, #28]	@ (8006c74 <UART_SetConfig+0x118>)
 8006c56:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5a:	095b      	lsrs	r3, r3, #5
 8006c5c:	f003 020f 	and.w	r2, r3, #15
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	440a      	add	r2, r1
 8006c66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c68:	bf00      	nop
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	40013800 	.word	0x40013800
 8006c74:	51eb851f 	.word	0x51eb851f

08006c78 <__cvt>:
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c7e:	461d      	mov	r5, r3
 8006c80:	bfbb      	ittet	lt
 8006c82:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006c86:	461d      	movlt	r5, r3
 8006c88:	2300      	movge	r3, #0
 8006c8a:	232d      	movlt	r3, #45	@ 0x2d
 8006c8c:	b088      	sub	sp, #32
 8006c8e:	4614      	mov	r4, r2
 8006c90:	bfb8      	it	lt
 8006c92:	4614      	movlt	r4, r2
 8006c94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c96:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006c98:	7013      	strb	r3, [r2, #0]
 8006c9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c9c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006ca0:	f023 0820 	bic.w	r8, r3, #32
 8006ca4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ca8:	d005      	beq.n	8006cb6 <__cvt+0x3e>
 8006caa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006cae:	d100      	bne.n	8006cb2 <__cvt+0x3a>
 8006cb0:	3601      	adds	r6, #1
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e000      	b.n	8006cb8 <__cvt+0x40>
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	aa07      	add	r2, sp, #28
 8006cba:	9204      	str	r2, [sp, #16]
 8006cbc:	aa06      	add	r2, sp, #24
 8006cbe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006cc2:	e9cd 3600 	strd	r3, r6, [sp]
 8006cc6:	4622      	mov	r2, r4
 8006cc8:	462b      	mov	r3, r5
 8006cca:	f001 f8a1 	bl	8007e10 <_dtoa_r>
 8006cce:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006cd2:	4607      	mov	r7, r0
 8006cd4:	d119      	bne.n	8006d0a <__cvt+0x92>
 8006cd6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006cd8:	07db      	lsls	r3, r3, #31
 8006cda:	d50e      	bpl.n	8006cfa <__cvt+0x82>
 8006cdc:	eb00 0906 	add.w	r9, r0, r6
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	f7f9 fe5e 	bl	80009a8 <__aeabi_dcmpeq>
 8006cec:	b108      	cbz	r0, 8006cf2 <__cvt+0x7a>
 8006cee:	f8cd 901c 	str.w	r9, [sp, #28]
 8006cf2:	2230      	movs	r2, #48	@ 0x30
 8006cf4:	9b07      	ldr	r3, [sp, #28]
 8006cf6:	454b      	cmp	r3, r9
 8006cf8:	d31e      	bcc.n	8006d38 <__cvt+0xc0>
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	9b07      	ldr	r3, [sp, #28]
 8006cfe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006d00:	1bdb      	subs	r3, r3, r7
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	b008      	add	sp, #32
 8006d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006d0e:	eb00 0906 	add.w	r9, r0, r6
 8006d12:	d1e5      	bne.n	8006ce0 <__cvt+0x68>
 8006d14:	7803      	ldrb	r3, [r0, #0]
 8006d16:	2b30      	cmp	r3, #48	@ 0x30
 8006d18:	d10a      	bne.n	8006d30 <__cvt+0xb8>
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4620      	mov	r0, r4
 8006d20:	4629      	mov	r1, r5
 8006d22:	f7f9 fe41 	bl	80009a8 <__aeabi_dcmpeq>
 8006d26:	b918      	cbnz	r0, 8006d30 <__cvt+0xb8>
 8006d28:	f1c6 0601 	rsb	r6, r6, #1
 8006d2c:	f8ca 6000 	str.w	r6, [sl]
 8006d30:	f8da 3000 	ldr.w	r3, [sl]
 8006d34:	4499      	add	r9, r3
 8006d36:	e7d3      	b.n	8006ce0 <__cvt+0x68>
 8006d38:	1c59      	adds	r1, r3, #1
 8006d3a:	9107      	str	r1, [sp, #28]
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	e7d9      	b.n	8006cf4 <__cvt+0x7c>

08006d40 <__exponent>:
 8006d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d42:	2900      	cmp	r1, #0
 8006d44:	bfb6      	itet	lt
 8006d46:	232d      	movlt	r3, #45	@ 0x2d
 8006d48:	232b      	movge	r3, #43	@ 0x2b
 8006d4a:	4249      	neglt	r1, r1
 8006d4c:	2909      	cmp	r1, #9
 8006d4e:	7002      	strb	r2, [r0, #0]
 8006d50:	7043      	strb	r3, [r0, #1]
 8006d52:	dd29      	ble.n	8006da8 <__exponent+0x68>
 8006d54:	f10d 0307 	add.w	r3, sp, #7
 8006d58:	461d      	mov	r5, r3
 8006d5a:	270a      	movs	r7, #10
 8006d5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006d60:	461a      	mov	r2, r3
 8006d62:	fb07 1416 	mls	r4, r7, r6, r1
 8006d66:	3430      	adds	r4, #48	@ 0x30
 8006d68:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	2c63      	cmp	r4, #99	@ 0x63
 8006d70:	4631      	mov	r1, r6
 8006d72:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d76:	dcf1      	bgt.n	8006d5c <__exponent+0x1c>
 8006d78:	3130      	adds	r1, #48	@ 0x30
 8006d7a:	1e94      	subs	r4, r2, #2
 8006d7c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d80:	4623      	mov	r3, r4
 8006d82:	1c41      	adds	r1, r0, #1
 8006d84:	42ab      	cmp	r3, r5
 8006d86:	d30a      	bcc.n	8006d9e <__exponent+0x5e>
 8006d88:	f10d 0309 	add.w	r3, sp, #9
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	42ac      	cmp	r4, r5
 8006d90:	bf88      	it	hi
 8006d92:	2300      	movhi	r3, #0
 8006d94:	3302      	adds	r3, #2
 8006d96:	4403      	add	r3, r0
 8006d98:	1a18      	subs	r0, r3, r0
 8006d9a:	b003      	add	sp, #12
 8006d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d9e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006da2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006da6:	e7ed      	b.n	8006d84 <__exponent+0x44>
 8006da8:	2330      	movs	r3, #48	@ 0x30
 8006daa:	3130      	adds	r1, #48	@ 0x30
 8006dac:	7083      	strb	r3, [r0, #2]
 8006dae:	70c1      	strb	r1, [r0, #3]
 8006db0:	1d03      	adds	r3, r0, #4
 8006db2:	e7f1      	b.n	8006d98 <__exponent+0x58>

08006db4 <_printf_float>:
 8006db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db8:	b091      	sub	sp, #68	@ 0x44
 8006dba:	460c      	mov	r4, r1
 8006dbc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006dc0:	4616      	mov	r6, r2
 8006dc2:	461f      	mov	r7, r3
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	f000 ff03 	bl	8007bd0 <_localeconv_r>
 8006dca:	6803      	ldr	r3, [r0, #0]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	9308      	str	r3, [sp, #32]
 8006dd0:	f7f9 f9be 	bl	8000150 <strlen>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	930e      	str	r3, [sp, #56]	@ 0x38
 8006dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8006ddc:	9009      	str	r0, [sp, #36]	@ 0x24
 8006dde:	3307      	adds	r3, #7
 8006de0:	f023 0307 	bic.w	r3, r3, #7
 8006de4:	f103 0208 	add.w	r2, r3, #8
 8006de8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006dec:	f8d4 b000 	ldr.w	fp, [r4]
 8006df0:	f8c8 2000 	str.w	r2, [r8]
 8006df4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006df8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006dfc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006dfe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006e02:	f04f 32ff 	mov.w	r2, #4294967295
 8006e06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006e0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006e0e:	4b9c      	ldr	r3, [pc, #624]	@ (8007080 <_printf_float+0x2cc>)
 8006e10:	f7f9 fdfc 	bl	8000a0c <__aeabi_dcmpun>
 8006e14:	bb70      	cbnz	r0, 8006e74 <_printf_float+0xc0>
 8006e16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e1e:	4b98      	ldr	r3, [pc, #608]	@ (8007080 <_printf_float+0x2cc>)
 8006e20:	f7f9 fdd6 	bl	80009d0 <__aeabi_dcmple>
 8006e24:	bb30      	cbnz	r0, 8006e74 <_printf_float+0xc0>
 8006e26:	2200      	movs	r2, #0
 8006e28:	2300      	movs	r3, #0
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	4649      	mov	r1, r9
 8006e2e:	f7f9 fdc5 	bl	80009bc <__aeabi_dcmplt>
 8006e32:	b110      	cbz	r0, 8006e3a <_printf_float+0x86>
 8006e34:	232d      	movs	r3, #45	@ 0x2d
 8006e36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e3a:	4a92      	ldr	r2, [pc, #584]	@ (8007084 <_printf_float+0x2d0>)
 8006e3c:	4b92      	ldr	r3, [pc, #584]	@ (8007088 <_printf_float+0x2d4>)
 8006e3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006e42:	bf94      	ite	ls
 8006e44:	4690      	movls	r8, r2
 8006e46:	4698      	movhi	r8, r3
 8006e48:	2303      	movs	r3, #3
 8006e4a:	f04f 0900 	mov.w	r9, #0
 8006e4e:	6123      	str	r3, [r4, #16]
 8006e50:	f02b 0304 	bic.w	r3, fp, #4
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	4633      	mov	r3, r6
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	9700      	str	r7, [sp, #0]
 8006e5e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006e60:	f000 f9d4 	bl	800720c <_printf_common>
 8006e64:	3001      	adds	r0, #1
 8006e66:	f040 8090 	bne.w	8006f8a <_printf_float+0x1d6>
 8006e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6e:	b011      	add	sp, #68	@ 0x44
 8006e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e74:	4642      	mov	r2, r8
 8006e76:	464b      	mov	r3, r9
 8006e78:	4640      	mov	r0, r8
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	f7f9 fdc6 	bl	8000a0c <__aeabi_dcmpun>
 8006e80:	b148      	cbz	r0, 8006e96 <_printf_float+0xe2>
 8006e82:	464b      	mov	r3, r9
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bfb8      	it	lt
 8006e88:	232d      	movlt	r3, #45	@ 0x2d
 8006e8a:	4a80      	ldr	r2, [pc, #512]	@ (800708c <_printf_float+0x2d8>)
 8006e8c:	bfb8      	it	lt
 8006e8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006e92:	4b7f      	ldr	r3, [pc, #508]	@ (8007090 <_printf_float+0x2dc>)
 8006e94:	e7d3      	b.n	8006e3e <_printf_float+0x8a>
 8006e96:	6863      	ldr	r3, [r4, #4]
 8006e98:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	d13f      	bne.n	8006f20 <_printf_float+0x16c>
 8006ea0:	2306      	movs	r3, #6
 8006ea2:	6063      	str	r3, [r4, #4]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006eaa:	6023      	str	r3, [r4, #0]
 8006eac:	9206      	str	r2, [sp, #24]
 8006eae:	aa0e      	add	r2, sp, #56	@ 0x38
 8006eb0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006eb4:	aa0d      	add	r2, sp, #52	@ 0x34
 8006eb6:	9203      	str	r2, [sp, #12]
 8006eb8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006ebc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ec0:	6863      	ldr	r3, [r4, #4]
 8006ec2:	4642      	mov	r2, r8
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	464b      	mov	r3, r9
 8006eca:	910a      	str	r1, [sp, #40]	@ 0x28
 8006ecc:	f7ff fed4 	bl	8006c78 <__cvt>
 8006ed0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ed2:	4680      	mov	r8, r0
 8006ed4:	2947      	cmp	r1, #71	@ 0x47
 8006ed6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006ed8:	d128      	bne.n	8006f2c <_printf_float+0x178>
 8006eda:	1cc8      	adds	r0, r1, #3
 8006edc:	db02      	blt.n	8006ee4 <_printf_float+0x130>
 8006ede:	6863      	ldr	r3, [r4, #4]
 8006ee0:	4299      	cmp	r1, r3
 8006ee2:	dd40      	ble.n	8006f66 <_printf_float+0x1b2>
 8006ee4:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ee8:	fa5f fa8a 	uxtb.w	sl, sl
 8006eec:	4652      	mov	r2, sl
 8006eee:	3901      	subs	r1, #1
 8006ef0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ef4:	910d      	str	r1, [sp, #52]	@ 0x34
 8006ef6:	f7ff ff23 	bl	8006d40 <__exponent>
 8006efa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006efc:	4681      	mov	r9, r0
 8006efe:	1813      	adds	r3, r2, r0
 8006f00:	2a01      	cmp	r2, #1
 8006f02:	6123      	str	r3, [r4, #16]
 8006f04:	dc02      	bgt.n	8006f0c <_printf_float+0x158>
 8006f06:	6822      	ldr	r2, [r4, #0]
 8006f08:	07d2      	lsls	r2, r2, #31
 8006f0a:	d501      	bpl.n	8006f10 <_printf_float+0x15c>
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	6123      	str	r3, [r4, #16]
 8006f10:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d09e      	beq.n	8006e56 <_printf_float+0xa2>
 8006f18:	232d      	movs	r3, #45	@ 0x2d
 8006f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f1e:	e79a      	b.n	8006e56 <_printf_float+0xa2>
 8006f20:	2947      	cmp	r1, #71	@ 0x47
 8006f22:	d1bf      	bne.n	8006ea4 <_printf_float+0xf0>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1bd      	bne.n	8006ea4 <_printf_float+0xf0>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e7ba      	b.n	8006ea2 <_printf_float+0xee>
 8006f2c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f30:	d9dc      	bls.n	8006eec <_printf_float+0x138>
 8006f32:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006f36:	d118      	bne.n	8006f6a <_printf_float+0x1b6>
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	6863      	ldr	r3, [r4, #4]
 8006f3c:	dd0b      	ble.n	8006f56 <_printf_float+0x1a2>
 8006f3e:	6121      	str	r1, [r4, #16]
 8006f40:	b913      	cbnz	r3, 8006f48 <_printf_float+0x194>
 8006f42:	6822      	ldr	r2, [r4, #0]
 8006f44:	07d0      	lsls	r0, r2, #31
 8006f46:	d502      	bpl.n	8006f4e <_printf_float+0x19a>
 8006f48:	3301      	adds	r3, #1
 8006f4a:	440b      	add	r3, r1
 8006f4c:	6123      	str	r3, [r4, #16]
 8006f4e:	f04f 0900 	mov.w	r9, #0
 8006f52:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006f54:	e7dc      	b.n	8006f10 <_printf_float+0x15c>
 8006f56:	b913      	cbnz	r3, 8006f5e <_printf_float+0x1aa>
 8006f58:	6822      	ldr	r2, [r4, #0]
 8006f5a:	07d2      	lsls	r2, r2, #31
 8006f5c:	d501      	bpl.n	8006f62 <_printf_float+0x1ae>
 8006f5e:	3302      	adds	r3, #2
 8006f60:	e7f4      	b.n	8006f4c <_printf_float+0x198>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e7f2      	b.n	8006f4c <_printf_float+0x198>
 8006f66:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f6c:	4299      	cmp	r1, r3
 8006f6e:	db05      	blt.n	8006f7c <_printf_float+0x1c8>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	6121      	str	r1, [r4, #16]
 8006f74:	07d8      	lsls	r0, r3, #31
 8006f76:	d5ea      	bpl.n	8006f4e <_printf_float+0x19a>
 8006f78:	1c4b      	adds	r3, r1, #1
 8006f7a:	e7e7      	b.n	8006f4c <_printf_float+0x198>
 8006f7c:	2900      	cmp	r1, #0
 8006f7e:	bfcc      	ite	gt
 8006f80:	2201      	movgt	r2, #1
 8006f82:	f1c1 0202 	rsble	r2, r1, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	e7e0      	b.n	8006f4c <_printf_float+0x198>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	055a      	lsls	r2, r3, #21
 8006f8e:	d407      	bmi.n	8006fa0 <_printf_float+0x1ec>
 8006f90:	6923      	ldr	r3, [r4, #16]
 8006f92:	4642      	mov	r2, r8
 8006f94:	4631      	mov	r1, r6
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b8      	blx	r7
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d12b      	bne.n	8006ff6 <_printf_float+0x242>
 8006f9e:	e764      	b.n	8006e6a <_printf_float+0xb6>
 8006fa0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006fa4:	f240 80dc 	bls.w	8007160 <_printf_float+0x3ac>
 8006fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006fac:	2200      	movs	r2, #0
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f7f9 fcfa 	bl	80009a8 <__aeabi_dcmpeq>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d033      	beq.n	8007020 <_printf_float+0x26c>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	4a35      	ldr	r2, [pc, #212]	@ (8007094 <_printf_float+0x2e0>)
 8006fc0:	47b8      	blx	r7
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	f43f af51 	beq.w	8006e6a <_printf_float+0xb6>
 8006fc8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006fcc:	4543      	cmp	r3, r8
 8006fce:	db02      	blt.n	8006fd6 <_printf_float+0x222>
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	07d8      	lsls	r0, r3, #31
 8006fd4:	d50f      	bpl.n	8006ff6 <_printf_float+0x242>
 8006fd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fda:	4631      	mov	r1, r6
 8006fdc:	4628      	mov	r0, r5
 8006fde:	47b8      	blx	r7
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f43f af42 	beq.w	8006e6a <_printf_float+0xb6>
 8006fe6:	f04f 0900 	mov.w	r9, #0
 8006fea:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fee:	f104 0a1a 	add.w	sl, r4, #26
 8006ff2:	45c8      	cmp	r8, r9
 8006ff4:	dc09      	bgt.n	800700a <_printf_float+0x256>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	079b      	lsls	r3, r3, #30
 8006ffa:	f100 8102 	bmi.w	8007202 <_printf_float+0x44e>
 8006ffe:	68e0      	ldr	r0, [r4, #12]
 8007000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007002:	4298      	cmp	r0, r3
 8007004:	bfb8      	it	lt
 8007006:	4618      	movlt	r0, r3
 8007008:	e731      	b.n	8006e6e <_printf_float+0xba>
 800700a:	2301      	movs	r3, #1
 800700c:	4652      	mov	r2, sl
 800700e:	4631      	mov	r1, r6
 8007010:	4628      	mov	r0, r5
 8007012:	47b8      	blx	r7
 8007014:	3001      	adds	r0, #1
 8007016:	f43f af28 	beq.w	8006e6a <_printf_float+0xb6>
 800701a:	f109 0901 	add.w	r9, r9, #1
 800701e:	e7e8      	b.n	8006ff2 <_printf_float+0x23e>
 8007020:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007022:	2b00      	cmp	r3, #0
 8007024:	dc38      	bgt.n	8007098 <_printf_float+0x2e4>
 8007026:	2301      	movs	r3, #1
 8007028:	4631      	mov	r1, r6
 800702a:	4628      	mov	r0, r5
 800702c:	4a19      	ldr	r2, [pc, #100]	@ (8007094 <_printf_float+0x2e0>)
 800702e:	47b8      	blx	r7
 8007030:	3001      	adds	r0, #1
 8007032:	f43f af1a 	beq.w	8006e6a <_printf_float+0xb6>
 8007036:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800703a:	ea59 0303 	orrs.w	r3, r9, r3
 800703e:	d102      	bne.n	8007046 <_printf_float+0x292>
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	07d9      	lsls	r1, r3, #31
 8007044:	d5d7      	bpl.n	8006ff6 <_printf_float+0x242>
 8007046:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800704a:	4631      	mov	r1, r6
 800704c:	4628      	mov	r0, r5
 800704e:	47b8      	blx	r7
 8007050:	3001      	adds	r0, #1
 8007052:	f43f af0a 	beq.w	8006e6a <_printf_float+0xb6>
 8007056:	f04f 0a00 	mov.w	sl, #0
 800705a:	f104 0b1a 	add.w	fp, r4, #26
 800705e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007060:	425b      	negs	r3, r3
 8007062:	4553      	cmp	r3, sl
 8007064:	dc01      	bgt.n	800706a <_printf_float+0x2b6>
 8007066:	464b      	mov	r3, r9
 8007068:	e793      	b.n	8006f92 <_printf_float+0x1de>
 800706a:	2301      	movs	r3, #1
 800706c:	465a      	mov	r2, fp
 800706e:	4631      	mov	r1, r6
 8007070:	4628      	mov	r0, r5
 8007072:	47b8      	blx	r7
 8007074:	3001      	adds	r0, #1
 8007076:	f43f aef8 	beq.w	8006e6a <_printf_float+0xb6>
 800707a:	f10a 0a01 	add.w	sl, sl, #1
 800707e:	e7ee      	b.n	800705e <_printf_float+0x2aa>
 8007080:	7fefffff 	.word	0x7fefffff
 8007084:	0800bb96 	.word	0x0800bb96
 8007088:	0800bb9a 	.word	0x0800bb9a
 800708c:	0800bb9e 	.word	0x0800bb9e
 8007090:	0800bba2 	.word	0x0800bba2
 8007094:	0800bba6 	.word	0x0800bba6
 8007098:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800709a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800709e:	4553      	cmp	r3, sl
 80070a0:	bfa8      	it	ge
 80070a2:	4653      	movge	r3, sl
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	4699      	mov	r9, r3
 80070a8:	dc36      	bgt.n	8007118 <_printf_float+0x364>
 80070aa:	f04f 0b00 	mov.w	fp, #0
 80070ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070b2:	f104 021a 	add.w	r2, r4, #26
 80070b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80070b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ba:	eba3 0309 	sub.w	r3, r3, r9
 80070be:	455b      	cmp	r3, fp
 80070c0:	dc31      	bgt.n	8007126 <_printf_float+0x372>
 80070c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070c4:	459a      	cmp	sl, r3
 80070c6:	dc3a      	bgt.n	800713e <_printf_float+0x38a>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	07da      	lsls	r2, r3, #31
 80070cc:	d437      	bmi.n	800713e <_printf_float+0x38a>
 80070ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070d0:	ebaa 0903 	sub.w	r9, sl, r3
 80070d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070d6:	ebaa 0303 	sub.w	r3, sl, r3
 80070da:	4599      	cmp	r9, r3
 80070dc:	bfa8      	it	ge
 80070de:	4699      	movge	r9, r3
 80070e0:	f1b9 0f00 	cmp.w	r9, #0
 80070e4:	dc33      	bgt.n	800714e <_printf_float+0x39a>
 80070e6:	f04f 0800 	mov.w	r8, #0
 80070ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070ee:	f104 0b1a 	add.w	fp, r4, #26
 80070f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070f4:	ebaa 0303 	sub.w	r3, sl, r3
 80070f8:	eba3 0309 	sub.w	r3, r3, r9
 80070fc:	4543      	cmp	r3, r8
 80070fe:	f77f af7a 	ble.w	8006ff6 <_printf_float+0x242>
 8007102:	2301      	movs	r3, #1
 8007104:	465a      	mov	r2, fp
 8007106:	4631      	mov	r1, r6
 8007108:	4628      	mov	r0, r5
 800710a:	47b8      	blx	r7
 800710c:	3001      	adds	r0, #1
 800710e:	f43f aeac 	beq.w	8006e6a <_printf_float+0xb6>
 8007112:	f108 0801 	add.w	r8, r8, #1
 8007116:	e7ec      	b.n	80070f2 <_printf_float+0x33e>
 8007118:	4642      	mov	r2, r8
 800711a:	4631      	mov	r1, r6
 800711c:	4628      	mov	r0, r5
 800711e:	47b8      	blx	r7
 8007120:	3001      	adds	r0, #1
 8007122:	d1c2      	bne.n	80070aa <_printf_float+0x2f6>
 8007124:	e6a1      	b.n	8006e6a <_printf_float+0xb6>
 8007126:	2301      	movs	r3, #1
 8007128:	4631      	mov	r1, r6
 800712a:	4628      	mov	r0, r5
 800712c:	920a      	str	r2, [sp, #40]	@ 0x28
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	f43f ae9a 	beq.w	8006e6a <_printf_float+0xb6>
 8007136:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007138:	f10b 0b01 	add.w	fp, fp, #1
 800713c:	e7bb      	b.n	80070b6 <_printf_float+0x302>
 800713e:	4631      	mov	r1, r6
 8007140:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007144:	4628      	mov	r0, r5
 8007146:	47b8      	blx	r7
 8007148:	3001      	adds	r0, #1
 800714a:	d1c0      	bne.n	80070ce <_printf_float+0x31a>
 800714c:	e68d      	b.n	8006e6a <_printf_float+0xb6>
 800714e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007150:	464b      	mov	r3, r9
 8007152:	4631      	mov	r1, r6
 8007154:	4628      	mov	r0, r5
 8007156:	4442      	add	r2, r8
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	d1c3      	bne.n	80070e6 <_printf_float+0x332>
 800715e:	e684      	b.n	8006e6a <_printf_float+0xb6>
 8007160:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007164:	f1ba 0f01 	cmp.w	sl, #1
 8007168:	dc01      	bgt.n	800716e <_printf_float+0x3ba>
 800716a:	07db      	lsls	r3, r3, #31
 800716c:	d536      	bpl.n	80071dc <_printf_float+0x428>
 800716e:	2301      	movs	r3, #1
 8007170:	4642      	mov	r2, r8
 8007172:	4631      	mov	r1, r6
 8007174:	4628      	mov	r0, r5
 8007176:	47b8      	blx	r7
 8007178:	3001      	adds	r0, #1
 800717a:	f43f ae76 	beq.w	8006e6a <_printf_float+0xb6>
 800717e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007182:	4631      	mov	r1, r6
 8007184:	4628      	mov	r0, r5
 8007186:	47b8      	blx	r7
 8007188:	3001      	adds	r0, #1
 800718a:	f43f ae6e 	beq.w	8006e6a <_printf_float+0xb6>
 800718e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007192:	2200      	movs	r2, #0
 8007194:	2300      	movs	r3, #0
 8007196:	f10a 3aff 	add.w	sl, sl, #4294967295
 800719a:	f7f9 fc05 	bl	80009a8 <__aeabi_dcmpeq>
 800719e:	b9c0      	cbnz	r0, 80071d2 <_printf_float+0x41e>
 80071a0:	4653      	mov	r3, sl
 80071a2:	f108 0201 	add.w	r2, r8, #1
 80071a6:	4631      	mov	r1, r6
 80071a8:	4628      	mov	r0, r5
 80071aa:	47b8      	blx	r7
 80071ac:	3001      	adds	r0, #1
 80071ae:	d10c      	bne.n	80071ca <_printf_float+0x416>
 80071b0:	e65b      	b.n	8006e6a <_printf_float+0xb6>
 80071b2:	2301      	movs	r3, #1
 80071b4:	465a      	mov	r2, fp
 80071b6:	4631      	mov	r1, r6
 80071b8:	4628      	mov	r0, r5
 80071ba:	47b8      	blx	r7
 80071bc:	3001      	adds	r0, #1
 80071be:	f43f ae54 	beq.w	8006e6a <_printf_float+0xb6>
 80071c2:	f108 0801 	add.w	r8, r8, #1
 80071c6:	45d0      	cmp	r8, sl
 80071c8:	dbf3      	blt.n	80071b2 <_printf_float+0x3fe>
 80071ca:	464b      	mov	r3, r9
 80071cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80071d0:	e6e0      	b.n	8006f94 <_printf_float+0x1e0>
 80071d2:	f04f 0800 	mov.w	r8, #0
 80071d6:	f104 0b1a 	add.w	fp, r4, #26
 80071da:	e7f4      	b.n	80071c6 <_printf_float+0x412>
 80071dc:	2301      	movs	r3, #1
 80071de:	4642      	mov	r2, r8
 80071e0:	e7e1      	b.n	80071a6 <_printf_float+0x3f2>
 80071e2:	2301      	movs	r3, #1
 80071e4:	464a      	mov	r2, r9
 80071e6:	4631      	mov	r1, r6
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b8      	blx	r7
 80071ec:	3001      	adds	r0, #1
 80071ee:	f43f ae3c 	beq.w	8006e6a <_printf_float+0xb6>
 80071f2:	f108 0801 	add.w	r8, r8, #1
 80071f6:	68e3      	ldr	r3, [r4, #12]
 80071f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80071fa:	1a5b      	subs	r3, r3, r1
 80071fc:	4543      	cmp	r3, r8
 80071fe:	dcf0      	bgt.n	80071e2 <_printf_float+0x42e>
 8007200:	e6fd      	b.n	8006ffe <_printf_float+0x24a>
 8007202:	f04f 0800 	mov.w	r8, #0
 8007206:	f104 0919 	add.w	r9, r4, #25
 800720a:	e7f4      	b.n	80071f6 <_printf_float+0x442>

0800720c <_printf_common>:
 800720c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007210:	4616      	mov	r6, r2
 8007212:	4698      	mov	r8, r3
 8007214:	688a      	ldr	r2, [r1, #8]
 8007216:	690b      	ldr	r3, [r1, #16]
 8007218:	4607      	mov	r7, r0
 800721a:	4293      	cmp	r3, r2
 800721c:	bfb8      	it	lt
 800721e:	4613      	movlt	r3, r2
 8007220:	6033      	str	r3, [r6, #0]
 8007222:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007226:	460c      	mov	r4, r1
 8007228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800722c:	b10a      	cbz	r2, 8007232 <_printf_common+0x26>
 800722e:	3301      	adds	r3, #1
 8007230:	6033      	str	r3, [r6, #0]
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	0699      	lsls	r1, r3, #26
 8007236:	bf42      	ittt	mi
 8007238:	6833      	ldrmi	r3, [r6, #0]
 800723a:	3302      	addmi	r3, #2
 800723c:	6033      	strmi	r3, [r6, #0]
 800723e:	6825      	ldr	r5, [r4, #0]
 8007240:	f015 0506 	ands.w	r5, r5, #6
 8007244:	d106      	bne.n	8007254 <_printf_common+0x48>
 8007246:	f104 0a19 	add.w	sl, r4, #25
 800724a:	68e3      	ldr	r3, [r4, #12]
 800724c:	6832      	ldr	r2, [r6, #0]
 800724e:	1a9b      	subs	r3, r3, r2
 8007250:	42ab      	cmp	r3, r5
 8007252:	dc2b      	bgt.n	80072ac <_printf_common+0xa0>
 8007254:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007258:	6822      	ldr	r2, [r4, #0]
 800725a:	3b00      	subs	r3, #0
 800725c:	bf18      	it	ne
 800725e:	2301      	movne	r3, #1
 8007260:	0692      	lsls	r2, r2, #26
 8007262:	d430      	bmi.n	80072c6 <_printf_common+0xba>
 8007264:	4641      	mov	r1, r8
 8007266:	4638      	mov	r0, r7
 8007268:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800726c:	47c8      	blx	r9
 800726e:	3001      	adds	r0, #1
 8007270:	d023      	beq.n	80072ba <_printf_common+0xae>
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	6922      	ldr	r2, [r4, #16]
 8007276:	f003 0306 	and.w	r3, r3, #6
 800727a:	2b04      	cmp	r3, #4
 800727c:	bf14      	ite	ne
 800727e:	2500      	movne	r5, #0
 8007280:	6833      	ldreq	r3, [r6, #0]
 8007282:	f04f 0600 	mov.w	r6, #0
 8007286:	bf08      	it	eq
 8007288:	68e5      	ldreq	r5, [r4, #12]
 800728a:	f104 041a 	add.w	r4, r4, #26
 800728e:	bf08      	it	eq
 8007290:	1aed      	subeq	r5, r5, r3
 8007292:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007296:	bf08      	it	eq
 8007298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800729c:	4293      	cmp	r3, r2
 800729e:	bfc4      	itt	gt
 80072a0:	1a9b      	subgt	r3, r3, r2
 80072a2:	18ed      	addgt	r5, r5, r3
 80072a4:	42b5      	cmp	r5, r6
 80072a6:	d11a      	bne.n	80072de <_printf_common+0xd2>
 80072a8:	2000      	movs	r0, #0
 80072aa:	e008      	b.n	80072be <_printf_common+0xb2>
 80072ac:	2301      	movs	r3, #1
 80072ae:	4652      	mov	r2, sl
 80072b0:	4641      	mov	r1, r8
 80072b2:	4638      	mov	r0, r7
 80072b4:	47c8      	blx	r9
 80072b6:	3001      	adds	r0, #1
 80072b8:	d103      	bne.n	80072c2 <_printf_common+0xb6>
 80072ba:	f04f 30ff 	mov.w	r0, #4294967295
 80072be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c2:	3501      	adds	r5, #1
 80072c4:	e7c1      	b.n	800724a <_printf_common+0x3e>
 80072c6:	2030      	movs	r0, #48	@ 0x30
 80072c8:	18e1      	adds	r1, r4, r3
 80072ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072d4:	4422      	add	r2, r4
 80072d6:	3302      	adds	r3, #2
 80072d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072dc:	e7c2      	b.n	8007264 <_printf_common+0x58>
 80072de:	2301      	movs	r3, #1
 80072e0:	4622      	mov	r2, r4
 80072e2:	4641      	mov	r1, r8
 80072e4:	4638      	mov	r0, r7
 80072e6:	47c8      	blx	r9
 80072e8:	3001      	adds	r0, #1
 80072ea:	d0e6      	beq.n	80072ba <_printf_common+0xae>
 80072ec:	3601      	adds	r6, #1
 80072ee:	e7d9      	b.n	80072a4 <_printf_common+0x98>

080072f0 <_printf_i>:
 80072f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072f4:	7e0f      	ldrb	r7, [r1, #24]
 80072f6:	4691      	mov	r9, r2
 80072f8:	2f78      	cmp	r7, #120	@ 0x78
 80072fa:	4680      	mov	r8, r0
 80072fc:	460c      	mov	r4, r1
 80072fe:	469a      	mov	sl, r3
 8007300:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007306:	d807      	bhi.n	8007318 <_printf_i+0x28>
 8007308:	2f62      	cmp	r7, #98	@ 0x62
 800730a:	d80a      	bhi.n	8007322 <_printf_i+0x32>
 800730c:	2f00      	cmp	r7, #0
 800730e:	f000 80d3 	beq.w	80074b8 <_printf_i+0x1c8>
 8007312:	2f58      	cmp	r7, #88	@ 0x58
 8007314:	f000 80ba 	beq.w	800748c <_printf_i+0x19c>
 8007318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800731c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007320:	e03a      	b.n	8007398 <_printf_i+0xa8>
 8007322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007326:	2b15      	cmp	r3, #21
 8007328:	d8f6      	bhi.n	8007318 <_printf_i+0x28>
 800732a:	a101      	add	r1, pc, #4	@ (adr r1, 8007330 <_printf_i+0x40>)
 800732c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007330:	08007389 	.word	0x08007389
 8007334:	0800739d 	.word	0x0800739d
 8007338:	08007319 	.word	0x08007319
 800733c:	08007319 	.word	0x08007319
 8007340:	08007319 	.word	0x08007319
 8007344:	08007319 	.word	0x08007319
 8007348:	0800739d 	.word	0x0800739d
 800734c:	08007319 	.word	0x08007319
 8007350:	08007319 	.word	0x08007319
 8007354:	08007319 	.word	0x08007319
 8007358:	08007319 	.word	0x08007319
 800735c:	0800749f 	.word	0x0800749f
 8007360:	080073c7 	.word	0x080073c7
 8007364:	08007459 	.word	0x08007459
 8007368:	08007319 	.word	0x08007319
 800736c:	08007319 	.word	0x08007319
 8007370:	080074c1 	.word	0x080074c1
 8007374:	08007319 	.word	0x08007319
 8007378:	080073c7 	.word	0x080073c7
 800737c:	08007319 	.word	0x08007319
 8007380:	08007319 	.word	0x08007319
 8007384:	08007461 	.word	0x08007461
 8007388:	6833      	ldr	r3, [r6, #0]
 800738a:	1d1a      	adds	r2, r3, #4
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6032      	str	r2, [r6, #0]
 8007390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007398:	2301      	movs	r3, #1
 800739a:	e09e      	b.n	80074da <_printf_i+0x1ea>
 800739c:	6833      	ldr	r3, [r6, #0]
 800739e:	6820      	ldr	r0, [r4, #0]
 80073a0:	1d19      	adds	r1, r3, #4
 80073a2:	6031      	str	r1, [r6, #0]
 80073a4:	0606      	lsls	r6, r0, #24
 80073a6:	d501      	bpl.n	80073ac <_printf_i+0xbc>
 80073a8:	681d      	ldr	r5, [r3, #0]
 80073aa:	e003      	b.n	80073b4 <_printf_i+0xc4>
 80073ac:	0645      	lsls	r5, r0, #25
 80073ae:	d5fb      	bpl.n	80073a8 <_printf_i+0xb8>
 80073b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80073b4:	2d00      	cmp	r5, #0
 80073b6:	da03      	bge.n	80073c0 <_printf_i+0xd0>
 80073b8:	232d      	movs	r3, #45	@ 0x2d
 80073ba:	426d      	negs	r5, r5
 80073bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073c0:	230a      	movs	r3, #10
 80073c2:	4859      	ldr	r0, [pc, #356]	@ (8007528 <_printf_i+0x238>)
 80073c4:	e011      	b.n	80073ea <_printf_i+0xfa>
 80073c6:	6821      	ldr	r1, [r4, #0]
 80073c8:	6833      	ldr	r3, [r6, #0]
 80073ca:	0608      	lsls	r0, r1, #24
 80073cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80073d0:	d402      	bmi.n	80073d8 <_printf_i+0xe8>
 80073d2:	0649      	lsls	r1, r1, #25
 80073d4:	bf48      	it	mi
 80073d6:	b2ad      	uxthmi	r5, r5
 80073d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80073da:	6033      	str	r3, [r6, #0]
 80073dc:	bf14      	ite	ne
 80073de:	230a      	movne	r3, #10
 80073e0:	2308      	moveq	r3, #8
 80073e2:	4851      	ldr	r0, [pc, #324]	@ (8007528 <_printf_i+0x238>)
 80073e4:	2100      	movs	r1, #0
 80073e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073ea:	6866      	ldr	r6, [r4, #4]
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	bfa8      	it	ge
 80073f0:	6821      	ldrge	r1, [r4, #0]
 80073f2:	60a6      	str	r6, [r4, #8]
 80073f4:	bfa4      	itt	ge
 80073f6:	f021 0104 	bicge.w	r1, r1, #4
 80073fa:	6021      	strge	r1, [r4, #0]
 80073fc:	b90d      	cbnz	r5, 8007402 <_printf_i+0x112>
 80073fe:	2e00      	cmp	r6, #0
 8007400:	d04b      	beq.n	800749a <_printf_i+0x1aa>
 8007402:	4616      	mov	r6, r2
 8007404:	fbb5 f1f3 	udiv	r1, r5, r3
 8007408:	fb03 5711 	mls	r7, r3, r1, r5
 800740c:	5dc7      	ldrb	r7, [r0, r7]
 800740e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007412:	462f      	mov	r7, r5
 8007414:	42bb      	cmp	r3, r7
 8007416:	460d      	mov	r5, r1
 8007418:	d9f4      	bls.n	8007404 <_printf_i+0x114>
 800741a:	2b08      	cmp	r3, #8
 800741c:	d10b      	bne.n	8007436 <_printf_i+0x146>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	07df      	lsls	r7, r3, #31
 8007422:	d508      	bpl.n	8007436 <_printf_i+0x146>
 8007424:	6923      	ldr	r3, [r4, #16]
 8007426:	6861      	ldr	r1, [r4, #4]
 8007428:	4299      	cmp	r1, r3
 800742a:	bfde      	ittt	le
 800742c:	2330      	movle	r3, #48	@ 0x30
 800742e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007432:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007436:	1b92      	subs	r2, r2, r6
 8007438:	6122      	str	r2, [r4, #16]
 800743a:	464b      	mov	r3, r9
 800743c:	4621      	mov	r1, r4
 800743e:	4640      	mov	r0, r8
 8007440:	f8cd a000 	str.w	sl, [sp]
 8007444:	aa03      	add	r2, sp, #12
 8007446:	f7ff fee1 	bl	800720c <_printf_common>
 800744a:	3001      	adds	r0, #1
 800744c:	d14a      	bne.n	80074e4 <_printf_i+0x1f4>
 800744e:	f04f 30ff 	mov.w	r0, #4294967295
 8007452:	b004      	add	sp, #16
 8007454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	f043 0320 	orr.w	r3, r3, #32
 800745e:	6023      	str	r3, [r4, #0]
 8007460:	2778      	movs	r7, #120	@ 0x78
 8007462:	4832      	ldr	r0, [pc, #200]	@ (800752c <_printf_i+0x23c>)
 8007464:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007468:	6823      	ldr	r3, [r4, #0]
 800746a:	6831      	ldr	r1, [r6, #0]
 800746c:	061f      	lsls	r7, r3, #24
 800746e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007472:	d402      	bmi.n	800747a <_printf_i+0x18a>
 8007474:	065f      	lsls	r7, r3, #25
 8007476:	bf48      	it	mi
 8007478:	b2ad      	uxthmi	r5, r5
 800747a:	6031      	str	r1, [r6, #0]
 800747c:	07d9      	lsls	r1, r3, #31
 800747e:	bf44      	itt	mi
 8007480:	f043 0320 	orrmi.w	r3, r3, #32
 8007484:	6023      	strmi	r3, [r4, #0]
 8007486:	b11d      	cbz	r5, 8007490 <_printf_i+0x1a0>
 8007488:	2310      	movs	r3, #16
 800748a:	e7ab      	b.n	80073e4 <_printf_i+0xf4>
 800748c:	4826      	ldr	r0, [pc, #152]	@ (8007528 <_printf_i+0x238>)
 800748e:	e7e9      	b.n	8007464 <_printf_i+0x174>
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	f023 0320 	bic.w	r3, r3, #32
 8007496:	6023      	str	r3, [r4, #0]
 8007498:	e7f6      	b.n	8007488 <_printf_i+0x198>
 800749a:	4616      	mov	r6, r2
 800749c:	e7bd      	b.n	800741a <_printf_i+0x12a>
 800749e:	6833      	ldr	r3, [r6, #0]
 80074a0:	6825      	ldr	r5, [r4, #0]
 80074a2:	1d18      	adds	r0, r3, #4
 80074a4:	6961      	ldr	r1, [r4, #20]
 80074a6:	6030      	str	r0, [r6, #0]
 80074a8:	062e      	lsls	r6, r5, #24
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	d501      	bpl.n	80074b2 <_printf_i+0x1c2>
 80074ae:	6019      	str	r1, [r3, #0]
 80074b0:	e002      	b.n	80074b8 <_printf_i+0x1c8>
 80074b2:	0668      	lsls	r0, r5, #25
 80074b4:	d5fb      	bpl.n	80074ae <_printf_i+0x1be>
 80074b6:	8019      	strh	r1, [r3, #0]
 80074b8:	2300      	movs	r3, #0
 80074ba:	4616      	mov	r6, r2
 80074bc:	6123      	str	r3, [r4, #16]
 80074be:	e7bc      	b.n	800743a <_printf_i+0x14a>
 80074c0:	6833      	ldr	r3, [r6, #0]
 80074c2:	2100      	movs	r1, #0
 80074c4:	1d1a      	adds	r2, r3, #4
 80074c6:	6032      	str	r2, [r6, #0]
 80074c8:	681e      	ldr	r6, [r3, #0]
 80074ca:	6862      	ldr	r2, [r4, #4]
 80074cc:	4630      	mov	r0, r6
 80074ce:	f000 fbf6 	bl	8007cbe <memchr>
 80074d2:	b108      	cbz	r0, 80074d8 <_printf_i+0x1e8>
 80074d4:	1b80      	subs	r0, r0, r6
 80074d6:	6060      	str	r0, [r4, #4]
 80074d8:	6863      	ldr	r3, [r4, #4]
 80074da:	6123      	str	r3, [r4, #16]
 80074dc:	2300      	movs	r3, #0
 80074de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074e2:	e7aa      	b.n	800743a <_printf_i+0x14a>
 80074e4:	4632      	mov	r2, r6
 80074e6:	4649      	mov	r1, r9
 80074e8:	4640      	mov	r0, r8
 80074ea:	6923      	ldr	r3, [r4, #16]
 80074ec:	47d0      	blx	sl
 80074ee:	3001      	adds	r0, #1
 80074f0:	d0ad      	beq.n	800744e <_printf_i+0x15e>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	079b      	lsls	r3, r3, #30
 80074f6:	d413      	bmi.n	8007520 <_printf_i+0x230>
 80074f8:	68e0      	ldr	r0, [r4, #12]
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	4298      	cmp	r0, r3
 80074fe:	bfb8      	it	lt
 8007500:	4618      	movlt	r0, r3
 8007502:	e7a6      	b.n	8007452 <_printf_i+0x162>
 8007504:	2301      	movs	r3, #1
 8007506:	4632      	mov	r2, r6
 8007508:	4649      	mov	r1, r9
 800750a:	4640      	mov	r0, r8
 800750c:	47d0      	blx	sl
 800750e:	3001      	adds	r0, #1
 8007510:	d09d      	beq.n	800744e <_printf_i+0x15e>
 8007512:	3501      	adds	r5, #1
 8007514:	68e3      	ldr	r3, [r4, #12]
 8007516:	9903      	ldr	r1, [sp, #12]
 8007518:	1a5b      	subs	r3, r3, r1
 800751a:	42ab      	cmp	r3, r5
 800751c:	dcf2      	bgt.n	8007504 <_printf_i+0x214>
 800751e:	e7eb      	b.n	80074f8 <_printf_i+0x208>
 8007520:	2500      	movs	r5, #0
 8007522:	f104 0619 	add.w	r6, r4, #25
 8007526:	e7f5      	b.n	8007514 <_printf_i+0x224>
 8007528:	0800bba8 	.word	0x0800bba8
 800752c:	0800bbb9 	.word	0x0800bbb9

08007530 <_scanf_float>:
 8007530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007534:	b087      	sub	sp, #28
 8007536:	9303      	str	r3, [sp, #12]
 8007538:	688b      	ldr	r3, [r1, #8]
 800753a:	4617      	mov	r7, r2
 800753c:	1e5a      	subs	r2, r3, #1
 800753e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007542:	bf82      	ittt	hi
 8007544:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007548:	eb03 0b05 	addhi.w	fp, r3, r5
 800754c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007550:	460a      	mov	r2, r1
 8007552:	f04f 0500 	mov.w	r5, #0
 8007556:	bf88      	it	hi
 8007558:	608b      	strhi	r3, [r1, #8]
 800755a:	680b      	ldr	r3, [r1, #0]
 800755c:	4680      	mov	r8, r0
 800755e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007562:	f842 3b1c 	str.w	r3, [r2], #28
 8007566:	460c      	mov	r4, r1
 8007568:	bf98      	it	ls
 800756a:	f04f 0b00 	movls.w	fp, #0
 800756e:	4616      	mov	r6, r2
 8007570:	46aa      	mov	sl, r5
 8007572:	46a9      	mov	r9, r5
 8007574:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007578:	9201      	str	r2, [sp, #4]
 800757a:	9502      	str	r5, [sp, #8]
 800757c:	68a2      	ldr	r2, [r4, #8]
 800757e:	b152      	cbz	r2, 8007596 <_scanf_float+0x66>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b4e      	cmp	r3, #78	@ 0x4e
 8007586:	d865      	bhi.n	8007654 <_scanf_float+0x124>
 8007588:	2b40      	cmp	r3, #64	@ 0x40
 800758a:	d83d      	bhi.n	8007608 <_scanf_float+0xd8>
 800758c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007590:	b2c8      	uxtb	r0, r1
 8007592:	280e      	cmp	r0, #14
 8007594:	d93b      	bls.n	800760e <_scanf_float+0xde>
 8007596:	f1b9 0f00 	cmp.w	r9, #0
 800759a:	d003      	beq.n	80075a4 <_scanf_float+0x74>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075a2:	6023      	str	r3, [r4, #0]
 80075a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075a8:	f1ba 0f01 	cmp.w	sl, #1
 80075ac:	f200 8118 	bhi.w	80077e0 <_scanf_float+0x2b0>
 80075b0:	9b01      	ldr	r3, [sp, #4]
 80075b2:	429e      	cmp	r6, r3
 80075b4:	f200 8109 	bhi.w	80077ca <_scanf_float+0x29a>
 80075b8:	2001      	movs	r0, #1
 80075ba:	b007      	add	sp, #28
 80075bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075c0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80075c4:	2a0d      	cmp	r2, #13
 80075c6:	d8e6      	bhi.n	8007596 <_scanf_float+0x66>
 80075c8:	a101      	add	r1, pc, #4	@ (adr r1, 80075d0 <_scanf_float+0xa0>)
 80075ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	08007717 	.word	0x08007717
 80075d4:	08007597 	.word	0x08007597
 80075d8:	08007597 	.word	0x08007597
 80075dc:	08007597 	.word	0x08007597
 80075e0:	08007777 	.word	0x08007777
 80075e4:	0800774f 	.word	0x0800774f
 80075e8:	08007597 	.word	0x08007597
 80075ec:	08007597 	.word	0x08007597
 80075f0:	08007725 	.word	0x08007725
 80075f4:	08007597 	.word	0x08007597
 80075f8:	08007597 	.word	0x08007597
 80075fc:	08007597 	.word	0x08007597
 8007600:	08007597 	.word	0x08007597
 8007604:	080076dd 	.word	0x080076dd
 8007608:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800760c:	e7da      	b.n	80075c4 <_scanf_float+0x94>
 800760e:	290e      	cmp	r1, #14
 8007610:	d8c1      	bhi.n	8007596 <_scanf_float+0x66>
 8007612:	a001      	add	r0, pc, #4	@ (adr r0, 8007618 <_scanf_float+0xe8>)
 8007614:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007618:	080076cd 	.word	0x080076cd
 800761c:	08007597 	.word	0x08007597
 8007620:	080076cd 	.word	0x080076cd
 8007624:	08007763 	.word	0x08007763
 8007628:	08007597 	.word	0x08007597
 800762c:	08007675 	.word	0x08007675
 8007630:	080076b3 	.word	0x080076b3
 8007634:	080076b3 	.word	0x080076b3
 8007638:	080076b3 	.word	0x080076b3
 800763c:	080076b3 	.word	0x080076b3
 8007640:	080076b3 	.word	0x080076b3
 8007644:	080076b3 	.word	0x080076b3
 8007648:	080076b3 	.word	0x080076b3
 800764c:	080076b3 	.word	0x080076b3
 8007650:	080076b3 	.word	0x080076b3
 8007654:	2b6e      	cmp	r3, #110	@ 0x6e
 8007656:	d809      	bhi.n	800766c <_scanf_float+0x13c>
 8007658:	2b60      	cmp	r3, #96	@ 0x60
 800765a:	d8b1      	bhi.n	80075c0 <_scanf_float+0x90>
 800765c:	2b54      	cmp	r3, #84	@ 0x54
 800765e:	d07b      	beq.n	8007758 <_scanf_float+0x228>
 8007660:	2b59      	cmp	r3, #89	@ 0x59
 8007662:	d198      	bne.n	8007596 <_scanf_float+0x66>
 8007664:	2d07      	cmp	r5, #7
 8007666:	d196      	bne.n	8007596 <_scanf_float+0x66>
 8007668:	2508      	movs	r5, #8
 800766a:	e02c      	b.n	80076c6 <_scanf_float+0x196>
 800766c:	2b74      	cmp	r3, #116	@ 0x74
 800766e:	d073      	beq.n	8007758 <_scanf_float+0x228>
 8007670:	2b79      	cmp	r3, #121	@ 0x79
 8007672:	e7f6      	b.n	8007662 <_scanf_float+0x132>
 8007674:	6821      	ldr	r1, [r4, #0]
 8007676:	05c8      	lsls	r0, r1, #23
 8007678:	d51b      	bpl.n	80076b2 <_scanf_float+0x182>
 800767a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800767e:	6021      	str	r1, [r4, #0]
 8007680:	f109 0901 	add.w	r9, r9, #1
 8007684:	f1bb 0f00 	cmp.w	fp, #0
 8007688:	d003      	beq.n	8007692 <_scanf_float+0x162>
 800768a:	3201      	adds	r2, #1
 800768c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007690:	60a2      	str	r2, [r4, #8]
 8007692:	68a3      	ldr	r3, [r4, #8]
 8007694:	3b01      	subs	r3, #1
 8007696:	60a3      	str	r3, [r4, #8]
 8007698:	6923      	ldr	r3, [r4, #16]
 800769a:	3301      	adds	r3, #1
 800769c:	6123      	str	r3, [r4, #16]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	607b      	str	r3, [r7, #4]
 80076a6:	f340 8087 	ble.w	80077b8 <_scanf_float+0x288>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	3301      	adds	r3, #1
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	e764      	b.n	800757c <_scanf_float+0x4c>
 80076b2:	eb1a 0105 	adds.w	r1, sl, r5
 80076b6:	f47f af6e 	bne.w	8007596 <_scanf_float+0x66>
 80076ba:	460d      	mov	r5, r1
 80076bc:	468a      	mov	sl, r1
 80076be:	6822      	ldr	r2, [r4, #0]
 80076c0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80076c4:	6022      	str	r2, [r4, #0]
 80076c6:	f806 3b01 	strb.w	r3, [r6], #1
 80076ca:	e7e2      	b.n	8007692 <_scanf_float+0x162>
 80076cc:	6822      	ldr	r2, [r4, #0]
 80076ce:	0610      	lsls	r0, r2, #24
 80076d0:	f57f af61 	bpl.w	8007596 <_scanf_float+0x66>
 80076d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076d8:	6022      	str	r2, [r4, #0]
 80076da:	e7f4      	b.n	80076c6 <_scanf_float+0x196>
 80076dc:	f1ba 0f00 	cmp.w	sl, #0
 80076e0:	d10e      	bne.n	8007700 <_scanf_float+0x1d0>
 80076e2:	f1b9 0f00 	cmp.w	r9, #0
 80076e6:	d10e      	bne.n	8007706 <_scanf_float+0x1d6>
 80076e8:	6822      	ldr	r2, [r4, #0]
 80076ea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80076ee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80076f2:	d108      	bne.n	8007706 <_scanf_float+0x1d6>
 80076f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80076f8:	f04f 0a01 	mov.w	sl, #1
 80076fc:	6022      	str	r2, [r4, #0]
 80076fe:	e7e2      	b.n	80076c6 <_scanf_float+0x196>
 8007700:	f1ba 0f02 	cmp.w	sl, #2
 8007704:	d055      	beq.n	80077b2 <_scanf_float+0x282>
 8007706:	2d01      	cmp	r5, #1
 8007708:	d002      	beq.n	8007710 <_scanf_float+0x1e0>
 800770a:	2d04      	cmp	r5, #4
 800770c:	f47f af43 	bne.w	8007596 <_scanf_float+0x66>
 8007710:	3501      	adds	r5, #1
 8007712:	b2ed      	uxtb	r5, r5
 8007714:	e7d7      	b.n	80076c6 <_scanf_float+0x196>
 8007716:	f1ba 0f01 	cmp.w	sl, #1
 800771a:	f47f af3c 	bne.w	8007596 <_scanf_float+0x66>
 800771e:	f04f 0a02 	mov.w	sl, #2
 8007722:	e7d0      	b.n	80076c6 <_scanf_float+0x196>
 8007724:	b97d      	cbnz	r5, 8007746 <_scanf_float+0x216>
 8007726:	f1b9 0f00 	cmp.w	r9, #0
 800772a:	f47f af37 	bne.w	800759c <_scanf_float+0x6c>
 800772e:	6822      	ldr	r2, [r4, #0]
 8007730:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007734:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007738:	f040 8103 	bne.w	8007942 <_scanf_float+0x412>
 800773c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007740:	2501      	movs	r5, #1
 8007742:	6022      	str	r2, [r4, #0]
 8007744:	e7bf      	b.n	80076c6 <_scanf_float+0x196>
 8007746:	2d03      	cmp	r5, #3
 8007748:	d0e2      	beq.n	8007710 <_scanf_float+0x1e0>
 800774a:	2d05      	cmp	r5, #5
 800774c:	e7de      	b.n	800770c <_scanf_float+0x1dc>
 800774e:	2d02      	cmp	r5, #2
 8007750:	f47f af21 	bne.w	8007596 <_scanf_float+0x66>
 8007754:	2503      	movs	r5, #3
 8007756:	e7b6      	b.n	80076c6 <_scanf_float+0x196>
 8007758:	2d06      	cmp	r5, #6
 800775a:	f47f af1c 	bne.w	8007596 <_scanf_float+0x66>
 800775e:	2507      	movs	r5, #7
 8007760:	e7b1      	b.n	80076c6 <_scanf_float+0x196>
 8007762:	6822      	ldr	r2, [r4, #0]
 8007764:	0591      	lsls	r1, r2, #22
 8007766:	f57f af16 	bpl.w	8007596 <_scanf_float+0x66>
 800776a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800776e:	6022      	str	r2, [r4, #0]
 8007770:	f8cd 9008 	str.w	r9, [sp, #8]
 8007774:	e7a7      	b.n	80076c6 <_scanf_float+0x196>
 8007776:	6822      	ldr	r2, [r4, #0]
 8007778:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800777c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007780:	d006      	beq.n	8007790 <_scanf_float+0x260>
 8007782:	0550      	lsls	r0, r2, #21
 8007784:	f57f af07 	bpl.w	8007596 <_scanf_float+0x66>
 8007788:	f1b9 0f00 	cmp.w	r9, #0
 800778c:	f000 80d9 	beq.w	8007942 <_scanf_float+0x412>
 8007790:	0591      	lsls	r1, r2, #22
 8007792:	bf58      	it	pl
 8007794:	9902      	ldrpl	r1, [sp, #8]
 8007796:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800779a:	bf58      	it	pl
 800779c:	eba9 0101 	subpl.w	r1, r9, r1
 80077a0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80077a4:	f04f 0900 	mov.w	r9, #0
 80077a8:	bf58      	it	pl
 80077aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80077ae:	6022      	str	r2, [r4, #0]
 80077b0:	e789      	b.n	80076c6 <_scanf_float+0x196>
 80077b2:	f04f 0a03 	mov.w	sl, #3
 80077b6:	e786      	b.n	80076c6 <_scanf_float+0x196>
 80077b8:	4639      	mov	r1, r7
 80077ba:	4640      	mov	r0, r8
 80077bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80077c0:	4798      	blx	r3
 80077c2:	2800      	cmp	r0, #0
 80077c4:	f43f aeda 	beq.w	800757c <_scanf_float+0x4c>
 80077c8:	e6e5      	b.n	8007596 <_scanf_float+0x66>
 80077ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077ce:	463a      	mov	r2, r7
 80077d0:	4640      	mov	r0, r8
 80077d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077d6:	4798      	blx	r3
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	3b01      	subs	r3, #1
 80077dc:	6123      	str	r3, [r4, #16]
 80077de:	e6e7      	b.n	80075b0 <_scanf_float+0x80>
 80077e0:	1e6b      	subs	r3, r5, #1
 80077e2:	2b06      	cmp	r3, #6
 80077e4:	d824      	bhi.n	8007830 <_scanf_float+0x300>
 80077e6:	2d02      	cmp	r5, #2
 80077e8:	d836      	bhi.n	8007858 <_scanf_float+0x328>
 80077ea:	9b01      	ldr	r3, [sp, #4]
 80077ec:	429e      	cmp	r6, r3
 80077ee:	f67f aee3 	bls.w	80075b8 <_scanf_float+0x88>
 80077f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077f6:	463a      	mov	r2, r7
 80077f8:	4640      	mov	r0, r8
 80077fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077fe:	4798      	blx	r3
 8007800:	6923      	ldr	r3, [r4, #16]
 8007802:	3b01      	subs	r3, #1
 8007804:	6123      	str	r3, [r4, #16]
 8007806:	e7f0      	b.n	80077ea <_scanf_float+0x2ba>
 8007808:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800780c:	463a      	mov	r2, r7
 800780e:	4640      	mov	r0, r8
 8007810:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007814:	4798      	blx	r3
 8007816:	6923      	ldr	r3, [r4, #16]
 8007818:	3b01      	subs	r3, #1
 800781a:	6123      	str	r3, [r4, #16]
 800781c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007820:	fa5f fa8a 	uxtb.w	sl, sl
 8007824:	f1ba 0f02 	cmp.w	sl, #2
 8007828:	d1ee      	bne.n	8007808 <_scanf_float+0x2d8>
 800782a:	3d03      	subs	r5, #3
 800782c:	b2ed      	uxtb	r5, r5
 800782e:	1b76      	subs	r6, r6, r5
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	05da      	lsls	r2, r3, #23
 8007834:	d530      	bpl.n	8007898 <_scanf_float+0x368>
 8007836:	055b      	lsls	r3, r3, #21
 8007838:	d511      	bpl.n	800785e <_scanf_float+0x32e>
 800783a:	9b01      	ldr	r3, [sp, #4]
 800783c:	429e      	cmp	r6, r3
 800783e:	f67f aebb 	bls.w	80075b8 <_scanf_float+0x88>
 8007842:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007846:	463a      	mov	r2, r7
 8007848:	4640      	mov	r0, r8
 800784a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800784e:	4798      	blx	r3
 8007850:	6923      	ldr	r3, [r4, #16]
 8007852:	3b01      	subs	r3, #1
 8007854:	6123      	str	r3, [r4, #16]
 8007856:	e7f0      	b.n	800783a <_scanf_float+0x30a>
 8007858:	46aa      	mov	sl, r5
 800785a:	46b3      	mov	fp, r6
 800785c:	e7de      	b.n	800781c <_scanf_float+0x2ec>
 800785e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	2965      	cmp	r1, #101	@ 0x65
 8007866:	f103 33ff 	add.w	r3, r3, #4294967295
 800786a:	f106 35ff 	add.w	r5, r6, #4294967295
 800786e:	6123      	str	r3, [r4, #16]
 8007870:	d00c      	beq.n	800788c <_scanf_float+0x35c>
 8007872:	2945      	cmp	r1, #69	@ 0x45
 8007874:	d00a      	beq.n	800788c <_scanf_float+0x35c>
 8007876:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800787a:	463a      	mov	r2, r7
 800787c:	4640      	mov	r0, r8
 800787e:	4798      	blx	r3
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007886:	3b01      	subs	r3, #1
 8007888:	1eb5      	subs	r5, r6, #2
 800788a:	6123      	str	r3, [r4, #16]
 800788c:	463a      	mov	r2, r7
 800788e:	4640      	mov	r0, r8
 8007890:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007894:	4798      	blx	r3
 8007896:	462e      	mov	r6, r5
 8007898:	6822      	ldr	r2, [r4, #0]
 800789a:	f012 0210 	ands.w	r2, r2, #16
 800789e:	d001      	beq.n	80078a4 <_scanf_float+0x374>
 80078a0:	2000      	movs	r0, #0
 80078a2:	e68a      	b.n	80075ba <_scanf_float+0x8a>
 80078a4:	7032      	strb	r2, [r6, #0]
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80078ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078b0:	d11c      	bne.n	80078ec <_scanf_float+0x3bc>
 80078b2:	9b02      	ldr	r3, [sp, #8]
 80078b4:	454b      	cmp	r3, r9
 80078b6:	eba3 0209 	sub.w	r2, r3, r9
 80078ba:	d123      	bne.n	8007904 <_scanf_float+0x3d4>
 80078bc:	2200      	movs	r2, #0
 80078be:	4640      	mov	r0, r8
 80078c0:	9901      	ldr	r1, [sp, #4]
 80078c2:	f002 fc0d 	bl	800a0e0 <_strtod_r>
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	6825      	ldr	r5, [r4, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f015 0f02 	tst.w	r5, #2
 80078d0:	4606      	mov	r6, r0
 80078d2:	460f      	mov	r7, r1
 80078d4:	f103 0204 	add.w	r2, r3, #4
 80078d8:	d01f      	beq.n	800791a <_scanf_float+0x3ea>
 80078da:	9903      	ldr	r1, [sp, #12]
 80078dc:	600a      	str	r2, [r1, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	e9c3 6700 	strd	r6, r7, [r3]
 80078e4:	68e3      	ldr	r3, [r4, #12]
 80078e6:	3301      	adds	r3, #1
 80078e8:	60e3      	str	r3, [r4, #12]
 80078ea:	e7d9      	b.n	80078a0 <_scanf_float+0x370>
 80078ec:	9b04      	ldr	r3, [sp, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0e4      	beq.n	80078bc <_scanf_float+0x38c>
 80078f2:	9905      	ldr	r1, [sp, #20]
 80078f4:	230a      	movs	r3, #10
 80078f6:	4640      	mov	r0, r8
 80078f8:	3101      	adds	r1, #1
 80078fa:	f002 fc71 	bl	800a1e0 <_strtol_r>
 80078fe:	9b04      	ldr	r3, [sp, #16]
 8007900:	9e05      	ldr	r6, [sp, #20]
 8007902:	1ac2      	subs	r2, r0, r3
 8007904:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007908:	429e      	cmp	r6, r3
 800790a:	bf28      	it	cs
 800790c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007910:	4630      	mov	r0, r6
 8007912:	490d      	ldr	r1, [pc, #52]	@ (8007948 <_scanf_float+0x418>)
 8007914:	f000 f8de 	bl	8007ad4 <siprintf>
 8007918:	e7d0      	b.n	80078bc <_scanf_float+0x38c>
 800791a:	076d      	lsls	r5, r5, #29
 800791c:	d4dd      	bmi.n	80078da <_scanf_float+0x3aa>
 800791e:	9d03      	ldr	r5, [sp, #12]
 8007920:	602a      	str	r2, [r5, #0]
 8007922:	681d      	ldr	r5, [r3, #0]
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	f7f9 f870 	bl	8000a0c <__aeabi_dcmpun>
 800792c:	b120      	cbz	r0, 8007938 <_scanf_float+0x408>
 800792e:	4807      	ldr	r0, [pc, #28]	@ (800794c <_scanf_float+0x41c>)
 8007930:	f000 f9e2 	bl	8007cf8 <nanf>
 8007934:	6028      	str	r0, [r5, #0]
 8007936:	e7d5      	b.n	80078e4 <_scanf_float+0x3b4>
 8007938:	4630      	mov	r0, r6
 800793a:	4639      	mov	r1, r7
 800793c:	f7f9 f8c4 	bl	8000ac8 <__aeabi_d2f>
 8007940:	e7f8      	b.n	8007934 <_scanf_float+0x404>
 8007942:	f04f 0900 	mov.w	r9, #0
 8007946:	e62d      	b.n	80075a4 <_scanf_float+0x74>
 8007948:	0800bbca 	.word	0x0800bbca
 800794c:	0800bf65 	.word	0x0800bf65

08007950 <std>:
 8007950:	2300      	movs	r3, #0
 8007952:	b510      	push	{r4, lr}
 8007954:	4604      	mov	r4, r0
 8007956:	e9c0 3300 	strd	r3, r3, [r0]
 800795a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800795e:	6083      	str	r3, [r0, #8]
 8007960:	8181      	strh	r1, [r0, #12]
 8007962:	6643      	str	r3, [r0, #100]	@ 0x64
 8007964:	81c2      	strh	r2, [r0, #14]
 8007966:	6183      	str	r3, [r0, #24]
 8007968:	4619      	mov	r1, r3
 800796a:	2208      	movs	r2, #8
 800796c:	305c      	adds	r0, #92	@ 0x5c
 800796e:	f000 f914 	bl	8007b9a <memset>
 8007972:	4b0d      	ldr	r3, [pc, #52]	@ (80079a8 <std+0x58>)
 8007974:	6224      	str	r4, [r4, #32]
 8007976:	6263      	str	r3, [r4, #36]	@ 0x24
 8007978:	4b0c      	ldr	r3, [pc, #48]	@ (80079ac <std+0x5c>)
 800797a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800797c:	4b0c      	ldr	r3, [pc, #48]	@ (80079b0 <std+0x60>)
 800797e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007980:	4b0c      	ldr	r3, [pc, #48]	@ (80079b4 <std+0x64>)
 8007982:	6323      	str	r3, [r4, #48]	@ 0x30
 8007984:	4b0c      	ldr	r3, [pc, #48]	@ (80079b8 <std+0x68>)
 8007986:	429c      	cmp	r4, r3
 8007988:	d006      	beq.n	8007998 <std+0x48>
 800798a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800798e:	4294      	cmp	r4, r2
 8007990:	d002      	beq.n	8007998 <std+0x48>
 8007992:	33d0      	adds	r3, #208	@ 0xd0
 8007994:	429c      	cmp	r4, r3
 8007996:	d105      	bne.n	80079a4 <std+0x54>
 8007998:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800799c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a0:	f000 b98a 	b.w	8007cb8 <__retarget_lock_init_recursive>
 80079a4:	bd10      	pop	{r4, pc}
 80079a6:	bf00      	nop
 80079a8:	08007b15 	.word	0x08007b15
 80079ac:	08007b37 	.word	0x08007b37
 80079b0:	08007b6f 	.word	0x08007b6f
 80079b4:	08007b93 	.word	0x08007b93
 80079b8:	20000478 	.word	0x20000478

080079bc <stdio_exit_handler>:
 80079bc:	4a02      	ldr	r2, [pc, #8]	@ (80079c8 <stdio_exit_handler+0xc>)
 80079be:	4903      	ldr	r1, [pc, #12]	@ (80079cc <stdio_exit_handler+0x10>)
 80079c0:	4803      	ldr	r0, [pc, #12]	@ (80079d0 <stdio_exit_handler+0x14>)
 80079c2:	f000 b869 	b.w	8007a98 <_fwalk_sglue>
 80079c6:	bf00      	nop
 80079c8:	2000000c 	.word	0x2000000c
 80079cc:	0800a595 	.word	0x0800a595
 80079d0:	2000001c 	.word	0x2000001c

080079d4 <cleanup_stdio>:
 80079d4:	6841      	ldr	r1, [r0, #4]
 80079d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007a08 <cleanup_stdio+0x34>)
 80079d8:	b510      	push	{r4, lr}
 80079da:	4299      	cmp	r1, r3
 80079dc:	4604      	mov	r4, r0
 80079de:	d001      	beq.n	80079e4 <cleanup_stdio+0x10>
 80079e0:	f002 fdd8 	bl	800a594 <_fflush_r>
 80079e4:	68a1      	ldr	r1, [r4, #8]
 80079e6:	4b09      	ldr	r3, [pc, #36]	@ (8007a0c <cleanup_stdio+0x38>)
 80079e8:	4299      	cmp	r1, r3
 80079ea:	d002      	beq.n	80079f2 <cleanup_stdio+0x1e>
 80079ec:	4620      	mov	r0, r4
 80079ee:	f002 fdd1 	bl	800a594 <_fflush_r>
 80079f2:	68e1      	ldr	r1, [r4, #12]
 80079f4:	4b06      	ldr	r3, [pc, #24]	@ (8007a10 <cleanup_stdio+0x3c>)
 80079f6:	4299      	cmp	r1, r3
 80079f8:	d004      	beq.n	8007a04 <cleanup_stdio+0x30>
 80079fa:	4620      	mov	r0, r4
 80079fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a00:	f002 bdc8 	b.w	800a594 <_fflush_r>
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	bf00      	nop
 8007a08:	20000478 	.word	0x20000478
 8007a0c:	200004e0 	.word	0x200004e0
 8007a10:	20000548 	.word	0x20000548

08007a14 <global_stdio_init.part.0>:
 8007a14:	b510      	push	{r4, lr}
 8007a16:	4b0b      	ldr	r3, [pc, #44]	@ (8007a44 <global_stdio_init.part.0+0x30>)
 8007a18:	4c0b      	ldr	r4, [pc, #44]	@ (8007a48 <global_stdio_init.part.0+0x34>)
 8007a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a4c <global_stdio_init.part.0+0x38>)
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	2104      	movs	r1, #4
 8007a22:	2200      	movs	r2, #0
 8007a24:	f7ff ff94 	bl	8007950 <std>
 8007a28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	2109      	movs	r1, #9
 8007a30:	f7ff ff8e 	bl	8007950 <std>
 8007a34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a38:	2202      	movs	r2, #2
 8007a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a3e:	2112      	movs	r1, #18
 8007a40:	f7ff bf86 	b.w	8007950 <std>
 8007a44:	200005b0 	.word	0x200005b0
 8007a48:	20000478 	.word	0x20000478
 8007a4c:	080079bd 	.word	0x080079bd

08007a50 <__sfp_lock_acquire>:
 8007a50:	4801      	ldr	r0, [pc, #4]	@ (8007a58 <__sfp_lock_acquire+0x8>)
 8007a52:	f000 b932 	b.w	8007cba <__retarget_lock_acquire_recursive>
 8007a56:	bf00      	nop
 8007a58:	200005b9 	.word	0x200005b9

08007a5c <__sfp_lock_release>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	@ (8007a64 <__sfp_lock_release+0x8>)
 8007a5e:	f000 b92d 	b.w	8007cbc <__retarget_lock_release_recursive>
 8007a62:	bf00      	nop
 8007a64:	200005b9 	.word	0x200005b9

08007a68 <__sinit>:
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	f7ff fff0 	bl	8007a50 <__sfp_lock_acquire>
 8007a70:	6a23      	ldr	r3, [r4, #32]
 8007a72:	b11b      	cbz	r3, 8007a7c <__sinit+0x14>
 8007a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a78:	f7ff bff0 	b.w	8007a5c <__sfp_lock_release>
 8007a7c:	4b04      	ldr	r3, [pc, #16]	@ (8007a90 <__sinit+0x28>)
 8007a7e:	6223      	str	r3, [r4, #32]
 8007a80:	4b04      	ldr	r3, [pc, #16]	@ (8007a94 <__sinit+0x2c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f5      	bne.n	8007a74 <__sinit+0xc>
 8007a88:	f7ff ffc4 	bl	8007a14 <global_stdio_init.part.0>
 8007a8c:	e7f2      	b.n	8007a74 <__sinit+0xc>
 8007a8e:	bf00      	nop
 8007a90:	080079d5 	.word	0x080079d5
 8007a94:	200005b0 	.word	0x200005b0

08007a98 <_fwalk_sglue>:
 8007a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a9c:	4607      	mov	r7, r0
 8007a9e:	4688      	mov	r8, r1
 8007aa0:	4614      	mov	r4, r2
 8007aa2:	2600      	movs	r6, #0
 8007aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8007aac:	d505      	bpl.n	8007aba <_fwalk_sglue+0x22>
 8007aae:	6824      	ldr	r4, [r4, #0]
 8007ab0:	2c00      	cmp	r4, #0
 8007ab2:	d1f7      	bne.n	8007aa4 <_fwalk_sglue+0xc>
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aba:	89ab      	ldrh	r3, [r5, #12]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d907      	bls.n	8007ad0 <_fwalk_sglue+0x38>
 8007ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	d003      	beq.n	8007ad0 <_fwalk_sglue+0x38>
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4638      	mov	r0, r7
 8007acc:	47c0      	blx	r8
 8007ace:	4306      	orrs	r6, r0
 8007ad0:	3568      	adds	r5, #104	@ 0x68
 8007ad2:	e7e9      	b.n	8007aa8 <_fwalk_sglue+0x10>

08007ad4 <siprintf>:
 8007ad4:	b40e      	push	{r1, r2, r3}
 8007ad6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ada:	b500      	push	{lr}
 8007adc:	b09c      	sub	sp, #112	@ 0x70
 8007ade:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ae0:	9002      	str	r0, [sp, #8]
 8007ae2:	9006      	str	r0, [sp, #24]
 8007ae4:	9107      	str	r1, [sp, #28]
 8007ae6:	9104      	str	r1, [sp, #16]
 8007ae8:	4808      	ldr	r0, [pc, #32]	@ (8007b0c <siprintf+0x38>)
 8007aea:	4909      	ldr	r1, [pc, #36]	@ (8007b10 <siprintf+0x3c>)
 8007aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af0:	9105      	str	r1, [sp, #20]
 8007af2:	6800      	ldr	r0, [r0, #0]
 8007af4:	a902      	add	r1, sp, #8
 8007af6:	9301      	str	r3, [sp, #4]
 8007af8:	f002 fbd0 	bl	800a29c <_svfiprintf_r>
 8007afc:	2200      	movs	r2, #0
 8007afe:	9b02      	ldr	r3, [sp, #8]
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	b01c      	add	sp, #112	@ 0x70
 8007b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b08:	b003      	add	sp, #12
 8007b0a:	4770      	bx	lr
 8007b0c:	20000018 	.word	0x20000018
 8007b10:	ffff0208 	.word	0xffff0208

08007b14 <__sread>:
 8007b14:	b510      	push	{r4, lr}
 8007b16:	460c      	mov	r4, r1
 8007b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b1c:	f000 f87e 	bl	8007c1c <_read_r>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	bfab      	itete	ge
 8007b24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b26:	89a3      	ldrhlt	r3, [r4, #12]
 8007b28:	181b      	addge	r3, r3, r0
 8007b2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b2e:	bfac      	ite	ge
 8007b30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b32:	81a3      	strhlt	r3, [r4, #12]
 8007b34:	bd10      	pop	{r4, pc}

08007b36 <__swrite>:
 8007b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3a:	461f      	mov	r7, r3
 8007b3c:	898b      	ldrh	r3, [r1, #12]
 8007b3e:	4605      	mov	r5, r0
 8007b40:	05db      	lsls	r3, r3, #23
 8007b42:	460c      	mov	r4, r1
 8007b44:	4616      	mov	r6, r2
 8007b46:	d505      	bpl.n	8007b54 <__swrite+0x1e>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b50:	f000 f852 	bl	8007bf8 <_lseek_r>
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	4632      	mov	r2, r6
 8007b58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	4628      	mov	r0, r5
 8007b60:	463b      	mov	r3, r7
 8007b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6a:	f000 b869 	b.w	8007c40 <_write_r>

08007b6e <__sseek>:
 8007b6e:	b510      	push	{r4, lr}
 8007b70:	460c      	mov	r4, r1
 8007b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b76:	f000 f83f 	bl	8007bf8 <_lseek_r>
 8007b7a:	1c43      	adds	r3, r0, #1
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	bf15      	itete	ne
 8007b80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b8a:	81a3      	strheq	r3, [r4, #12]
 8007b8c:	bf18      	it	ne
 8007b8e:	81a3      	strhne	r3, [r4, #12]
 8007b90:	bd10      	pop	{r4, pc}

08007b92 <__sclose>:
 8007b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b96:	f000 b81f 	b.w	8007bd8 <_close_r>

08007b9a <memset>:
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	4402      	add	r2, r0
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d100      	bne.n	8007ba4 <memset+0xa>
 8007ba2:	4770      	bx	lr
 8007ba4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ba8:	e7f9      	b.n	8007b9e <memset+0x4>

08007baa <strncmp>:
 8007baa:	b510      	push	{r4, lr}
 8007bac:	b16a      	cbz	r2, 8007bca <strncmp+0x20>
 8007bae:	3901      	subs	r1, #1
 8007bb0:	1884      	adds	r4, r0, r2
 8007bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bb6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d103      	bne.n	8007bc6 <strncmp+0x1c>
 8007bbe:	42a0      	cmp	r0, r4
 8007bc0:	d001      	beq.n	8007bc6 <strncmp+0x1c>
 8007bc2:	2a00      	cmp	r2, #0
 8007bc4:	d1f5      	bne.n	8007bb2 <strncmp+0x8>
 8007bc6:	1ad0      	subs	r0, r2, r3
 8007bc8:	bd10      	pop	{r4, pc}
 8007bca:	4610      	mov	r0, r2
 8007bcc:	e7fc      	b.n	8007bc8 <strncmp+0x1e>
	...

08007bd0 <_localeconv_r>:
 8007bd0:	4800      	ldr	r0, [pc, #0]	@ (8007bd4 <_localeconv_r+0x4>)
 8007bd2:	4770      	bx	lr
 8007bd4:	20000158 	.word	0x20000158

08007bd8 <_close_r>:
 8007bd8:	b538      	push	{r3, r4, r5, lr}
 8007bda:	2300      	movs	r3, #0
 8007bdc:	4d05      	ldr	r5, [pc, #20]	@ (8007bf4 <_close_r+0x1c>)
 8007bde:	4604      	mov	r4, r0
 8007be0:	4608      	mov	r0, r1
 8007be2:	602b      	str	r3, [r5, #0]
 8007be4:	f7fb fa1b 	bl	800301e <_close>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_close_r+0x1a>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_close_r+0x1a>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	200005b4 	.word	0x200005b4

08007bf8 <_lseek_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	4611      	mov	r1, r2
 8007c00:	2200      	movs	r2, #0
 8007c02:	4d05      	ldr	r5, [pc, #20]	@ (8007c18 <_lseek_r+0x20>)
 8007c04:	602a      	str	r2, [r5, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	f7fb fa2d 	bl	8003066 <_lseek>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_lseek_r+0x1e>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_lseek_r+0x1e>
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	200005b4 	.word	0x200005b4

08007c1c <_read_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	4611      	mov	r1, r2
 8007c24:	2200      	movs	r2, #0
 8007c26:	4d05      	ldr	r5, [pc, #20]	@ (8007c3c <_read_r+0x20>)
 8007c28:	602a      	str	r2, [r5, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f7fb f9be 	bl	8002fac <_read>
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d102      	bne.n	8007c3a <_read_r+0x1e>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	b103      	cbz	r3, 8007c3a <_read_r+0x1e>
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	200005b4 	.word	0x200005b4

08007c40 <_write_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	4611      	mov	r1, r2
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4d05      	ldr	r5, [pc, #20]	@ (8007c60 <_write_r+0x20>)
 8007c4c:	602a      	str	r2, [r5, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f7fb f9c9 	bl	8002fe6 <_write>
 8007c54:	1c43      	adds	r3, r0, #1
 8007c56:	d102      	bne.n	8007c5e <_write_r+0x1e>
 8007c58:	682b      	ldr	r3, [r5, #0]
 8007c5a:	b103      	cbz	r3, 8007c5e <_write_r+0x1e>
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	bd38      	pop	{r3, r4, r5, pc}
 8007c60:	200005b4 	.word	0x200005b4

08007c64 <__errno>:
 8007c64:	4b01      	ldr	r3, [pc, #4]	@ (8007c6c <__errno+0x8>)
 8007c66:	6818      	ldr	r0, [r3, #0]
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	20000018 	.word	0x20000018

08007c70 <__libc_init_array>:
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	2600      	movs	r6, #0
 8007c74:	4d0c      	ldr	r5, [pc, #48]	@ (8007ca8 <__libc_init_array+0x38>)
 8007c76:	4c0d      	ldr	r4, [pc, #52]	@ (8007cac <__libc_init_array+0x3c>)
 8007c78:	1b64      	subs	r4, r4, r5
 8007c7a:	10a4      	asrs	r4, r4, #2
 8007c7c:	42a6      	cmp	r6, r4
 8007c7e:	d109      	bne.n	8007c94 <__libc_init_array+0x24>
 8007c80:	f003 fb54 	bl	800b32c <_init>
 8007c84:	2600      	movs	r6, #0
 8007c86:	4d0a      	ldr	r5, [pc, #40]	@ (8007cb0 <__libc_init_array+0x40>)
 8007c88:	4c0a      	ldr	r4, [pc, #40]	@ (8007cb4 <__libc_init_array+0x44>)
 8007c8a:	1b64      	subs	r4, r4, r5
 8007c8c:	10a4      	asrs	r4, r4, #2
 8007c8e:	42a6      	cmp	r6, r4
 8007c90:	d105      	bne.n	8007c9e <__libc_init_array+0x2e>
 8007c92:	bd70      	pop	{r4, r5, r6, pc}
 8007c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c98:	4798      	blx	r3
 8007c9a:	3601      	adds	r6, #1
 8007c9c:	e7ee      	b.n	8007c7c <__libc_init_array+0xc>
 8007c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca2:	4798      	blx	r3
 8007ca4:	3601      	adds	r6, #1
 8007ca6:	e7f2      	b.n	8007c8e <__libc_init_array+0x1e>
 8007ca8:	0800bfd0 	.word	0x0800bfd0
 8007cac:	0800bfd0 	.word	0x0800bfd0
 8007cb0:	0800bfd0 	.word	0x0800bfd0
 8007cb4:	0800bfd4 	.word	0x0800bfd4

08007cb8 <__retarget_lock_init_recursive>:
 8007cb8:	4770      	bx	lr

08007cba <__retarget_lock_acquire_recursive>:
 8007cba:	4770      	bx	lr

08007cbc <__retarget_lock_release_recursive>:
 8007cbc:	4770      	bx	lr

08007cbe <memchr>:
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	b2c9      	uxtb	r1, r1
 8007cc4:	4402      	add	r2, r0
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	d101      	bne.n	8007cd0 <memchr+0x12>
 8007ccc:	2000      	movs	r0, #0
 8007cce:	e003      	b.n	8007cd8 <memchr+0x1a>
 8007cd0:	7804      	ldrb	r4, [r0, #0]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	428c      	cmp	r4, r1
 8007cd6:	d1f6      	bne.n	8007cc6 <memchr+0x8>
 8007cd8:	bd10      	pop	{r4, pc}

08007cda <memcpy>:
 8007cda:	440a      	add	r2, r1
 8007cdc:	4291      	cmp	r1, r2
 8007cde:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ce2:	d100      	bne.n	8007ce6 <memcpy+0xc>
 8007ce4:	4770      	bx	lr
 8007ce6:	b510      	push	{r4, lr}
 8007ce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cec:	4291      	cmp	r1, r2
 8007cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cf2:	d1f9      	bne.n	8007ce8 <memcpy+0xe>
 8007cf4:	bd10      	pop	{r4, pc}
	...

08007cf8 <nanf>:
 8007cf8:	4800      	ldr	r0, [pc, #0]	@ (8007cfc <nanf+0x4>)
 8007cfa:	4770      	bx	lr
 8007cfc:	7fc00000 	.word	0x7fc00000

08007d00 <quorem>:
 8007d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	6903      	ldr	r3, [r0, #16]
 8007d06:	690c      	ldr	r4, [r1, #16]
 8007d08:	4607      	mov	r7, r0
 8007d0a:	42a3      	cmp	r3, r4
 8007d0c:	db7e      	blt.n	8007e0c <quorem+0x10c>
 8007d0e:	3c01      	subs	r4, #1
 8007d10:	00a3      	lsls	r3, r4, #2
 8007d12:	f100 0514 	add.w	r5, r0, #20
 8007d16:	f101 0814 	add.w	r8, r1, #20
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d20:	9301      	str	r3, [sp, #4]
 8007d22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d36:	d32e      	bcc.n	8007d96 <quorem+0x96>
 8007d38:	f04f 0a00 	mov.w	sl, #0
 8007d3c:	46c4      	mov	ip, r8
 8007d3e:	46ae      	mov	lr, r5
 8007d40:	46d3      	mov	fp, sl
 8007d42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d46:	b298      	uxth	r0, r3
 8007d48:	fb06 a000 	mla	r0, r6, r0, sl
 8007d4c:	0c1b      	lsrs	r3, r3, #16
 8007d4e:	0c02      	lsrs	r2, r0, #16
 8007d50:	fb06 2303 	mla	r3, r6, r3, r2
 8007d54:	f8de 2000 	ldr.w	r2, [lr]
 8007d58:	b280      	uxth	r0, r0
 8007d5a:	b292      	uxth	r2, r2
 8007d5c:	1a12      	subs	r2, r2, r0
 8007d5e:	445a      	add	r2, fp
 8007d60:	f8de 0000 	ldr.w	r0, [lr]
 8007d64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d72:	b292      	uxth	r2, r2
 8007d74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d78:	45e1      	cmp	r9, ip
 8007d7a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d7e:	f84e 2b04 	str.w	r2, [lr], #4
 8007d82:	d2de      	bcs.n	8007d42 <quorem+0x42>
 8007d84:	9b00      	ldr	r3, [sp, #0]
 8007d86:	58eb      	ldr	r3, [r5, r3]
 8007d88:	b92b      	cbnz	r3, 8007d96 <quorem+0x96>
 8007d8a:	9b01      	ldr	r3, [sp, #4]
 8007d8c:	3b04      	subs	r3, #4
 8007d8e:	429d      	cmp	r5, r3
 8007d90:	461a      	mov	r2, r3
 8007d92:	d32f      	bcc.n	8007df4 <quorem+0xf4>
 8007d94:	613c      	str	r4, [r7, #16]
 8007d96:	4638      	mov	r0, r7
 8007d98:	f001 f9c2 	bl	8009120 <__mcmp>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	db25      	blt.n	8007dec <quorem+0xec>
 8007da0:	4629      	mov	r1, r5
 8007da2:	2000      	movs	r0, #0
 8007da4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007da8:	f8d1 c000 	ldr.w	ip, [r1]
 8007dac:	fa1f fe82 	uxth.w	lr, r2
 8007db0:	fa1f f38c 	uxth.w	r3, ip
 8007db4:	eba3 030e 	sub.w	r3, r3, lr
 8007db8:	4403      	add	r3, r0
 8007dba:	0c12      	lsrs	r2, r2, #16
 8007dbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007dc0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dca:	45c1      	cmp	r9, r8
 8007dcc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007dd0:	f841 3b04 	str.w	r3, [r1], #4
 8007dd4:	d2e6      	bcs.n	8007da4 <quorem+0xa4>
 8007dd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dde:	b922      	cbnz	r2, 8007dea <quorem+0xea>
 8007de0:	3b04      	subs	r3, #4
 8007de2:	429d      	cmp	r5, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	d30b      	bcc.n	8007e00 <quorem+0x100>
 8007de8:	613c      	str	r4, [r7, #16]
 8007dea:	3601      	adds	r6, #1
 8007dec:	4630      	mov	r0, r6
 8007dee:	b003      	add	sp, #12
 8007df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df4:	6812      	ldr	r2, [r2, #0]
 8007df6:	3b04      	subs	r3, #4
 8007df8:	2a00      	cmp	r2, #0
 8007dfa:	d1cb      	bne.n	8007d94 <quorem+0x94>
 8007dfc:	3c01      	subs	r4, #1
 8007dfe:	e7c6      	b.n	8007d8e <quorem+0x8e>
 8007e00:	6812      	ldr	r2, [r2, #0]
 8007e02:	3b04      	subs	r3, #4
 8007e04:	2a00      	cmp	r2, #0
 8007e06:	d1ef      	bne.n	8007de8 <quorem+0xe8>
 8007e08:	3c01      	subs	r4, #1
 8007e0a:	e7ea      	b.n	8007de2 <quorem+0xe2>
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	e7ee      	b.n	8007dee <quorem+0xee>

08007e10 <_dtoa_r>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	4614      	mov	r4, r2
 8007e16:	461d      	mov	r5, r3
 8007e18:	69c7      	ldr	r7, [r0, #28]
 8007e1a:	b097      	sub	sp, #92	@ 0x5c
 8007e1c:	4683      	mov	fp, r0
 8007e1e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007e22:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007e24:	b97f      	cbnz	r7, 8007e46 <_dtoa_r+0x36>
 8007e26:	2010      	movs	r0, #16
 8007e28:	f000 fe02 	bl	8008a30 <malloc>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007e32:	b920      	cbnz	r0, 8007e3e <_dtoa_r+0x2e>
 8007e34:	21ef      	movs	r1, #239	@ 0xef
 8007e36:	4ba8      	ldr	r3, [pc, #672]	@ (80080d8 <_dtoa_r+0x2c8>)
 8007e38:	48a8      	ldr	r0, [pc, #672]	@ (80080dc <_dtoa_r+0x2cc>)
 8007e3a:	f002 fc03 	bl	800a644 <__assert_func>
 8007e3e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e42:	6007      	str	r7, [r0, #0]
 8007e44:	60c7      	str	r7, [r0, #12]
 8007e46:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e4a:	6819      	ldr	r1, [r3, #0]
 8007e4c:	b159      	cbz	r1, 8007e66 <_dtoa_r+0x56>
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	2301      	movs	r3, #1
 8007e52:	4093      	lsls	r3, r2
 8007e54:	604a      	str	r2, [r1, #4]
 8007e56:	608b      	str	r3, [r1, #8]
 8007e58:	4658      	mov	r0, fp
 8007e5a:	f000 fedf 	bl	8008c1c <_Bfree>
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	1e2b      	subs	r3, r5, #0
 8007e68:	bfaf      	iteee	ge
 8007e6a:	2300      	movge	r3, #0
 8007e6c:	2201      	movlt	r2, #1
 8007e6e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e72:	9303      	strlt	r3, [sp, #12]
 8007e74:	bfa8      	it	ge
 8007e76:	6033      	strge	r3, [r6, #0]
 8007e78:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007e7c:	4b98      	ldr	r3, [pc, #608]	@ (80080e0 <_dtoa_r+0x2d0>)
 8007e7e:	bfb8      	it	lt
 8007e80:	6032      	strlt	r2, [r6, #0]
 8007e82:	ea33 0308 	bics.w	r3, r3, r8
 8007e86:	d112      	bne.n	8007eae <_dtoa_r+0x9e>
 8007e88:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e8c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007e94:	4323      	orrs	r3, r4
 8007e96:	f000 8550 	beq.w	800893a <_dtoa_r+0xb2a>
 8007e9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e9c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80080e4 <_dtoa_r+0x2d4>
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 8552 	beq.w	800894a <_dtoa_r+0xb3a>
 8007ea6:	f10a 0303 	add.w	r3, sl, #3
 8007eaa:	f000 bd4c 	b.w	8008946 <_dtoa_r+0xb36>
 8007eae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007eb2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f7f8 fd73 	bl	80009a8 <__aeabi_dcmpeq>
 8007ec2:	4607      	mov	r7, r0
 8007ec4:	b158      	cbz	r0, 8007ede <_dtoa_r+0xce>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007ece:	b113      	cbz	r3, 8007ed6 <_dtoa_r+0xc6>
 8007ed0:	4b85      	ldr	r3, [pc, #532]	@ (80080e8 <_dtoa_r+0x2d8>)
 8007ed2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80080ec <_dtoa_r+0x2dc>
 8007eda:	f000 bd36 	b.w	800894a <_dtoa_r+0xb3a>
 8007ede:	ab14      	add	r3, sp, #80	@ 0x50
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	ab15      	add	r3, sp, #84	@ 0x54
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	4658      	mov	r0, fp
 8007ee8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007eec:	f001 fa30 	bl	8009350 <__d2b>
 8007ef0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007ef4:	4681      	mov	r9, r0
 8007ef6:	2e00      	cmp	r6, #0
 8007ef8:	d077      	beq.n	8007fea <_dtoa_r+0x1da>
 8007efa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007efe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f00:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f08:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f0c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f10:	9712      	str	r7, [sp, #72]	@ 0x48
 8007f12:	4619      	mov	r1, r3
 8007f14:	2200      	movs	r2, #0
 8007f16:	4b76      	ldr	r3, [pc, #472]	@ (80080f0 <_dtoa_r+0x2e0>)
 8007f18:	f7f8 f926 	bl	8000168 <__aeabi_dsub>
 8007f1c:	a368      	add	r3, pc, #416	@ (adr r3, 80080c0 <_dtoa_r+0x2b0>)
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	f7f8 fad9 	bl	80004d8 <__aeabi_dmul>
 8007f26:	a368      	add	r3, pc, #416	@ (adr r3, 80080c8 <_dtoa_r+0x2b8>)
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f7f8 f91e 	bl	800016c <__adddf3>
 8007f30:	4604      	mov	r4, r0
 8007f32:	4630      	mov	r0, r6
 8007f34:	460d      	mov	r5, r1
 8007f36:	f7f8 fa65 	bl	8000404 <__aeabi_i2d>
 8007f3a:	a365      	add	r3, pc, #404	@ (adr r3, 80080d0 <_dtoa_r+0x2c0>)
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f7f8 faca 	bl	80004d8 <__aeabi_dmul>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4620      	mov	r0, r4
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	f7f8 f90e 	bl	800016c <__adddf3>
 8007f50:	4604      	mov	r4, r0
 8007f52:	460d      	mov	r5, r1
 8007f54:	f7f8 fd70 	bl	8000a38 <__aeabi_d2iz>
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4607      	mov	r7, r0
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	f7f8 fd2b 	bl	80009bc <__aeabi_dcmplt>
 8007f66:	b140      	cbz	r0, 8007f7a <_dtoa_r+0x16a>
 8007f68:	4638      	mov	r0, r7
 8007f6a:	f7f8 fa4b 	bl	8000404 <__aeabi_i2d>
 8007f6e:	4622      	mov	r2, r4
 8007f70:	462b      	mov	r3, r5
 8007f72:	f7f8 fd19 	bl	80009a8 <__aeabi_dcmpeq>
 8007f76:	b900      	cbnz	r0, 8007f7a <_dtoa_r+0x16a>
 8007f78:	3f01      	subs	r7, #1
 8007f7a:	2f16      	cmp	r7, #22
 8007f7c:	d853      	bhi.n	8008026 <_dtoa_r+0x216>
 8007f7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f82:	4b5c      	ldr	r3, [pc, #368]	@ (80080f4 <_dtoa_r+0x2e4>)
 8007f84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f7f8 fd16 	bl	80009bc <__aeabi_dcmplt>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d04a      	beq.n	800802a <_dtoa_r+0x21a>
 8007f94:	2300      	movs	r3, #0
 8007f96:	3f01      	subs	r7, #1
 8007f98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f9c:	1b9b      	subs	r3, r3, r6
 8007f9e:	1e5a      	subs	r2, r3, #1
 8007fa0:	bf46      	itte	mi
 8007fa2:	f1c3 0801 	rsbmi	r8, r3, #1
 8007fa6:	2300      	movmi	r3, #0
 8007fa8:	f04f 0800 	movpl.w	r8, #0
 8007fac:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fae:	bf48      	it	mi
 8007fb0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007fb2:	2f00      	cmp	r7, #0
 8007fb4:	db3b      	blt.n	800802e <_dtoa_r+0x21e>
 8007fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb8:	970e      	str	r7, [sp, #56]	@ 0x38
 8007fba:	443b      	add	r3, r7
 8007fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fc4:	2b09      	cmp	r3, #9
 8007fc6:	d866      	bhi.n	8008096 <_dtoa_r+0x286>
 8007fc8:	2b05      	cmp	r3, #5
 8007fca:	bfc4      	itt	gt
 8007fcc:	3b04      	subgt	r3, #4
 8007fce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007fd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fd2:	bfc8      	it	gt
 8007fd4:	2400      	movgt	r4, #0
 8007fd6:	f1a3 0302 	sub.w	r3, r3, #2
 8007fda:	bfd8      	it	le
 8007fdc:	2401      	movle	r4, #1
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d864      	bhi.n	80080ac <_dtoa_r+0x29c>
 8007fe2:	e8df f003 	tbb	[pc, r3]
 8007fe6:	382b      	.short	0x382b
 8007fe8:	5636      	.short	0x5636
 8007fea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007fee:	441e      	add	r6, r3
 8007ff0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ff4:	2b20      	cmp	r3, #32
 8007ff6:	bfc1      	itttt	gt
 8007ff8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ffc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008000:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008004:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008008:	bfd6      	itet	le
 800800a:	f1c3 0320 	rsble	r3, r3, #32
 800800e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008012:	fa04 f003 	lslle.w	r0, r4, r3
 8008016:	f7f8 f9e5 	bl	80003e4 <__aeabi_ui2d>
 800801a:	2201      	movs	r2, #1
 800801c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008020:	3e01      	subs	r6, #1
 8008022:	9212      	str	r2, [sp, #72]	@ 0x48
 8008024:	e775      	b.n	8007f12 <_dtoa_r+0x102>
 8008026:	2301      	movs	r3, #1
 8008028:	e7b6      	b.n	8007f98 <_dtoa_r+0x188>
 800802a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800802c:	e7b5      	b.n	8007f9a <_dtoa_r+0x18a>
 800802e:	427b      	negs	r3, r7
 8008030:	930a      	str	r3, [sp, #40]	@ 0x28
 8008032:	2300      	movs	r3, #0
 8008034:	eba8 0807 	sub.w	r8, r8, r7
 8008038:	930e      	str	r3, [sp, #56]	@ 0x38
 800803a:	e7c2      	b.n	8007fc2 <_dtoa_r+0x1b2>
 800803c:	2300      	movs	r3, #0
 800803e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008040:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008042:	2b00      	cmp	r3, #0
 8008044:	dc35      	bgt.n	80080b2 <_dtoa_r+0x2a2>
 8008046:	2301      	movs	r3, #1
 8008048:	461a      	mov	r2, r3
 800804a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800804e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008050:	e00b      	b.n	800806a <_dtoa_r+0x25a>
 8008052:	2301      	movs	r3, #1
 8008054:	e7f3      	b.n	800803e <_dtoa_r+0x22e>
 8008056:	2300      	movs	r3, #0
 8008058:	930b      	str	r3, [sp, #44]	@ 0x2c
 800805a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800805c:	18fb      	adds	r3, r7, r3
 800805e:	9308      	str	r3, [sp, #32]
 8008060:	3301      	adds	r3, #1
 8008062:	2b01      	cmp	r3, #1
 8008064:	9307      	str	r3, [sp, #28]
 8008066:	bfb8      	it	lt
 8008068:	2301      	movlt	r3, #1
 800806a:	2100      	movs	r1, #0
 800806c:	2204      	movs	r2, #4
 800806e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008072:	f102 0514 	add.w	r5, r2, #20
 8008076:	429d      	cmp	r5, r3
 8008078:	d91f      	bls.n	80080ba <_dtoa_r+0x2aa>
 800807a:	6041      	str	r1, [r0, #4]
 800807c:	4658      	mov	r0, fp
 800807e:	f000 fd8d 	bl	8008b9c <_Balloc>
 8008082:	4682      	mov	sl, r0
 8008084:	2800      	cmp	r0, #0
 8008086:	d139      	bne.n	80080fc <_dtoa_r+0x2ec>
 8008088:	4602      	mov	r2, r0
 800808a:	f240 11af 	movw	r1, #431	@ 0x1af
 800808e:	4b1a      	ldr	r3, [pc, #104]	@ (80080f8 <_dtoa_r+0x2e8>)
 8008090:	e6d2      	b.n	8007e38 <_dtoa_r+0x28>
 8008092:	2301      	movs	r3, #1
 8008094:	e7e0      	b.n	8008058 <_dtoa_r+0x248>
 8008096:	2401      	movs	r4, #1
 8008098:	2300      	movs	r3, #0
 800809a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800809c:	9320      	str	r3, [sp, #128]	@ 0x80
 800809e:	f04f 33ff 	mov.w	r3, #4294967295
 80080a2:	2200      	movs	r2, #0
 80080a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80080a8:	2312      	movs	r3, #18
 80080aa:	e7d0      	b.n	800804e <_dtoa_r+0x23e>
 80080ac:	2301      	movs	r3, #1
 80080ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080b0:	e7f5      	b.n	800809e <_dtoa_r+0x28e>
 80080b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80080b8:	e7d7      	b.n	800806a <_dtoa_r+0x25a>
 80080ba:	3101      	adds	r1, #1
 80080bc:	0052      	lsls	r2, r2, #1
 80080be:	e7d8      	b.n	8008072 <_dtoa_r+0x262>
 80080c0:	636f4361 	.word	0x636f4361
 80080c4:	3fd287a7 	.word	0x3fd287a7
 80080c8:	8b60c8b3 	.word	0x8b60c8b3
 80080cc:	3fc68a28 	.word	0x3fc68a28
 80080d0:	509f79fb 	.word	0x509f79fb
 80080d4:	3fd34413 	.word	0x3fd34413
 80080d8:	0800bbdc 	.word	0x0800bbdc
 80080dc:	0800bbf3 	.word	0x0800bbf3
 80080e0:	7ff00000 	.word	0x7ff00000
 80080e4:	0800bbd8 	.word	0x0800bbd8
 80080e8:	0800bba7 	.word	0x0800bba7
 80080ec:	0800bba6 	.word	0x0800bba6
 80080f0:	3ff80000 	.word	0x3ff80000
 80080f4:	0800bcf0 	.word	0x0800bcf0
 80080f8:	0800bc4b 	.word	0x0800bc4b
 80080fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008100:	6018      	str	r0, [r3, #0]
 8008102:	9b07      	ldr	r3, [sp, #28]
 8008104:	2b0e      	cmp	r3, #14
 8008106:	f200 80a4 	bhi.w	8008252 <_dtoa_r+0x442>
 800810a:	2c00      	cmp	r4, #0
 800810c:	f000 80a1 	beq.w	8008252 <_dtoa_r+0x442>
 8008110:	2f00      	cmp	r7, #0
 8008112:	dd33      	ble.n	800817c <_dtoa_r+0x36c>
 8008114:	4b86      	ldr	r3, [pc, #536]	@ (8008330 <_dtoa_r+0x520>)
 8008116:	f007 020f 	and.w	r2, r7, #15
 800811a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800811e:	05f8      	lsls	r0, r7, #23
 8008120:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008124:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008128:	ea4f 1427 	mov.w	r4, r7, asr #4
 800812c:	d516      	bpl.n	800815c <_dtoa_r+0x34c>
 800812e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008132:	4b80      	ldr	r3, [pc, #512]	@ (8008334 <_dtoa_r+0x524>)
 8008134:	2603      	movs	r6, #3
 8008136:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800813a:	f7f8 faf7 	bl	800072c <__aeabi_ddiv>
 800813e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008142:	f004 040f 	and.w	r4, r4, #15
 8008146:	4d7b      	ldr	r5, [pc, #492]	@ (8008334 <_dtoa_r+0x524>)
 8008148:	b954      	cbnz	r4, 8008160 <_dtoa_r+0x350>
 800814a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800814e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008152:	f7f8 faeb 	bl	800072c <__aeabi_ddiv>
 8008156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800815a:	e028      	b.n	80081ae <_dtoa_r+0x39e>
 800815c:	2602      	movs	r6, #2
 800815e:	e7f2      	b.n	8008146 <_dtoa_r+0x336>
 8008160:	07e1      	lsls	r1, r4, #31
 8008162:	d508      	bpl.n	8008176 <_dtoa_r+0x366>
 8008164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008168:	e9d5 2300 	ldrd	r2, r3, [r5]
 800816c:	f7f8 f9b4 	bl	80004d8 <__aeabi_dmul>
 8008170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008174:	3601      	adds	r6, #1
 8008176:	1064      	asrs	r4, r4, #1
 8008178:	3508      	adds	r5, #8
 800817a:	e7e5      	b.n	8008148 <_dtoa_r+0x338>
 800817c:	f000 80d2 	beq.w	8008324 <_dtoa_r+0x514>
 8008180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008184:	427c      	negs	r4, r7
 8008186:	4b6a      	ldr	r3, [pc, #424]	@ (8008330 <_dtoa_r+0x520>)
 8008188:	f004 020f 	and.w	r2, r4, #15
 800818c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	f7f8 f9a0 	bl	80004d8 <__aeabi_dmul>
 8008198:	2602      	movs	r6, #2
 800819a:	2300      	movs	r3, #0
 800819c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081a0:	4d64      	ldr	r5, [pc, #400]	@ (8008334 <_dtoa_r+0x524>)
 80081a2:	1124      	asrs	r4, r4, #4
 80081a4:	2c00      	cmp	r4, #0
 80081a6:	f040 80b2 	bne.w	800830e <_dtoa_r+0x4fe>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1d3      	bne.n	8008156 <_dtoa_r+0x346>
 80081ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80081b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f000 80b7 	beq.w	8008328 <_dtoa_r+0x518>
 80081ba:	2200      	movs	r2, #0
 80081bc:	4620      	mov	r0, r4
 80081be:	4629      	mov	r1, r5
 80081c0:	4b5d      	ldr	r3, [pc, #372]	@ (8008338 <_dtoa_r+0x528>)
 80081c2:	f7f8 fbfb 	bl	80009bc <__aeabi_dcmplt>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	f000 80ae 	beq.w	8008328 <_dtoa_r+0x518>
 80081cc:	9b07      	ldr	r3, [sp, #28]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 80aa 	beq.w	8008328 <_dtoa_r+0x518>
 80081d4:	9b08      	ldr	r3, [sp, #32]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	dd37      	ble.n	800824a <_dtoa_r+0x43a>
 80081da:	1e7b      	subs	r3, r7, #1
 80081dc:	4620      	mov	r0, r4
 80081de:	9304      	str	r3, [sp, #16]
 80081e0:	2200      	movs	r2, #0
 80081e2:	4629      	mov	r1, r5
 80081e4:	4b55      	ldr	r3, [pc, #340]	@ (800833c <_dtoa_r+0x52c>)
 80081e6:	f7f8 f977 	bl	80004d8 <__aeabi_dmul>
 80081ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081ee:	9c08      	ldr	r4, [sp, #32]
 80081f0:	3601      	adds	r6, #1
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7f8 f906 	bl	8000404 <__aeabi_i2d>
 80081f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081fc:	f7f8 f96c 	bl	80004d8 <__aeabi_dmul>
 8008200:	2200      	movs	r2, #0
 8008202:	4b4f      	ldr	r3, [pc, #316]	@ (8008340 <_dtoa_r+0x530>)
 8008204:	f7f7 ffb2 	bl	800016c <__adddf3>
 8008208:	4605      	mov	r5, r0
 800820a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800820e:	2c00      	cmp	r4, #0
 8008210:	f040 809a 	bne.w	8008348 <_dtoa_r+0x538>
 8008214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008218:	2200      	movs	r2, #0
 800821a:	4b4a      	ldr	r3, [pc, #296]	@ (8008344 <_dtoa_r+0x534>)
 800821c:	f7f7 ffa4 	bl	8000168 <__aeabi_dsub>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008228:	462a      	mov	r2, r5
 800822a:	4633      	mov	r3, r6
 800822c:	f7f8 fbe4 	bl	80009f8 <__aeabi_dcmpgt>
 8008230:	2800      	cmp	r0, #0
 8008232:	f040 828e 	bne.w	8008752 <_dtoa_r+0x942>
 8008236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800823a:	462a      	mov	r2, r5
 800823c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008240:	f7f8 fbbc 	bl	80009bc <__aeabi_dcmplt>
 8008244:	2800      	cmp	r0, #0
 8008246:	f040 8127 	bne.w	8008498 <_dtoa_r+0x688>
 800824a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800824e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008252:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008254:	2b00      	cmp	r3, #0
 8008256:	f2c0 8163 	blt.w	8008520 <_dtoa_r+0x710>
 800825a:	2f0e      	cmp	r7, #14
 800825c:	f300 8160 	bgt.w	8008520 <_dtoa_r+0x710>
 8008260:	4b33      	ldr	r3, [pc, #204]	@ (8008330 <_dtoa_r+0x520>)
 8008262:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008266:	e9d3 3400 	ldrd	r3, r4, [r3]
 800826a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800826e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008270:	2b00      	cmp	r3, #0
 8008272:	da03      	bge.n	800827c <_dtoa_r+0x46c>
 8008274:	9b07      	ldr	r3, [sp, #28]
 8008276:	2b00      	cmp	r3, #0
 8008278:	f340 8100 	ble.w	800847c <_dtoa_r+0x66c>
 800827c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008280:	4656      	mov	r6, sl
 8008282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008286:	4620      	mov	r0, r4
 8008288:	4629      	mov	r1, r5
 800828a:	f7f8 fa4f 	bl	800072c <__aeabi_ddiv>
 800828e:	f7f8 fbd3 	bl	8000a38 <__aeabi_d2iz>
 8008292:	4680      	mov	r8, r0
 8008294:	f7f8 f8b6 	bl	8000404 <__aeabi_i2d>
 8008298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800829c:	f7f8 f91c 	bl	80004d8 <__aeabi_dmul>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4620      	mov	r0, r4
 80082a6:	4629      	mov	r1, r5
 80082a8:	f7f7 ff5e 	bl	8000168 <__aeabi_dsub>
 80082ac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80082b0:	9d07      	ldr	r5, [sp, #28]
 80082b2:	f806 4b01 	strb.w	r4, [r6], #1
 80082b6:	eba6 040a 	sub.w	r4, r6, sl
 80082ba:	42a5      	cmp	r5, r4
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	f040 8116 	bne.w	80084f0 <_dtoa_r+0x6e0>
 80082c4:	f7f7 ff52 	bl	800016c <__adddf3>
 80082c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082cc:	4604      	mov	r4, r0
 80082ce:	460d      	mov	r5, r1
 80082d0:	f7f8 fb92 	bl	80009f8 <__aeabi_dcmpgt>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	f040 80f8 	bne.w	80084ca <_dtoa_r+0x6ba>
 80082da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7f8 fb61 	bl	80009a8 <__aeabi_dcmpeq>
 80082e6:	b118      	cbz	r0, 80082f0 <_dtoa_r+0x4e0>
 80082e8:	f018 0f01 	tst.w	r8, #1
 80082ec:	f040 80ed 	bne.w	80084ca <_dtoa_r+0x6ba>
 80082f0:	4649      	mov	r1, r9
 80082f2:	4658      	mov	r0, fp
 80082f4:	f000 fc92 	bl	8008c1c <_Bfree>
 80082f8:	2300      	movs	r3, #0
 80082fa:	7033      	strb	r3, [r6, #0]
 80082fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80082fe:	3701      	adds	r7, #1
 8008300:	601f      	str	r7, [r3, #0]
 8008302:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 8320 	beq.w	800894a <_dtoa_r+0xb3a>
 800830a:	601e      	str	r6, [r3, #0]
 800830c:	e31d      	b.n	800894a <_dtoa_r+0xb3a>
 800830e:	07e2      	lsls	r2, r4, #31
 8008310:	d505      	bpl.n	800831e <_dtoa_r+0x50e>
 8008312:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008316:	f7f8 f8df 	bl	80004d8 <__aeabi_dmul>
 800831a:	2301      	movs	r3, #1
 800831c:	3601      	adds	r6, #1
 800831e:	1064      	asrs	r4, r4, #1
 8008320:	3508      	adds	r5, #8
 8008322:	e73f      	b.n	80081a4 <_dtoa_r+0x394>
 8008324:	2602      	movs	r6, #2
 8008326:	e742      	b.n	80081ae <_dtoa_r+0x39e>
 8008328:	9c07      	ldr	r4, [sp, #28]
 800832a:	9704      	str	r7, [sp, #16]
 800832c:	e761      	b.n	80081f2 <_dtoa_r+0x3e2>
 800832e:	bf00      	nop
 8008330:	0800bcf0 	.word	0x0800bcf0
 8008334:	0800bcc8 	.word	0x0800bcc8
 8008338:	3ff00000 	.word	0x3ff00000
 800833c:	40240000 	.word	0x40240000
 8008340:	401c0000 	.word	0x401c0000
 8008344:	40140000 	.word	0x40140000
 8008348:	4b70      	ldr	r3, [pc, #448]	@ (800850c <_dtoa_r+0x6fc>)
 800834a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800834c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008350:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008354:	4454      	add	r4, sl
 8008356:	2900      	cmp	r1, #0
 8008358:	d045      	beq.n	80083e6 <_dtoa_r+0x5d6>
 800835a:	2000      	movs	r0, #0
 800835c:	496c      	ldr	r1, [pc, #432]	@ (8008510 <_dtoa_r+0x700>)
 800835e:	f7f8 f9e5 	bl	800072c <__aeabi_ddiv>
 8008362:	4633      	mov	r3, r6
 8008364:	462a      	mov	r2, r5
 8008366:	f7f7 feff 	bl	8000168 <__aeabi_dsub>
 800836a:	4656      	mov	r6, sl
 800836c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008374:	f7f8 fb60 	bl	8000a38 <__aeabi_d2iz>
 8008378:	4605      	mov	r5, r0
 800837a:	f7f8 f843 	bl	8000404 <__aeabi_i2d>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008386:	f7f7 feef 	bl	8000168 <__aeabi_dsub>
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	3530      	adds	r5, #48	@ 0x30
 8008390:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008394:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008398:	f806 5b01 	strb.w	r5, [r6], #1
 800839c:	f7f8 fb0e 	bl	80009bc <__aeabi_dcmplt>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d163      	bne.n	800846c <_dtoa_r+0x65c>
 80083a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083a8:	2000      	movs	r0, #0
 80083aa:	495a      	ldr	r1, [pc, #360]	@ (8008514 <_dtoa_r+0x704>)
 80083ac:	f7f7 fedc 	bl	8000168 <__aeabi_dsub>
 80083b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083b4:	f7f8 fb02 	bl	80009bc <__aeabi_dcmplt>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	f040 8087 	bne.w	80084cc <_dtoa_r+0x6bc>
 80083be:	42a6      	cmp	r6, r4
 80083c0:	f43f af43 	beq.w	800824a <_dtoa_r+0x43a>
 80083c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80083c8:	2200      	movs	r2, #0
 80083ca:	4b53      	ldr	r3, [pc, #332]	@ (8008518 <_dtoa_r+0x708>)
 80083cc:	f7f8 f884 	bl	80004d8 <__aeabi_dmul>
 80083d0:	2200      	movs	r2, #0
 80083d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083da:	4b4f      	ldr	r3, [pc, #316]	@ (8008518 <_dtoa_r+0x708>)
 80083dc:	f7f8 f87c 	bl	80004d8 <__aeabi_dmul>
 80083e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083e4:	e7c4      	b.n	8008370 <_dtoa_r+0x560>
 80083e6:	4631      	mov	r1, r6
 80083e8:	4628      	mov	r0, r5
 80083ea:	f7f8 f875 	bl	80004d8 <__aeabi_dmul>
 80083ee:	4656      	mov	r6, sl
 80083f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083f4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80083f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083fa:	f7f8 fb1d 	bl	8000a38 <__aeabi_d2iz>
 80083fe:	4605      	mov	r5, r0
 8008400:	f7f8 f800 	bl	8000404 <__aeabi_i2d>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800840c:	f7f7 feac 	bl	8000168 <__aeabi_dsub>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	3530      	adds	r5, #48	@ 0x30
 8008416:	f806 5b01 	strb.w	r5, [r6], #1
 800841a:	42a6      	cmp	r6, r4
 800841c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008420:	f04f 0200 	mov.w	r2, #0
 8008424:	d124      	bne.n	8008470 <_dtoa_r+0x660>
 8008426:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800842a:	4b39      	ldr	r3, [pc, #228]	@ (8008510 <_dtoa_r+0x700>)
 800842c:	f7f7 fe9e 	bl	800016c <__adddf3>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008438:	f7f8 fade 	bl	80009f8 <__aeabi_dcmpgt>
 800843c:	2800      	cmp	r0, #0
 800843e:	d145      	bne.n	80084cc <_dtoa_r+0x6bc>
 8008440:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008444:	2000      	movs	r0, #0
 8008446:	4932      	ldr	r1, [pc, #200]	@ (8008510 <_dtoa_r+0x700>)
 8008448:	f7f7 fe8e 	bl	8000168 <__aeabi_dsub>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008454:	f7f8 fab2 	bl	80009bc <__aeabi_dcmplt>
 8008458:	2800      	cmp	r0, #0
 800845a:	f43f aef6 	beq.w	800824a <_dtoa_r+0x43a>
 800845e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008460:	1e73      	subs	r3, r6, #1
 8008462:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008464:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008468:	2b30      	cmp	r3, #48	@ 0x30
 800846a:	d0f8      	beq.n	800845e <_dtoa_r+0x64e>
 800846c:	9f04      	ldr	r7, [sp, #16]
 800846e:	e73f      	b.n	80082f0 <_dtoa_r+0x4e0>
 8008470:	4b29      	ldr	r3, [pc, #164]	@ (8008518 <_dtoa_r+0x708>)
 8008472:	f7f8 f831 	bl	80004d8 <__aeabi_dmul>
 8008476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800847a:	e7bc      	b.n	80083f6 <_dtoa_r+0x5e6>
 800847c:	d10c      	bne.n	8008498 <_dtoa_r+0x688>
 800847e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008482:	2200      	movs	r2, #0
 8008484:	4b25      	ldr	r3, [pc, #148]	@ (800851c <_dtoa_r+0x70c>)
 8008486:	f7f8 f827 	bl	80004d8 <__aeabi_dmul>
 800848a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800848e:	f7f8 faa9 	bl	80009e4 <__aeabi_dcmpge>
 8008492:	2800      	cmp	r0, #0
 8008494:	f000 815b 	beq.w	800874e <_dtoa_r+0x93e>
 8008498:	2400      	movs	r4, #0
 800849a:	4625      	mov	r5, r4
 800849c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800849e:	4656      	mov	r6, sl
 80084a0:	43db      	mvns	r3, r3
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	2700      	movs	r7, #0
 80084a6:	4621      	mov	r1, r4
 80084a8:	4658      	mov	r0, fp
 80084aa:	f000 fbb7 	bl	8008c1c <_Bfree>
 80084ae:	2d00      	cmp	r5, #0
 80084b0:	d0dc      	beq.n	800846c <_dtoa_r+0x65c>
 80084b2:	b12f      	cbz	r7, 80084c0 <_dtoa_r+0x6b0>
 80084b4:	42af      	cmp	r7, r5
 80084b6:	d003      	beq.n	80084c0 <_dtoa_r+0x6b0>
 80084b8:	4639      	mov	r1, r7
 80084ba:	4658      	mov	r0, fp
 80084bc:	f000 fbae 	bl	8008c1c <_Bfree>
 80084c0:	4629      	mov	r1, r5
 80084c2:	4658      	mov	r0, fp
 80084c4:	f000 fbaa 	bl	8008c1c <_Bfree>
 80084c8:	e7d0      	b.n	800846c <_dtoa_r+0x65c>
 80084ca:	9704      	str	r7, [sp, #16]
 80084cc:	4633      	mov	r3, r6
 80084ce:	461e      	mov	r6, r3
 80084d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084d4:	2a39      	cmp	r2, #57	@ 0x39
 80084d6:	d107      	bne.n	80084e8 <_dtoa_r+0x6d8>
 80084d8:	459a      	cmp	sl, r3
 80084da:	d1f8      	bne.n	80084ce <_dtoa_r+0x6be>
 80084dc:	9a04      	ldr	r2, [sp, #16]
 80084de:	3201      	adds	r2, #1
 80084e0:	9204      	str	r2, [sp, #16]
 80084e2:	2230      	movs	r2, #48	@ 0x30
 80084e4:	f88a 2000 	strb.w	r2, [sl]
 80084e8:	781a      	ldrb	r2, [r3, #0]
 80084ea:	3201      	adds	r2, #1
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	e7bd      	b.n	800846c <_dtoa_r+0x65c>
 80084f0:	2200      	movs	r2, #0
 80084f2:	4b09      	ldr	r3, [pc, #36]	@ (8008518 <_dtoa_r+0x708>)
 80084f4:	f7f7 fff0 	bl	80004d8 <__aeabi_dmul>
 80084f8:	2200      	movs	r2, #0
 80084fa:	2300      	movs	r3, #0
 80084fc:	4604      	mov	r4, r0
 80084fe:	460d      	mov	r5, r1
 8008500:	f7f8 fa52 	bl	80009a8 <__aeabi_dcmpeq>
 8008504:	2800      	cmp	r0, #0
 8008506:	f43f aebc 	beq.w	8008282 <_dtoa_r+0x472>
 800850a:	e6f1      	b.n	80082f0 <_dtoa_r+0x4e0>
 800850c:	0800bcf0 	.word	0x0800bcf0
 8008510:	3fe00000 	.word	0x3fe00000
 8008514:	3ff00000 	.word	0x3ff00000
 8008518:	40240000 	.word	0x40240000
 800851c:	40140000 	.word	0x40140000
 8008520:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008522:	2a00      	cmp	r2, #0
 8008524:	f000 80db 	beq.w	80086de <_dtoa_r+0x8ce>
 8008528:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800852a:	2a01      	cmp	r2, #1
 800852c:	f300 80bf 	bgt.w	80086ae <_dtoa_r+0x89e>
 8008530:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008532:	2a00      	cmp	r2, #0
 8008534:	f000 80b7 	beq.w	80086a6 <_dtoa_r+0x896>
 8008538:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800853c:	4646      	mov	r6, r8
 800853e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008542:	2101      	movs	r1, #1
 8008544:	441a      	add	r2, r3
 8008546:	4658      	mov	r0, fp
 8008548:	4498      	add	r8, r3
 800854a:	9209      	str	r2, [sp, #36]	@ 0x24
 800854c:	f000 fc64 	bl	8008e18 <__i2b>
 8008550:	4605      	mov	r5, r0
 8008552:	b15e      	cbz	r6, 800856c <_dtoa_r+0x75c>
 8008554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008556:	2b00      	cmp	r3, #0
 8008558:	dd08      	ble.n	800856c <_dtoa_r+0x75c>
 800855a:	42b3      	cmp	r3, r6
 800855c:	bfa8      	it	ge
 800855e:	4633      	movge	r3, r6
 8008560:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008562:	eba8 0803 	sub.w	r8, r8, r3
 8008566:	1af6      	subs	r6, r6, r3
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	9309      	str	r3, [sp, #36]	@ 0x24
 800856c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800856e:	b1f3      	cbz	r3, 80085ae <_dtoa_r+0x79e>
 8008570:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 80b7 	beq.w	80086e6 <_dtoa_r+0x8d6>
 8008578:	b18c      	cbz	r4, 800859e <_dtoa_r+0x78e>
 800857a:	4629      	mov	r1, r5
 800857c:	4622      	mov	r2, r4
 800857e:	4658      	mov	r0, fp
 8008580:	f000 fd08 	bl	8008f94 <__pow5mult>
 8008584:	464a      	mov	r2, r9
 8008586:	4601      	mov	r1, r0
 8008588:	4605      	mov	r5, r0
 800858a:	4658      	mov	r0, fp
 800858c:	f000 fc5a 	bl	8008e44 <__multiply>
 8008590:	4649      	mov	r1, r9
 8008592:	9004      	str	r0, [sp, #16]
 8008594:	4658      	mov	r0, fp
 8008596:	f000 fb41 	bl	8008c1c <_Bfree>
 800859a:	9b04      	ldr	r3, [sp, #16]
 800859c:	4699      	mov	r9, r3
 800859e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085a0:	1b1a      	subs	r2, r3, r4
 80085a2:	d004      	beq.n	80085ae <_dtoa_r+0x79e>
 80085a4:	4649      	mov	r1, r9
 80085a6:	4658      	mov	r0, fp
 80085a8:	f000 fcf4 	bl	8008f94 <__pow5mult>
 80085ac:	4681      	mov	r9, r0
 80085ae:	2101      	movs	r1, #1
 80085b0:	4658      	mov	r0, fp
 80085b2:	f000 fc31 	bl	8008e18 <__i2b>
 80085b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085b8:	4604      	mov	r4, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f000 81c9 	beq.w	8008952 <_dtoa_r+0xb42>
 80085c0:	461a      	mov	r2, r3
 80085c2:	4601      	mov	r1, r0
 80085c4:	4658      	mov	r0, fp
 80085c6:	f000 fce5 	bl	8008f94 <__pow5mult>
 80085ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80085cc:	4604      	mov	r4, r0
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	f300 808f 	bgt.w	80086f2 <_dtoa_r+0x8e2>
 80085d4:	9b02      	ldr	r3, [sp, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f040 8087 	bne.w	80086ea <_dtoa_r+0x8da>
 80085dc:	9b03      	ldr	r3, [sp, #12]
 80085de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f040 8083 	bne.w	80086ee <_dtoa_r+0x8de>
 80085e8:	9b03      	ldr	r3, [sp, #12]
 80085ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085ee:	0d1b      	lsrs	r3, r3, #20
 80085f0:	051b      	lsls	r3, r3, #20
 80085f2:	b12b      	cbz	r3, 8008600 <_dtoa_r+0x7f0>
 80085f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f6:	f108 0801 	add.w	r8, r8, #1
 80085fa:	3301      	adds	r3, #1
 80085fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80085fe:	2301      	movs	r3, #1
 8008600:	930a      	str	r3, [sp, #40]	@ 0x28
 8008602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 81aa 	beq.w	800895e <_dtoa_r+0xb4e>
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008610:	6918      	ldr	r0, [r3, #16]
 8008612:	f000 fbb5 	bl	8008d80 <__hi0bits>
 8008616:	f1c0 0020 	rsb	r0, r0, #32
 800861a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800861c:	4418      	add	r0, r3
 800861e:	f010 001f 	ands.w	r0, r0, #31
 8008622:	d071      	beq.n	8008708 <_dtoa_r+0x8f8>
 8008624:	f1c0 0320 	rsb	r3, r0, #32
 8008628:	2b04      	cmp	r3, #4
 800862a:	dd65      	ble.n	80086f8 <_dtoa_r+0x8e8>
 800862c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800862e:	f1c0 001c 	rsb	r0, r0, #28
 8008632:	4403      	add	r3, r0
 8008634:	4480      	add	r8, r0
 8008636:	4406      	add	r6, r0
 8008638:	9309      	str	r3, [sp, #36]	@ 0x24
 800863a:	f1b8 0f00 	cmp.w	r8, #0
 800863e:	dd05      	ble.n	800864c <_dtoa_r+0x83c>
 8008640:	4649      	mov	r1, r9
 8008642:	4642      	mov	r2, r8
 8008644:	4658      	mov	r0, fp
 8008646:	f000 fcff 	bl	8009048 <__lshift>
 800864a:	4681      	mov	r9, r0
 800864c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	dd05      	ble.n	800865e <_dtoa_r+0x84e>
 8008652:	4621      	mov	r1, r4
 8008654:	461a      	mov	r2, r3
 8008656:	4658      	mov	r0, fp
 8008658:	f000 fcf6 	bl	8009048 <__lshift>
 800865c:	4604      	mov	r4, r0
 800865e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008660:	2b00      	cmp	r3, #0
 8008662:	d053      	beq.n	800870c <_dtoa_r+0x8fc>
 8008664:	4621      	mov	r1, r4
 8008666:	4648      	mov	r0, r9
 8008668:	f000 fd5a 	bl	8009120 <__mcmp>
 800866c:	2800      	cmp	r0, #0
 800866e:	da4d      	bge.n	800870c <_dtoa_r+0x8fc>
 8008670:	1e7b      	subs	r3, r7, #1
 8008672:	4649      	mov	r1, r9
 8008674:	9304      	str	r3, [sp, #16]
 8008676:	220a      	movs	r2, #10
 8008678:	2300      	movs	r3, #0
 800867a:	4658      	mov	r0, fp
 800867c:	f000 faf0 	bl	8008c60 <__multadd>
 8008680:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008682:	4681      	mov	r9, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 816c 	beq.w	8008962 <_dtoa_r+0xb52>
 800868a:	2300      	movs	r3, #0
 800868c:	4629      	mov	r1, r5
 800868e:	220a      	movs	r2, #10
 8008690:	4658      	mov	r0, fp
 8008692:	f000 fae5 	bl	8008c60 <__multadd>
 8008696:	9b08      	ldr	r3, [sp, #32]
 8008698:	4605      	mov	r5, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	dc61      	bgt.n	8008762 <_dtoa_r+0x952>
 800869e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	dc3b      	bgt.n	800871c <_dtoa_r+0x90c>
 80086a4:	e05d      	b.n	8008762 <_dtoa_r+0x952>
 80086a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086a8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80086ac:	e746      	b.n	800853c <_dtoa_r+0x72c>
 80086ae:	9b07      	ldr	r3, [sp, #28]
 80086b0:	1e5c      	subs	r4, r3, #1
 80086b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	bfbf      	itttt	lt
 80086b8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80086ba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80086bc:	1ae3      	sublt	r3, r4, r3
 80086be:	18d2      	addlt	r2, r2, r3
 80086c0:	bfa8      	it	ge
 80086c2:	1b1c      	subge	r4, r3, r4
 80086c4:	9b07      	ldr	r3, [sp, #28]
 80086c6:	bfbe      	ittt	lt
 80086c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80086ca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80086cc:	2400      	movlt	r4, #0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	bfb5      	itete	lt
 80086d2:	eba8 0603 	sublt.w	r6, r8, r3
 80086d6:	4646      	movge	r6, r8
 80086d8:	2300      	movlt	r3, #0
 80086da:	9b07      	ldrge	r3, [sp, #28]
 80086dc:	e730      	b.n	8008540 <_dtoa_r+0x730>
 80086de:	4646      	mov	r6, r8
 80086e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80086e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80086e4:	e735      	b.n	8008552 <_dtoa_r+0x742>
 80086e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086e8:	e75c      	b.n	80085a4 <_dtoa_r+0x794>
 80086ea:	2300      	movs	r3, #0
 80086ec:	e788      	b.n	8008600 <_dtoa_r+0x7f0>
 80086ee:	9b02      	ldr	r3, [sp, #8]
 80086f0:	e786      	b.n	8008600 <_dtoa_r+0x7f0>
 80086f2:	2300      	movs	r3, #0
 80086f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80086f6:	e788      	b.n	800860a <_dtoa_r+0x7fa>
 80086f8:	d09f      	beq.n	800863a <_dtoa_r+0x82a>
 80086fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086fc:	331c      	adds	r3, #28
 80086fe:	441a      	add	r2, r3
 8008700:	4498      	add	r8, r3
 8008702:	441e      	add	r6, r3
 8008704:	9209      	str	r2, [sp, #36]	@ 0x24
 8008706:	e798      	b.n	800863a <_dtoa_r+0x82a>
 8008708:	4603      	mov	r3, r0
 800870a:	e7f6      	b.n	80086fa <_dtoa_r+0x8ea>
 800870c:	9b07      	ldr	r3, [sp, #28]
 800870e:	9704      	str	r7, [sp, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	dc20      	bgt.n	8008756 <_dtoa_r+0x946>
 8008714:	9308      	str	r3, [sp, #32]
 8008716:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008718:	2b02      	cmp	r3, #2
 800871a:	dd1e      	ble.n	800875a <_dtoa_r+0x94a>
 800871c:	9b08      	ldr	r3, [sp, #32]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f47f aebc 	bne.w	800849c <_dtoa_r+0x68c>
 8008724:	4621      	mov	r1, r4
 8008726:	2205      	movs	r2, #5
 8008728:	4658      	mov	r0, fp
 800872a:	f000 fa99 	bl	8008c60 <__multadd>
 800872e:	4601      	mov	r1, r0
 8008730:	4604      	mov	r4, r0
 8008732:	4648      	mov	r0, r9
 8008734:	f000 fcf4 	bl	8009120 <__mcmp>
 8008738:	2800      	cmp	r0, #0
 800873a:	f77f aeaf 	ble.w	800849c <_dtoa_r+0x68c>
 800873e:	2331      	movs	r3, #49	@ 0x31
 8008740:	4656      	mov	r6, sl
 8008742:	f806 3b01 	strb.w	r3, [r6], #1
 8008746:	9b04      	ldr	r3, [sp, #16]
 8008748:	3301      	adds	r3, #1
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	e6aa      	b.n	80084a4 <_dtoa_r+0x694>
 800874e:	9c07      	ldr	r4, [sp, #28]
 8008750:	9704      	str	r7, [sp, #16]
 8008752:	4625      	mov	r5, r4
 8008754:	e7f3      	b.n	800873e <_dtoa_r+0x92e>
 8008756:	9b07      	ldr	r3, [sp, #28]
 8008758:	9308      	str	r3, [sp, #32]
 800875a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 8104 	beq.w	800896a <_dtoa_r+0xb5a>
 8008762:	2e00      	cmp	r6, #0
 8008764:	dd05      	ble.n	8008772 <_dtoa_r+0x962>
 8008766:	4629      	mov	r1, r5
 8008768:	4632      	mov	r2, r6
 800876a:	4658      	mov	r0, fp
 800876c:	f000 fc6c 	bl	8009048 <__lshift>
 8008770:	4605      	mov	r5, r0
 8008772:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008774:	2b00      	cmp	r3, #0
 8008776:	d05a      	beq.n	800882e <_dtoa_r+0xa1e>
 8008778:	4658      	mov	r0, fp
 800877a:	6869      	ldr	r1, [r5, #4]
 800877c:	f000 fa0e 	bl	8008b9c <_Balloc>
 8008780:	4606      	mov	r6, r0
 8008782:	b928      	cbnz	r0, 8008790 <_dtoa_r+0x980>
 8008784:	4602      	mov	r2, r0
 8008786:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800878a:	4b83      	ldr	r3, [pc, #524]	@ (8008998 <_dtoa_r+0xb88>)
 800878c:	f7ff bb54 	b.w	8007e38 <_dtoa_r+0x28>
 8008790:	692a      	ldr	r2, [r5, #16]
 8008792:	f105 010c 	add.w	r1, r5, #12
 8008796:	3202      	adds	r2, #2
 8008798:	0092      	lsls	r2, r2, #2
 800879a:	300c      	adds	r0, #12
 800879c:	f7ff fa9d 	bl	8007cda <memcpy>
 80087a0:	2201      	movs	r2, #1
 80087a2:	4631      	mov	r1, r6
 80087a4:	4658      	mov	r0, fp
 80087a6:	f000 fc4f 	bl	8009048 <__lshift>
 80087aa:	462f      	mov	r7, r5
 80087ac:	4605      	mov	r5, r0
 80087ae:	f10a 0301 	add.w	r3, sl, #1
 80087b2:	9307      	str	r3, [sp, #28]
 80087b4:	9b08      	ldr	r3, [sp, #32]
 80087b6:	4453      	add	r3, sl
 80087b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087ba:	9b02      	ldr	r3, [sp, #8]
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80087c2:	9b07      	ldr	r3, [sp, #28]
 80087c4:	4621      	mov	r1, r4
 80087c6:	3b01      	subs	r3, #1
 80087c8:	4648      	mov	r0, r9
 80087ca:	9302      	str	r3, [sp, #8]
 80087cc:	f7ff fa98 	bl	8007d00 <quorem>
 80087d0:	4639      	mov	r1, r7
 80087d2:	9008      	str	r0, [sp, #32]
 80087d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80087d8:	4648      	mov	r0, r9
 80087da:	f000 fca1 	bl	8009120 <__mcmp>
 80087de:	462a      	mov	r2, r5
 80087e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80087e2:	4621      	mov	r1, r4
 80087e4:	4658      	mov	r0, fp
 80087e6:	f000 fcb7 	bl	8009158 <__mdiff>
 80087ea:	68c2      	ldr	r2, [r0, #12]
 80087ec:	4606      	mov	r6, r0
 80087ee:	bb02      	cbnz	r2, 8008832 <_dtoa_r+0xa22>
 80087f0:	4601      	mov	r1, r0
 80087f2:	4648      	mov	r0, r9
 80087f4:	f000 fc94 	bl	8009120 <__mcmp>
 80087f8:	4602      	mov	r2, r0
 80087fa:	4631      	mov	r1, r6
 80087fc:	4658      	mov	r0, fp
 80087fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008800:	f000 fa0c 	bl	8008c1c <_Bfree>
 8008804:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008806:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008808:	9e07      	ldr	r6, [sp, #28]
 800880a:	ea43 0102 	orr.w	r1, r3, r2
 800880e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008810:	4319      	orrs	r1, r3
 8008812:	d110      	bne.n	8008836 <_dtoa_r+0xa26>
 8008814:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008818:	d029      	beq.n	800886e <_dtoa_r+0xa5e>
 800881a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800881c:	2b00      	cmp	r3, #0
 800881e:	dd02      	ble.n	8008826 <_dtoa_r+0xa16>
 8008820:	9b08      	ldr	r3, [sp, #32]
 8008822:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008826:	9b02      	ldr	r3, [sp, #8]
 8008828:	f883 8000 	strb.w	r8, [r3]
 800882c:	e63b      	b.n	80084a6 <_dtoa_r+0x696>
 800882e:	4628      	mov	r0, r5
 8008830:	e7bb      	b.n	80087aa <_dtoa_r+0x99a>
 8008832:	2201      	movs	r2, #1
 8008834:	e7e1      	b.n	80087fa <_dtoa_r+0x9ea>
 8008836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008838:	2b00      	cmp	r3, #0
 800883a:	db04      	blt.n	8008846 <_dtoa_r+0xa36>
 800883c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800883e:	430b      	orrs	r3, r1
 8008840:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008842:	430b      	orrs	r3, r1
 8008844:	d120      	bne.n	8008888 <_dtoa_r+0xa78>
 8008846:	2a00      	cmp	r2, #0
 8008848:	dded      	ble.n	8008826 <_dtoa_r+0xa16>
 800884a:	4649      	mov	r1, r9
 800884c:	2201      	movs	r2, #1
 800884e:	4658      	mov	r0, fp
 8008850:	f000 fbfa 	bl	8009048 <__lshift>
 8008854:	4621      	mov	r1, r4
 8008856:	4681      	mov	r9, r0
 8008858:	f000 fc62 	bl	8009120 <__mcmp>
 800885c:	2800      	cmp	r0, #0
 800885e:	dc03      	bgt.n	8008868 <_dtoa_r+0xa58>
 8008860:	d1e1      	bne.n	8008826 <_dtoa_r+0xa16>
 8008862:	f018 0f01 	tst.w	r8, #1
 8008866:	d0de      	beq.n	8008826 <_dtoa_r+0xa16>
 8008868:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800886c:	d1d8      	bne.n	8008820 <_dtoa_r+0xa10>
 800886e:	2339      	movs	r3, #57	@ 0x39
 8008870:	9a02      	ldr	r2, [sp, #8]
 8008872:	7013      	strb	r3, [r2, #0]
 8008874:	4633      	mov	r3, r6
 8008876:	461e      	mov	r6, r3
 8008878:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800887c:	3b01      	subs	r3, #1
 800887e:	2a39      	cmp	r2, #57	@ 0x39
 8008880:	d052      	beq.n	8008928 <_dtoa_r+0xb18>
 8008882:	3201      	adds	r2, #1
 8008884:	701a      	strb	r2, [r3, #0]
 8008886:	e60e      	b.n	80084a6 <_dtoa_r+0x696>
 8008888:	2a00      	cmp	r2, #0
 800888a:	dd07      	ble.n	800889c <_dtoa_r+0xa8c>
 800888c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008890:	d0ed      	beq.n	800886e <_dtoa_r+0xa5e>
 8008892:	9a02      	ldr	r2, [sp, #8]
 8008894:	f108 0301 	add.w	r3, r8, #1
 8008898:	7013      	strb	r3, [r2, #0]
 800889a:	e604      	b.n	80084a6 <_dtoa_r+0x696>
 800889c:	9b07      	ldr	r3, [sp, #28]
 800889e:	9a07      	ldr	r2, [sp, #28]
 80088a0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80088a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d028      	beq.n	80088fc <_dtoa_r+0xaec>
 80088aa:	4649      	mov	r1, r9
 80088ac:	2300      	movs	r3, #0
 80088ae:	220a      	movs	r2, #10
 80088b0:	4658      	mov	r0, fp
 80088b2:	f000 f9d5 	bl	8008c60 <__multadd>
 80088b6:	42af      	cmp	r7, r5
 80088b8:	4681      	mov	r9, r0
 80088ba:	f04f 0300 	mov.w	r3, #0
 80088be:	f04f 020a 	mov.w	r2, #10
 80088c2:	4639      	mov	r1, r7
 80088c4:	4658      	mov	r0, fp
 80088c6:	d107      	bne.n	80088d8 <_dtoa_r+0xac8>
 80088c8:	f000 f9ca 	bl	8008c60 <__multadd>
 80088cc:	4607      	mov	r7, r0
 80088ce:	4605      	mov	r5, r0
 80088d0:	9b07      	ldr	r3, [sp, #28]
 80088d2:	3301      	adds	r3, #1
 80088d4:	9307      	str	r3, [sp, #28]
 80088d6:	e774      	b.n	80087c2 <_dtoa_r+0x9b2>
 80088d8:	f000 f9c2 	bl	8008c60 <__multadd>
 80088dc:	4629      	mov	r1, r5
 80088de:	4607      	mov	r7, r0
 80088e0:	2300      	movs	r3, #0
 80088e2:	220a      	movs	r2, #10
 80088e4:	4658      	mov	r0, fp
 80088e6:	f000 f9bb 	bl	8008c60 <__multadd>
 80088ea:	4605      	mov	r5, r0
 80088ec:	e7f0      	b.n	80088d0 <_dtoa_r+0xac0>
 80088ee:	9b08      	ldr	r3, [sp, #32]
 80088f0:	2700      	movs	r7, #0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	bfcc      	ite	gt
 80088f6:	461e      	movgt	r6, r3
 80088f8:	2601      	movle	r6, #1
 80088fa:	4456      	add	r6, sl
 80088fc:	4649      	mov	r1, r9
 80088fe:	2201      	movs	r2, #1
 8008900:	4658      	mov	r0, fp
 8008902:	f000 fba1 	bl	8009048 <__lshift>
 8008906:	4621      	mov	r1, r4
 8008908:	4681      	mov	r9, r0
 800890a:	f000 fc09 	bl	8009120 <__mcmp>
 800890e:	2800      	cmp	r0, #0
 8008910:	dcb0      	bgt.n	8008874 <_dtoa_r+0xa64>
 8008912:	d102      	bne.n	800891a <_dtoa_r+0xb0a>
 8008914:	f018 0f01 	tst.w	r8, #1
 8008918:	d1ac      	bne.n	8008874 <_dtoa_r+0xa64>
 800891a:	4633      	mov	r3, r6
 800891c:	461e      	mov	r6, r3
 800891e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008922:	2a30      	cmp	r2, #48	@ 0x30
 8008924:	d0fa      	beq.n	800891c <_dtoa_r+0xb0c>
 8008926:	e5be      	b.n	80084a6 <_dtoa_r+0x696>
 8008928:	459a      	cmp	sl, r3
 800892a:	d1a4      	bne.n	8008876 <_dtoa_r+0xa66>
 800892c:	9b04      	ldr	r3, [sp, #16]
 800892e:	3301      	adds	r3, #1
 8008930:	9304      	str	r3, [sp, #16]
 8008932:	2331      	movs	r3, #49	@ 0x31
 8008934:	f88a 3000 	strb.w	r3, [sl]
 8008938:	e5b5      	b.n	80084a6 <_dtoa_r+0x696>
 800893a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800893c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800899c <_dtoa_r+0xb8c>
 8008940:	b11b      	cbz	r3, 800894a <_dtoa_r+0xb3a>
 8008942:	f10a 0308 	add.w	r3, sl, #8
 8008946:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008948:	6013      	str	r3, [r2, #0]
 800894a:	4650      	mov	r0, sl
 800894c:	b017      	add	sp, #92	@ 0x5c
 800894e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008952:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008954:	2b01      	cmp	r3, #1
 8008956:	f77f ae3d 	ble.w	80085d4 <_dtoa_r+0x7c4>
 800895a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800895c:	930a      	str	r3, [sp, #40]	@ 0x28
 800895e:	2001      	movs	r0, #1
 8008960:	e65b      	b.n	800861a <_dtoa_r+0x80a>
 8008962:	9b08      	ldr	r3, [sp, #32]
 8008964:	2b00      	cmp	r3, #0
 8008966:	f77f aed6 	ble.w	8008716 <_dtoa_r+0x906>
 800896a:	4656      	mov	r6, sl
 800896c:	4621      	mov	r1, r4
 800896e:	4648      	mov	r0, r9
 8008970:	f7ff f9c6 	bl	8007d00 <quorem>
 8008974:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008978:	9b08      	ldr	r3, [sp, #32]
 800897a:	f806 8b01 	strb.w	r8, [r6], #1
 800897e:	eba6 020a 	sub.w	r2, r6, sl
 8008982:	4293      	cmp	r3, r2
 8008984:	ddb3      	ble.n	80088ee <_dtoa_r+0xade>
 8008986:	4649      	mov	r1, r9
 8008988:	2300      	movs	r3, #0
 800898a:	220a      	movs	r2, #10
 800898c:	4658      	mov	r0, fp
 800898e:	f000 f967 	bl	8008c60 <__multadd>
 8008992:	4681      	mov	r9, r0
 8008994:	e7ea      	b.n	800896c <_dtoa_r+0xb5c>
 8008996:	bf00      	nop
 8008998:	0800bc4b 	.word	0x0800bc4b
 800899c:	0800bbcf 	.word	0x0800bbcf

080089a0 <_free_r>:
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4605      	mov	r5, r0
 80089a4:	2900      	cmp	r1, #0
 80089a6:	d040      	beq.n	8008a2a <_free_r+0x8a>
 80089a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ac:	1f0c      	subs	r4, r1, #4
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bfb8      	it	lt
 80089b2:	18e4      	addlt	r4, r4, r3
 80089b4:	f000 f8e6 	bl	8008b84 <__malloc_lock>
 80089b8:	4a1c      	ldr	r2, [pc, #112]	@ (8008a2c <_free_r+0x8c>)
 80089ba:	6813      	ldr	r3, [r2, #0]
 80089bc:	b933      	cbnz	r3, 80089cc <_free_r+0x2c>
 80089be:	6063      	str	r3, [r4, #4]
 80089c0:	6014      	str	r4, [r2, #0]
 80089c2:	4628      	mov	r0, r5
 80089c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089c8:	f000 b8e2 	b.w	8008b90 <__malloc_unlock>
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d908      	bls.n	80089e2 <_free_r+0x42>
 80089d0:	6820      	ldr	r0, [r4, #0]
 80089d2:	1821      	adds	r1, r4, r0
 80089d4:	428b      	cmp	r3, r1
 80089d6:	bf01      	itttt	eq
 80089d8:	6819      	ldreq	r1, [r3, #0]
 80089da:	685b      	ldreq	r3, [r3, #4]
 80089dc:	1809      	addeq	r1, r1, r0
 80089de:	6021      	streq	r1, [r4, #0]
 80089e0:	e7ed      	b.n	80089be <_free_r+0x1e>
 80089e2:	461a      	mov	r2, r3
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	b10b      	cbz	r3, 80089ec <_free_r+0x4c>
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	d9fa      	bls.n	80089e2 <_free_r+0x42>
 80089ec:	6811      	ldr	r1, [r2, #0]
 80089ee:	1850      	adds	r0, r2, r1
 80089f0:	42a0      	cmp	r0, r4
 80089f2:	d10b      	bne.n	8008a0c <_free_r+0x6c>
 80089f4:	6820      	ldr	r0, [r4, #0]
 80089f6:	4401      	add	r1, r0
 80089f8:	1850      	adds	r0, r2, r1
 80089fa:	4283      	cmp	r3, r0
 80089fc:	6011      	str	r1, [r2, #0]
 80089fe:	d1e0      	bne.n	80089c2 <_free_r+0x22>
 8008a00:	6818      	ldr	r0, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	4408      	add	r0, r1
 8008a06:	6010      	str	r0, [r2, #0]
 8008a08:	6053      	str	r3, [r2, #4]
 8008a0a:	e7da      	b.n	80089c2 <_free_r+0x22>
 8008a0c:	d902      	bls.n	8008a14 <_free_r+0x74>
 8008a0e:	230c      	movs	r3, #12
 8008a10:	602b      	str	r3, [r5, #0]
 8008a12:	e7d6      	b.n	80089c2 <_free_r+0x22>
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	1821      	adds	r1, r4, r0
 8008a18:	428b      	cmp	r3, r1
 8008a1a:	bf01      	itttt	eq
 8008a1c:	6819      	ldreq	r1, [r3, #0]
 8008a1e:	685b      	ldreq	r3, [r3, #4]
 8008a20:	1809      	addeq	r1, r1, r0
 8008a22:	6021      	streq	r1, [r4, #0]
 8008a24:	6063      	str	r3, [r4, #4]
 8008a26:	6054      	str	r4, [r2, #4]
 8008a28:	e7cb      	b.n	80089c2 <_free_r+0x22>
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	200005c0 	.word	0x200005c0

08008a30 <malloc>:
 8008a30:	4b02      	ldr	r3, [pc, #8]	@ (8008a3c <malloc+0xc>)
 8008a32:	4601      	mov	r1, r0
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	f000 b825 	b.w	8008a84 <_malloc_r>
 8008a3a:	bf00      	nop
 8008a3c:	20000018 	.word	0x20000018

08008a40 <sbrk_aligned>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	4e0f      	ldr	r6, [pc, #60]	@ (8008a80 <sbrk_aligned+0x40>)
 8008a44:	460c      	mov	r4, r1
 8008a46:	6831      	ldr	r1, [r6, #0]
 8008a48:	4605      	mov	r5, r0
 8008a4a:	b911      	cbnz	r1, 8008a52 <sbrk_aligned+0x12>
 8008a4c:	f001 fde4 	bl	800a618 <_sbrk_r>
 8008a50:	6030      	str	r0, [r6, #0]
 8008a52:	4621      	mov	r1, r4
 8008a54:	4628      	mov	r0, r5
 8008a56:	f001 fddf 	bl	800a618 <_sbrk_r>
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	d103      	bne.n	8008a66 <sbrk_aligned+0x26>
 8008a5e:	f04f 34ff 	mov.w	r4, #4294967295
 8008a62:	4620      	mov	r0, r4
 8008a64:	bd70      	pop	{r4, r5, r6, pc}
 8008a66:	1cc4      	adds	r4, r0, #3
 8008a68:	f024 0403 	bic.w	r4, r4, #3
 8008a6c:	42a0      	cmp	r0, r4
 8008a6e:	d0f8      	beq.n	8008a62 <sbrk_aligned+0x22>
 8008a70:	1a21      	subs	r1, r4, r0
 8008a72:	4628      	mov	r0, r5
 8008a74:	f001 fdd0 	bl	800a618 <_sbrk_r>
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d1f2      	bne.n	8008a62 <sbrk_aligned+0x22>
 8008a7c:	e7ef      	b.n	8008a5e <sbrk_aligned+0x1e>
 8008a7e:	bf00      	nop
 8008a80:	200005bc 	.word	0x200005bc

08008a84 <_malloc_r>:
 8008a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a88:	1ccd      	adds	r5, r1, #3
 8008a8a:	f025 0503 	bic.w	r5, r5, #3
 8008a8e:	3508      	adds	r5, #8
 8008a90:	2d0c      	cmp	r5, #12
 8008a92:	bf38      	it	cc
 8008a94:	250c      	movcc	r5, #12
 8008a96:	2d00      	cmp	r5, #0
 8008a98:	4606      	mov	r6, r0
 8008a9a:	db01      	blt.n	8008aa0 <_malloc_r+0x1c>
 8008a9c:	42a9      	cmp	r1, r5
 8008a9e:	d904      	bls.n	8008aaa <_malloc_r+0x26>
 8008aa0:	230c      	movs	r3, #12
 8008aa2:	6033      	str	r3, [r6, #0]
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b80 <_malloc_r+0xfc>
 8008aae:	f000 f869 	bl	8008b84 <__malloc_lock>
 8008ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ab6:	461c      	mov	r4, r3
 8008ab8:	bb44      	cbnz	r4, 8008b0c <_malloc_r+0x88>
 8008aba:	4629      	mov	r1, r5
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7ff ffbf 	bl	8008a40 <sbrk_aligned>
 8008ac2:	1c43      	adds	r3, r0, #1
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	d158      	bne.n	8008b7a <_malloc_r+0xf6>
 8008ac8:	f8d8 4000 	ldr.w	r4, [r8]
 8008acc:	4627      	mov	r7, r4
 8008ace:	2f00      	cmp	r7, #0
 8008ad0:	d143      	bne.n	8008b5a <_malloc_r+0xd6>
 8008ad2:	2c00      	cmp	r4, #0
 8008ad4:	d04b      	beq.n	8008b6e <_malloc_r+0xea>
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	4639      	mov	r1, r7
 8008ada:	4630      	mov	r0, r6
 8008adc:	eb04 0903 	add.w	r9, r4, r3
 8008ae0:	f001 fd9a 	bl	800a618 <_sbrk_r>
 8008ae4:	4581      	cmp	r9, r0
 8008ae6:	d142      	bne.n	8008b6e <_malloc_r+0xea>
 8008ae8:	6821      	ldr	r1, [r4, #0]
 8008aea:	4630      	mov	r0, r6
 8008aec:	1a6d      	subs	r5, r5, r1
 8008aee:	4629      	mov	r1, r5
 8008af0:	f7ff ffa6 	bl	8008a40 <sbrk_aligned>
 8008af4:	3001      	adds	r0, #1
 8008af6:	d03a      	beq.n	8008b6e <_malloc_r+0xea>
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	442b      	add	r3, r5
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	f8d8 3000 	ldr.w	r3, [r8]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	bb62      	cbnz	r2, 8008b60 <_malloc_r+0xdc>
 8008b06:	f8c8 7000 	str.w	r7, [r8]
 8008b0a:	e00f      	b.n	8008b2c <_malloc_r+0xa8>
 8008b0c:	6822      	ldr	r2, [r4, #0]
 8008b0e:	1b52      	subs	r2, r2, r5
 8008b10:	d420      	bmi.n	8008b54 <_malloc_r+0xd0>
 8008b12:	2a0b      	cmp	r2, #11
 8008b14:	d917      	bls.n	8008b46 <_malloc_r+0xc2>
 8008b16:	1961      	adds	r1, r4, r5
 8008b18:	42a3      	cmp	r3, r4
 8008b1a:	6025      	str	r5, [r4, #0]
 8008b1c:	bf18      	it	ne
 8008b1e:	6059      	strne	r1, [r3, #4]
 8008b20:	6863      	ldr	r3, [r4, #4]
 8008b22:	bf08      	it	eq
 8008b24:	f8c8 1000 	streq.w	r1, [r8]
 8008b28:	5162      	str	r2, [r4, r5]
 8008b2a:	604b      	str	r3, [r1, #4]
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f000 f82f 	bl	8008b90 <__malloc_unlock>
 8008b32:	f104 000b 	add.w	r0, r4, #11
 8008b36:	1d23      	adds	r3, r4, #4
 8008b38:	f020 0007 	bic.w	r0, r0, #7
 8008b3c:	1ac2      	subs	r2, r0, r3
 8008b3e:	bf1c      	itt	ne
 8008b40:	1a1b      	subne	r3, r3, r0
 8008b42:	50a3      	strne	r3, [r4, r2]
 8008b44:	e7af      	b.n	8008aa6 <_malloc_r+0x22>
 8008b46:	6862      	ldr	r2, [r4, #4]
 8008b48:	42a3      	cmp	r3, r4
 8008b4a:	bf0c      	ite	eq
 8008b4c:	f8c8 2000 	streq.w	r2, [r8]
 8008b50:	605a      	strne	r2, [r3, #4]
 8008b52:	e7eb      	b.n	8008b2c <_malloc_r+0xa8>
 8008b54:	4623      	mov	r3, r4
 8008b56:	6864      	ldr	r4, [r4, #4]
 8008b58:	e7ae      	b.n	8008ab8 <_malloc_r+0x34>
 8008b5a:	463c      	mov	r4, r7
 8008b5c:	687f      	ldr	r7, [r7, #4]
 8008b5e:	e7b6      	b.n	8008ace <_malloc_r+0x4a>
 8008b60:	461a      	mov	r2, r3
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	d1fb      	bne.n	8008b60 <_malloc_r+0xdc>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	6053      	str	r3, [r2, #4]
 8008b6c:	e7de      	b.n	8008b2c <_malloc_r+0xa8>
 8008b6e:	230c      	movs	r3, #12
 8008b70:	4630      	mov	r0, r6
 8008b72:	6033      	str	r3, [r6, #0]
 8008b74:	f000 f80c 	bl	8008b90 <__malloc_unlock>
 8008b78:	e794      	b.n	8008aa4 <_malloc_r+0x20>
 8008b7a:	6005      	str	r5, [r0, #0]
 8008b7c:	e7d6      	b.n	8008b2c <_malloc_r+0xa8>
 8008b7e:	bf00      	nop
 8008b80:	200005c0 	.word	0x200005c0

08008b84 <__malloc_lock>:
 8008b84:	4801      	ldr	r0, [pc, #4]	@ (8008b8c <__malloc_lock+0x8>)
 8008b86:	f7ff b898 	b.w	8007cba <__retarget_lock_acquire_recursive>
 8008b8a:	bf00      	nop
 8008b8c:	200005b8 	.word	0x200005b8

08008b90 <__malloc_unlock>:
 8008b90:	4801      	ldr	r0, [pc, #4]	@ (8008b98 <__malloc_unlock+0x8>)
 8008b92:	f7ff b893 	b.w	8007cbc <__retarget_lock_release_recursive>
 8008b96:	bf00      	nop
 8008b98:	200005b8 	.word	0x200005b8

08008b9c <_Balloc>:
 8008b9c:	b570      	push	{r4, r5, r6, lr}
 8008b9e:	69c6      	ldr	r6, [r0, #28]
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	460d      	mov	r5, r1
 8008ba4:	b976      	cbnz	r6, 8008bc4 <_Balloc+0x28>
 8008ba6:	2010      	movs	r0, #16
 8008ba8:	f7ff ff42 	bl	8008a30 <malloc>
 8008bac:	4602      	mov	r2, r0
 8008bae:	61e0      	str	r0, [r4, #28]
 8008bb0:	b920      	cbnz	r0, 8008bbc <_Balloc+0x20>
 8008bb2:	216b      	movs	r1, #107	@ 0x6b
 8008bb4:	4b17      	ldr	r3, [pc, #92]	@ (8008c14 <_Balloc+0x78>)
 8008bb6:	4818      	ldr	r0, [pc, #96]	@ (8008c18 <_Balloc+0x7c>)
 8008bb8:	f001 fd44 	bl	800a644 <__assert_func>
 8008bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bc0:	6006      	str	r6, [r0, #0]
 8008bc2:	60c6      	str	r6, [r0, #12]
 8008bc4:	69e6      	ldr	r6, [r4, #28]
 8008bc6:	68f3      	ldr	r3, [r6, #12]
 8008bc8:	b183      	cbz	r3, 8008bec <_Balloc+0x50>
 8008bca:	69e3      	ldr	r3, [r4, #28]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bd2:	b9b8      	cbnz	r0, 8008c04 <_Balloc+0x68>
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	fa01 f605 	lsl.w	r6, r1, r5
 8008bda:	1d72      	adds	r2, r6, #5
 8008bdc:	4620      	mov	r0, r4
 8008bde:	0092      	lsls	r2, r2, #2
 8008be0:	f001 fd4e 	bl	800a680 <_calloc_r>
 8008be4:	b160      	cbz	r0, 8008c00 <_Balloc+0x64>
 8008be6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bea:	e00e      	b.n	8008c0a <_Balloc+0x6e>
 8008bec:	2221      	movs	r2, #33	@ 0x21
 8008bee:	2104      	movs	r1, #4
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f001 fd45 	bl	800a680 <_calloc_r>
 8008bf6:	69e3      	ldr	r3, [r4, #28]
 8008bf8:	60f0      	str	r0, [r6, #12]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e4      	bne.n	8008bca <_Balloc+0x2e>
 8008c00:	2000      	movs	r0, #0
 8008c02:	bd70      	pop	{r4, r5, r6, pc}
 8008c04:	6802      	ldr	r2, [r0, #0]
 8008c06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c10:	e7f7      	b.n	8008c02 <_Balloc+0x66>
 8008c12:	bf00      	nop
 8008c14:	0800bbdc 	.word	0x0800bbdc
 8008c18:	0800bc5c 	.word	0x0800bc5c

08008c1c <_Bfree>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	69c6      	ldr	r6, [r0, #28]
 8008c20:	4605      	mov	r5, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	b976      	cbnz	r6, 8008c44 <_Bfree+0x28>
 8008c26:	2010      	movs	r0, #16
 8008c28:	f7ff ff02 	bl	8008a30 <malloc>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	61e8      	str	r0, [r5, #28]
 8008c30:	b920      	cbnz	r0, 8008c3c <_Bfree+0x20>
 8008c32:	218f      	movs	r1, #143	@ 0x8f
 8008c34:	4b08      	ldr	r3, [pc, #32]	@ (8008c58 <_Bfree+0x3c>)
 8008c36:	4809      	ldr	r0, [pc, #36]	@ (8008c5c <_Bfree+0x40>)
 8008c38:	f001 fd04 	bl	800a644 <__assert_func>
 8008c3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c40:	6006      	str	r6, [r0, #0]
 8008c42:	60c6      	str	r6, [r0, #12]
 8008c44:	b13c      	cbz	r4, 8008c56 <_Bfree+0x3a>
 8008c46:	69eb      	ldr	r3, [r5, #28]
 8008c48:	6862      	ldr	r2, [r4, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c50:	6021      	str	r1, [r4, #0]
 8008c52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c56:	bd70      	pop	{r4, r5, r6, pc}
 8008c58:	0800bbdc 	.word	0x0800bbdc
 8008c5c:	0800bc5c 	.word	0x0800bc5c

08008c60 <__multadd>:
 8008c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c64:	4607      	mov	r7, r0
 8008c66:	460c      	mov	r4, r1
 8008c68:	461e      	mov	r6, r3
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	690d      	ldr	r5, [r1, #16]
 8008c6e:	f101 0c14 	add.w	ip, r1, #20
 8008c72:	f8dc 3000 	ldr.w	r3, [ip]
 8008c76:	3001      	adds	r0, #1
 8008c78:	b299      	uxth	r1, r3
 8008c7a:	fb02 6101 	mla	r1, r2, r1, r6
 8008c7e:	0c1e      	lsrs	r6, r3, #16
 8008c80:	0c0b      	lsrs	r3, r1, #16
 8008c82:	fb02 3306 	mla	r3, r2, r6, r3
 8008c86:	b289      	uxth	r1, r1
 8008c88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c8c:	4285      	cmp	r5, r0
 8008c8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c92:	f84c 1b04 	str.w	r1, [ip], #4
 8008c96:	dcec      	bgt.n	8008c72 <__multadd+0x12>
 8008c98:	b30e      	cbz	r6, 8008cde <__multadd+0x7e>
 8008c9a:	68a3      	ldr	r3, [r4, #8]
 8008c9c:	42ab      	cmp	r3, r5
 8008c9e:	dc19      	bgt.n	8008cd4 <__multadd+0x74>
 8008ca0:	6861      	ldr	r1, [r4, #4]
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	3101      	adds	r1, #1
 8008ca6:	f7ff ff79 	bl	8008b9c <_Balloc>
 8008caa:	4680      	mov	r8, r0
 8008cac:	b928      	cbnz	r0, 8008cba <__multadd+0x5a>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	21ba      	movs	r1, #186	@ 0xba
 8008cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce4 <__multadd+0x84>)
 8008cb4:	480c      	ldr	r0, [pc, #48]	@ (8008ce8 <__multadd+0x88>)
 8008cb6:	f001 fcc5 	bl	800a644 <__assert_func>
 8008cba:	6922      	ldr	r2, [r4, #16]
 8008cbc:	f104 010c 	add.w	r1, r4, #12
 8008cc0:	3202      	adds	r2, #2
 8008cc2:	0092      	lsls	r2, r2, #2
 8008cc4:	300c      	adds	r0, #12
 8008cc6:	f7ff f808 	bl	8007cda <memcpy>
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4638      	mov	r0, r7
 8008cce:	f7ff ffa5 	bl	8008c1c <_Bfree>
 8008cd2:	4644      	mov	r4, r8
 8008cd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cd8:	3501      	adds	r5, #1
 8008cda:	615e      	str	r6, [r3, #20]
 8008cdc:	6125      	str	r5, [r4, #16]
 8008cde:	4620      	mov	r0, r4
 8008ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ce4:	0800bc4b 	.word	0x0800bc4b
 8008ce8:	0800bc5c 	.word	0x0800bc5c

08008cec <__s2b>:
 8008cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cf0:	4615      	mov	r5, r2
 8008cf2:	2209      	movs	r2, #9
 8008cf4:	461f      	mov	r7, r3
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cfe:	4606      	mov	r6, r0
 8008d00:	2201      	movs	r2, #1
 8008d02:	2100      	movs	r1, #0
 8008d04:	429a      	cmp	r2, r3
 8008d06:	db09      	blt.n	8008d1c <__s2b+0x30>
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f7ff ff47 	bl	8008b9c <_Balloc>
 8008d0e:	b940      	cbnz	r0, 8008d22 <__s2b+0x36>
 8008d10:	4602      	mov	r2, r0
 8008d12:	21d3      	movs	r1, #211	@ 0xd3
 8008d14:	4b18      	ldr	r3, [pc, #96]	@ (8008d78 <__s2b+0x8c>)
 8008d16:	4819      	ldr	r0, [pc, #100]	@ (8008d7c <__s2b+0x90>)
 8008d18:	f001 fc94 	bl	800a644 <__assert_func>
 8008d1c:	0052      	lsls	r2, r2, #1
 8008d1e:	3101      	adds	r1, #1
 8008d20:	e7f0      	b.n	8008d04 <__s2b+0x18>
 8008d22:	9b08      	ldr	r3, [sp, #32]
 8008d24:	2d09      	cmp	r5, #9
 8008d26:	6143      	str	r3, [r0, #20]
 8008d28:	f04f 0301 	mov.w	r3, #1
 8008d2c:	6103      	str	r3, [r0, #16]
 8008d2e:	dd16      	ble.n	8008d5e <__s2b+0x72>
 8008d30:	f104 0909 	add.w	r9, r4, #9
 8008d34:	46c8      	mov	r8, r9
 8008d36:	442c      	add	r4, r5
 8008d38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d3c:	4601      	mov	r1, r0
 8008d3e:	220a      	movs	r2, #10
 8008d40:	4630      	mov	r0, r6
 8008d42:	3b30      	subs	r3, #48	@ 0x30
 8008d44:	f7ff ff8c 	bl	8008c60 <__multadd>
 8008d48:	45a0      	cmp	r8, r4
 8008d4a:	d1f5      	bne.n	8008d38 <__s2b+0x4c>
 8008d4c:	f1a5 0408 	sub.w	r4, r5, #8
 8008d50:	444c      	add	r4, r9
 8008d52:	1b2d      	subs	r5, r5, r4
 8008d54:	1963      	adds	r3, r4, r5
 8008d56:	42bb      	cmp	r3, r7
 8008d58:	db04      	blt.n	8008d64 <__s2b+0x78>
 8008d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d5e:	2509      	movs	r5, #9
 8008d60:	340a      	adds	r4, #10
 8008d62:	e7f6      	b.n	8008d52 <__s2b+0x66>
 8008d64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d68:	4601      	mov	r1, r0
 8008d6a:	220a      	movs	r2, #10
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	3b30      	subs	r3, #48	@ 0x30
 8008d70:	f7ff ff76 	bl	8008c60 <__multadd>
 8008d74:	e7ee      	b.n	8008d54 <__s2b+0x68>
 8008d76:	bf00      	nop
 8008d78:	0800bc4b 	.word	0x0800bc4b
 8008d7c:	0800bc5c 	.word	0x0800bc5c

08008d80 <__hi0bits>:
 8008d80:	4603      	mov	r3, r0
 8008d82:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d86:	bf3a      	itte	cc
 8008d88:	0403      	lslcc	r3, r0, #16
 8008d8a:	2010      	movcc	r0, #16
 8008d8c:	2000      	movcs	r0, #0
 8008d8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d92:	bf3c      	itt	cc
 8008d94:	021b      	lslcc	r3, r3, #8
 8008d96:	3008      	addcc	r0, #8
 8008d98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d9c:	bf3c      	itt	cc
 8008d9e:	011b      	lslcc	r3, r3, #4
 8008da0:	3004      	addcc	r0, #4
 8008da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008da6:	bf3c      	itt	cc
 8008da8:	009b      	lslcc	r3, r3, #2
 8008daa:	3002      	addcc	r0, #2
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	db05      	blt.n	8008dbc <__hi0bits+0x3c>
 8008db0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008db4:	f100 0001 	add.w	r0, r0, #1
 8008db8:	bf08      	it	eq
 8008dba:	2020      	moveq	r0, #32
 8008dbc:	4770      	bx	lr

08008dbe <__lo0bits>:
 8008dbe:	6803      	ldr	r3, [r0, #0]
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	f013 0007 	ands.w	r0, r3, #7
 8008dc6:	d00b      	beq.n	8008de0 <__lo0bits+0x22>
 8008dc8:	07d9      	lsls	r1, r3, #31
 8008dca:	d421      	bmi.n	8008e10 <__lo0bits+0x52>
 8008dcc:	0798      	lsls	r0, r3, #30
 8008dce:	bf49      	itett	mi
 8008dd0:	085b      	lsrmi	r3, r3, #1
 8008dd2:	089b      	lsrpl	r3, r3, #2
 8008dd4:	2001      	movmi	r0, #1
 8008dd6:	6013      	strmi	r3, [r2, #0]
 8008dd8:	bf5c      	itt	pl
 8008dda:	2002      	movpl	r0, #2
 8008ddc:	6013      	strpl	r3, [r2, #0]
 8008dde:	4770      	bx	lr
 8008de0:	b299      	uxth	r1, r3
 8008de2:	b909      	cbnz	r1, 8008de8 <__lo0bits+0x2a>
 8008de4:	2010      	movs	r0, #16
 8008de6:	0c1b      	lsrs	r3, r3, #16
 8008de8:	b2d9      	uxtb	r1, r3
 8008dea:	b909      	cbnz	r1, 8008df0 <__lo0bits+0x32>
 8008dec:	3008      	adds	r0, #8
 8008dee:	0a1b      	lsrs	r3, r3, #8
 8008df0:	0719      	lsls	r1, r3, #28
 8008df2:	bf04      	itt	eq
 8008df4:	091b      	lsreq	r3, r3, #4
 8008df6:	3004      	addeq	r0, #4
 8008df8:	0799      	lsls	r1, r3, #30
 8008dfa:	bf04      	itt	eq
 8008dfc:	089b      	lsreq	r3, r3, #2
 8008dfe:	3002      	addeq	r0, #2
 8008e00:	07d9      	lsls	r1, r3, #31
 8008e02:	d403      	bmi.n	8008e0c <__lo0bits+0x4e>
 8008e04:	085b      	lsrs	r3, r3, #1
 8008e06:	f100 0001 	add.w	r0, r0, #1
 8008e0a:	d003      	beq.n	8008e14 <__lo0bits+0x56>
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	4770      	bx	lr
 8008e10:	2000      	movs	r0, #0
 8008e12:	4770      	bx	lr
 8008e14:	2020      	movs	r0, #32
 8008e16:	4770      	bx	lr

08008e18 <__i2b>:
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	f7ff febd 	bl	8008b9c <_Balloc>
 8008e22:	4602      	mov	r2, r0
 8008e24:	b928      	cbnz	r0, 8008e32 <__i2b+0x1a>
 8008e26:	f240 1145 	movw	r1, #325	@ 0x145
 8008e2a:	4b04      	ldr	r3, [pc, #16]	@ (8008e3c <__i2b+0x24>)
 8008e2c:	4804      	ldr	r0, [pc, #16]	@ (8008e40 <__i2b+0x28>)
 8008e2e:	f001 fc09 	bl	800a644 <__assert_func>
 8008e32:	2301      	movs	r3, #1
 8008e34:	6144      	str	r4, [r0, #20]
 8008e36:	6103      	str	r3, [r0, #16]
 8008e38:	bd10      	pop	{r4, pc}
 8008e3a:	bf00      	nop
 8008e3c:	0800bc4b 	.word	0x0800bc4b
 8008e40:	0800bc5c 	.word	0x0800bc5c

08008e44 <__multiply>:
 8008e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	4614      	mov	r4, r2
 8008e4a:	690a      	ldr	r2, [r1, #16]
 8008e4c:	6923      	ldr	r3, [r4, #16]
 8008e4e:	460f      	mov	r7, r1
 8008e50:	429a      	cmp	r2, r3
 8008e52:	bfa2      	ittt	ge
 8008e54:	4623      	movge	r3, r4
 8008e56:	460c      	movge	r4, r1
 8008e58:	461f      	movge	r7, r3
 8008e5a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e5e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e62:	68a3      	ldr	r3, [r4, #8]
 8008e64:	6861      	ldr	r1, [r4, #4]
 8008e66:	eb0a 0609 	add.w	r6, sl, r9
 8008e6a:	42b3      	cmp	r3, r6
 8008e6c:	b085      	sub	sp, #20
 8008e6e:	bfb8      	it	lt
 8008e70:	3101      	addlt	r1, #1
 8008e72:	f7ff fe93 	bl	8008b9c <_Balloc>
 8008e76:	b930      	cbnz	r0, 8008e86 <__multiply+0x42>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e7e:	4b43      	ldr	r3, [pc, #268]	@ (8008f8c <__multiply+0x148>)
 8008e80:	4843      	ldr	r0, [pc, #268]	@ (8008f90 <__multiply+0x14c>)
 8008e82:	f001 fbdf 	bl	800a644 <__assert_func>
 8008e86:	f100 0514 	add.w	r5, r0, #20
 8008e8a:	462b      	mov	r3, r5
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e92:	4543      	cmp	r3, r8
 8008e94:	d321      	bcc.n	8008eda <__multiply+0x96>
 8008e96:	f107 0114 	add.w	r1, r7, #20
 8008e9a:	f104 0214 	add.w	r2, r4, #20
 8008e9e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008ea2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ea6:	9302      	str	r3, [sp, #8]
 8008ea8:	1b13      	subs	r3, r2, r4
 8008eaa:	3b15      	subs	r3, #21
 8008eac:	f023 0303 	bic.w	r3, r3, #3
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	f104 0715 	add.w	r7, r4, #21
 8008eb6:	42ba      	cmp	r2, r7
 8008eb8:	bf38      	it	cc
 8008eba:	2304      	movcc	r3, #4
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	9b02      	ldr	r3, [sp, #8]
 8008ec0:	9103      	str	r1, [sp, #12]
 8008ec2:	428b      	cmp	r3, r1
 8008ec4:	d80c      	bhi.n	8008ee0 <__multiply+0x9c>
 8008ec6:	2e00      	cmp	r6, #0
 8008ec8:	dd03      	ble.n	8008ed2 <__multiply+0x8e>
 8008eca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d05a      	beq.n	8008f88 <__multiply+0x144>
 8008ed2:	6106      	str	r6, [r0, #16]
 8008ed4:	b005      	add	sp, #20
 8008ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eda:	f843 2b04 	str.w	r2, [r3], #4
 8008ede:	e7d8      	b.n	8008e92 <__multiply+0x4e>
 8008ee0:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ee4:	f1ba 0f00 	cmp.w	sl, #0
 8008ee8:	d023      	beq.n	8008f32 <__multiply+0xee>
 8008eea:	46a9      	mov	r9, r5
 8008eec:	f04f 0c00 	mov.w	ip, #0
 8008ef0:	f104 0e14 	add.w	lr, r4, #20
 8008ef4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ef8:	f8d9 3000 	ldr.w	r3, [r9]
 8008efc:	fa1f fb87 	uxth.w	fp, r7
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f06:	4463      	add	r3, ip
 8008f08:	f8d9 c000 	ldr.w	ip, [r9]
 8008f0c:	0c3f      	lsrs	r7, r7, #16
 8008f0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008f12:	fb0a c707 	mla	r7, sl, r7, ip
 8008f16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f20:	4572      	cmp	r2, lr
 8008f22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f26:	f849 3b04 	str.w	r3, [r9], #4
 8008f2a:	d8e3      	bhi.n	8008ef4 <__multiply+0xb0>
 8008f2c:	9b01      	ldr	r3, [sp, #4]
 8008f2e:	f845 c003 	str.w	ip, [r5, r3]
 8008f32:	9b03      	ldr	r3, [sp, #12]
 8008f34:	3104      	adds	r1, #4
 8008f36:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f3a:	f1b9 0f00 	cmp.w	r9, #0
 8008f3e:	d021      	beq.n	8008f84 <__multiply+0x140>
 8008f40:	46ae      	mov	lr, r5
 8008f42:	f04f 0a00 	mov.w	sl, #0
 8008f46:	682b      	ldr	r3, [r5, #0]
 8008f48:	f104 0c14 	add.w	ip, r4, #20
 8008f4c:	f8bc b000 	ldrh.w	fp, [ip]
 8008f50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	fb09 770b 	mla	r7, r9, fp, r7
 8008f5a:	4457      	add	r7, sl
 8008f5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f60:	f84e 3b04 	str.w	r3, [lr], #4
 8008f64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f6c:	f8be 3000 	ldrh.w	r3, [lr]
 8008f70:	4562      	cmp	r2, ip
 8008f72:	fb09 330a 	mla	r3, r9, sl, r3
 8008f76:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008f7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f7e:	d8e5      	bhi.n	8008f4c <__multiply+0x108>
 8008f80:	9f01      	ldr	r7, [sp, #4]
 8008f82:	51eb      	str	r3, [r5, r7]
 8008f84:	3504      	adds	r5, #4
 8008f86:	e79a      	b.n	8008ebe <__multiply+0x7a>
 8008f88:	3e01      	subs	r6, #1
 8008f8a:	e79c      	b.n	8008ec6 <__multiply+0x82>
 8008f8c:	0800bc4b 	.word	0x0800bc4b
 8008f90:	0800bc5c 	.word	0x0800bc5c

08008f94 <__pow5mult>:
 8008f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f98:	4615      	mov	r5, r2
 8008f9a:	f012 0203 	ands.w	r2, r2, #3
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	460e      	mov	r6, r1
 8008fa2:	d007      	beq.n	8008fb4 <__pow5mult+0x20>
 8008fa4:	4c25      	ldr	r4, [pc, #148]	@ (800903c <__pow5mult+0xa8>)
 8008fa6:	3a01      	subs	r2, #1
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fae:	f7ff fe57 	bl	8008c60 <__multadd>
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	10ad      	asrs	r5, r5, #2
 8008fb6:	d03d      	beq.n	8009034 <__pow5mult+0xa0>
 8008fb8:	69fc      	ldr	r4, [r7, #28]
 8008fba:	b97c      	cbnz	r4, 8008fdc <__pow5mult+0x48>
 8008fbc:	2010      	movs	r0, #16
 8008fbe:	f7ff fd37 	bl	8008a30 <malloc>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	61f8      	str	r0, [r7, #28]
 8008fc6:	b928      	cbnz	r0, 8008fd4 <__pow5mult+0x40>
 8008fc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8009040 <__pow5mult+0xac>)
 8008fce:	481d      	ldr	r0, [pc, #116]	@ (8009044 <__pow5mult+0xb0>)
 8008fd0:	f001 fb38 	bl	800a644 <__assert_func>
 8008fd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fd8:	6004      	str	r4, [r0, #0]
 8008fda:	60c4      	str	r4, [r0, #12]
 8008fdc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fe4:	b94c      	cbnz	r4, 8008ffa <__pow5mult+0x66>
 8008fe6:	f240 2171 	movw	r1, #625	@ 0x271
 8008fea:	4638      	mov	r0, r7
 8008fec:	f7ff ff14 	bl	8008e18 <__i2b>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ff8:	6003      	str	r3, [r0, #0]
 8008ffa:	f04f 0900 	mov.w	r9, #0
 8008ffe:	07eb      	lsls	r3, r5, #31
 8009000:	d50a      	bpl.n	8009018 <__pow5mult+0x84>
 8009002:	4631      	mov	r1, r6
 8009004:	4622      	mov	r2, r4
 8009006:	4638      	mov	r0, r7
 8009008:	f7ff ff1c 	bl	8008e44 <__multiply>
 800900c:	4680      	mov	r8, r0
 800900e:	4631      	mov	r1, r6
 8009010:	4638      	mov	r0, r7
 8009012:	f7ff fe03 	bl	8008c1c <_Bfree>
 8009016:	4646      	mov	r6, r8
 8009018:	106d      	asrs	r5, r5, #1
 800901a:	d00b      	beq.n	8009034 <__pow5mult+0xa0>
 800901c:	6820      	ldr	r0, [r4, #0]
 800901e:	b938      	cbnz	r0, 8009030 <__pow5mult+0x9c>
 8009020:	4622      	mov	r2, r4
 8009022:	4621      	mov	r1, r4
 8009024:	4638      	mov	r0, r7
 8009026:	f7ff ff0d 	bl	8008e44 <__multiply>
 800902a:	6020      	str	r0, [r4, #0]
 800902c:	f8c0 9000 	str.w	r9, [r0]
 8009030:	4604      	mov	r4, r0
 8009032:	e7e4      	b.n	8008ffe <__pow5mult+0x6a>
 8009034:	4630      	mov	r0, r6
 8009036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800903a:	bf00      	nop
 800903c:	0800bcb8 	.word	0x0800bcb8
 8009040:	0800bbdc 	.word	0x0800bbdc
 8009044:	0800bc5c 	.word	0x0800bc5c

08009048 <__lshift>:
 8009048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800904c:	460c      	mov	r4, r1
 800904e:	4607      	mov	r7, r0
 8009050:	4691      	mov	r9, r2
 8009052:	6923      	ldr	r3, [r4, #16]
 8009054:	6849      	ldr	r1, [r1, #4]
 8009056:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800905a:	68a3      	ldr	r3, [r4, #8]
 800905c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009060:	f108 0601 	add.w	r6, r8, #1
 8009064:	42b3      	cmp	r3, r6
 8009066:	db0b      	blt.n	8009080 <__lshift+0x38>
 8009068:	4638      	mov	r0, r7
 800906a:	f7ff fd97 	bl	8008b9c <_Balloc>
 800906e:	4605      	mov	r5, r0
 8009070:	b948      	cbnz	r0, 8009086 <__lshift+0x3e>
 8009072:	4602      	mov	r2, r0
 8009074:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009078:	4b27      	ldr	r3, [pc, #156]	@ (8009118 <__lshift+0xd0>)
 800907a:	4828      	ldr	r0, [pc, #160]	@ (800911c <__lshift+0xd4>)
 800907c:	f001 fae2 	bl	800a644 <__assert_func>
 8009080:	3101      	adds	r1, #1
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	e7ee      	b.n	8009064 <__lshift+0x1c>
 8009086:	2300      	movs	r3, #0
 8009088:	f100 0114 	add.w	r1, r0, #20
 800908c:	f100 0210 	add.w	r2, r0, #16
 8009090:	4618      	mov	r0, r3
 8009092:	4553      	cmp	r3, sl
 8009094:	db33      	blt.n	80090fe <__lshift+0xb6>
 8009096:	6920      	ldr	r0, [r4, #16]
 8009098:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800909c:	f104 0314 	add.w	r3, r4, #20
 80090a0:	f019 091f 	ands.w	r9, r9, #31
 80090a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090ac:	d02b      	beq.n	8009106 <__lshift+0xbe>
 80090ae:	468a      	mov	sl, r1
 80090b0:	2200      	movs	r2, #0
 80090b2:	f1c9 0e20 	rsb	lr, r9, #32
 80090b6:	6818      	ldr	r0, [r3, #0]
 80090b8:	fa00 f009 	lsl.w	r0, r0, r9
 80090bc:	4310      	orrs	r0, r2
 80090be:	f84a 0b04 	str.w	r0, [sl], #4
 80090c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c6:	459c      	cmp	ip, r3
 80090c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80090cc:	d8f3      	bhi.n	80090b6 <__lshift+0x6e>
 80090ce:	ebac 0304 	sub.w	r3, ip, r4
 80090d2:	3b15      	subs	r3, #21
 80090d4:	f023 0303 	bic.w	r3, r3, #3
 80090d8:	3304      	adds	r3, #4
 80090da:	f104 0015 	add.w	r0, r4, #21
 80090de:	4584      	cmp	ip, r0
 80090e0:	bf38      	it	cc
 80090e2:	2304      	movcc	r3, #4
 80090e4:	50ca      	str	r2, [r1, r3]
 80090e6:	b10a      	cbz	r2, 80090ec <__lshift+0xa4>
 80090e8:	f108 0602 	add.w	r6, r8, #2
 80090ec:	3e01      	subs	r6, #1
 80090ee:	4638      	mov	r0, r7
 80090f0:	4621      	mov	r1, r4
 80090f2:	612e      	str	r6, [r5, #16]
 80090f4:	f7ff fd92 	bl	8008c1c <_Bfree>
 80090f8:	4628      	mov	r0, r5
 80090fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009102:	3301      	adds	r3, #1
 8009104:	e7c5      	b.n	8009092 <__lshift+0x4a>
 8009106:	3904      	subs	r1, #4
 8009108:	f853 2b04 	ldr.w	r2, [r3], #4
 800910c:	459c      	cmp	ip, r3
 800910e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009112:	d8f9      	bhi.n	8009108 <__lshift+0xc0>
 8009114:	e7ea      	b.n	80090ec <__lshift+0xa4>
 8009116:	bf00      	nop
 8009118:	0800bc4b 	.word	0x0800bc4b
 800911c:	0800bc5c 	.word	0x0800bc5c

08009120 <__mcmp>:
 8009120:	4603      	mov	r3, r0
 8009122:	690a      	ldr	r2, [r1, #16]
 8009124:	6900      	ldr	r0, [r0, #16]
 8009126:	b530      	push	{r4, r5, lr}
 8009128:	1a80      	subs	r0, r0, r2
 800912a:	d10e      	bne.n	800914a <__mcmp+0x2a>
 800912c:	3314      	adds	r3, #20
 800912e:	3114      	adds	r1, #20
 8009130:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009134:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009138:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800913c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009140:	4295      	cmp	r5, r2
 8009142:	d003      	beq.n	800914c <__mcmp+0x2c>
 8009144:	d205      	bcs.n	8009152 <__mcmp+0x32>
 8009146:	f04f 30ff 	mov.w	r0, #4294967295
 800914a:	bd30      	pop	{r4, r5, pc}
 800914c:	42a3      	cmp	r3, r4
 800914e:	d3f3      	bcc.n	8009138 <__mcmp+0x18>
 8009150:	e7fb      	b.n	800914a <__mcmp+0x2a>
 8009152:	2001      	movs	r0, #1
 8009154:	e7f9      	b.n	800914a <__mcmp+0x2a>
	...

08009158 <__mdiff>:
 8009158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915c:	4689      	mov	r9, r1
 800915e:	4606      	mov	r6, r0
 8009160:	4611      	mov	r1, r2
 8009162:	4648      	mov	r0, r9
 8009164:	4614      	mov	r4, r2
 8009166:	f7ff ffdb 	bl	8009120 <__mcmp>
 800916a:	1e05      	subs	r5, r0, #0
 800916c:	d112      	bne.n	8009194 <__mdiff+0x3c>
 800916e:	4629      	mov	r1, r5
 8009170:	4630      	mov	r0, r6
 8009172:	f7ff fd13 	bl	8008b9c <_Balloc>
 8009176:	4602      	mov	r2, r0
 8009178:	b928      	cbnz	r0, 8009186 <__mdiff+0x2e>
 800917a:	f240 2137 	movw	r1, #567	@ 0x237
 800917e:	4b3e      	ldr	r3, [pc, #248]	@ (8009278 <__mdiff+0x120>)
 8009180:	483e      	ldr	r0, [pc, #248]	@ (800927c <__mdiff+0x124>)
 8009182:	f001 fa5f 	bl	800a644 <__assert_func>
 8009186:	2301      	movs	r3, #1
 8009188:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800918c:	4610      	mov	r0, r2
 800918e:	b003      	add	sp, #12
 8009190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009194:	bfbc      	itt	lt
 8009196:	464b      	movlt	r3, r9
 8009198:	46a1      	movlt	r9, r4
 800919a:	4630      	mov	r0, r6
 800919c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091a0:	bfba      	itte	lt
 80091a2:	461c      	movlt	r4, r3
 80091a4:	2501      	movlt	r5, #1
 80091a6:	2500      	movge	r5, #0
 80091a8:	f7ff fcf8 	bl	8008b9c <_Balloc>
 80091ac:	4602      	mov	r2, r0
 80091ae:	b918      	cbnz	r0, 80091b8 <__mdiff+0x60>
 80091b0:	f240 2145 	movw	r1, #581	@ 0x245
 80091b4:	4b30      	ldr	r3, [pc, #192]	@ (8009278 <__mdiff+0x120>)
 80091b6:	e7e3      	b.n	8009180 <__mdiff+0x28>
 80091b8:	f100 0b14 	add.w	fp, r0, #20
 80091bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091c0:	f109 0310 	add.w	r3, r9, #16
 80091c4:	60c5      	str	r5, [r0, #12]
 80091c6:	f04f 0c00 	mov.w	ip, #0
 80091ca:	f109 0514 	add.w	r5, r9, #20
 80091ce:	46d9      	mov	r9, fp
 80091d0:	6926      	ldr	r6, [r4, #16]
 80091d2:	f104 0e14 	add.w	lr, r4, #20
 80091d6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091da:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	9b01      	ldr	r3, [sp, #4]
 80091e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091ea:	b281      	uxth	r1, r0
 80091ec:	9301      	str	r3, [sp, #4]
 80091ee:	fa1f f38a 	uxth.w	r3, sl
 80091f2:	1a5b      	subs	r3, r3, r1
 80091f4:	0c00      	lsrs	r0, r0, #16
 80091f6:	4463      	add	r3, ip
 80091f8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091fc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009200:	b29b      	uxth	r3, r3
 8009202:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009206:	4576      	cmp	r6, lr
 8009208:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800920c:	f849 3b04 	str.w	r3, [r9], #4
 8009210:	d8e6      	bhi.n	80091e0 <__mdiff+0x88>
 8009212:	1b33      	subs	r3, r6, r4
 8009214:	3b15      	subs	r3, #21
 8009216:	f023 0303 	bic.w	r3, r3, #3
 800921a:	3415      	adds	r4, #21
 800921c:	3304      	adds	r3, #4
 800921e:	42a6      	cmp	r6, r4
 8009220:	bf38      	it	cc
 8009222:	2304      	movcc	r3, #4
 8009224:	441d      	add	r5, r3
 8009226:	445b      	add	r3, fp
 8009228:	461e      	mov	r6, r3
 800922a:	462c      	mov	r4, r5
 800922c:	4544      	cmp	r4, r8
 800922e:	d30e      	bcc.n	800924e <__mdiff+0xf6>
 8009230:	f108 0103 	add.w	r1, r8, #3
 8009234:	1b49      	subs	r1, r1, r5
 8009236:	f021 0103 	bic.w	r1, r1, #3
 800923a:	3d03      	subs	r5, #3
 800923c:	45a8      	cmp	r8, r5
 800923e:	bf38      	it	cc
 8009240:	2100      	movcc	r1, #0
 8009242:	440b      	add	r3, r1
 8009244:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009248:	b199      	cbz	r1, 8009272 <__mdiff+0x11a>
 800924a:	6117      	str	r7, [r2, #16]
 800924c:	e79e      	b.n	800918c <__mdiff+0x34>
 800924e:	46e6      	mov	lr, ip
 8009250:	f854 1b04 	ldr.w	r1, [r4], #4
 8009254:	fa1f fc81 	uxth.w	ip, r1
 8009258:	44f4      	add	ip, lr
 800925a:	0c08      	lsrs	r0, r1, #16
 800925c:	4471      	add	r1, lr
 800925e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009262:	b289      	uxth	r1, r1
 8009264:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009268:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800926c:	f846 1b04 	str.w	r1, [r6], #4
 8009270:	e7dc      	b.n	800922c <__mdiff+0xd4>
 8009272:	3f01      	subs	r7, #1
 8009274:	e7e6      	b.n	8009244 <__mdiff+0xec>
 8009276:	bf00      	nop
 8009278:	0800bc4b 	.word	0x0800bc4b
 800927c:	0800bc5c 	.word	0x0800bc5c

08009280 <__ulp>:
 8009280:	4b0e      	ldr	r3, [pc, #56]	@ (80092bc <__ulp+0x3c>)
 8009282:	400b      	ands	r3, r1
 8009284:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009288:	2b00      	cmp	r3, #0
 800928a:	dc08      	bgt.n	800929e <__ulp+0x1e>
 800928c:	425b      	negs	r3, r3
 800928e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009292:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009296:	da04      	bge.n	80092a2 <__ulp+0x22>
 8009298:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800929c:	4113      	asrs	r3, r2
 800929e:	2200      	movs	r2, #0
 80092a0:	e008      	b.n	80092b4 <__ulp+0x34>
 80092a2:	f1a2 0314 	sub.w	r3, r2, #20
 80092a6:	2b1e      	cmp	r3, #30
 80092a8:	bfd6      	itet	le
 80092aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80092ae:	2201      	movgt	r2, #1
 80092b0:	40da      	lsrle	r2, r3
 80092b2:	2300      	movs	r3, #0
 80092b4:	4619      	mov	r1, r3
 80092b6:	4610      	mov	r0, r2
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	7ff00000 	.word	0x7ff00000

080092c0 <__b2d>:
 80092c0:	6902      	ldr	r2, [r0, #16]
 80092c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c4:	f100 0614 	add.w	r6, r0, #20
 80092c8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80092cc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80092d0:	4f1e      	ldr	r7, [pc, #120]	@ (800934c <__b2d+0x8c>)
 80092d2:	4620      	mov	r0, r4
 80092d4:	f7ff fd54 	bl	8008d80 <__hi0bits>
 80092d8:	4603      	mov	r3, r0
 80092da:	f1c0 0020 	rsb	r0, r0, #32
 80092de:	2b0a      	cmp	r3, #10
 80092e0:	f1a2 0504 	sub.w	r5, r2, #4
 80092e4:	6008      	str	r0, [r1, #0]
 80092e6:	dc12      	bgt.n	800930e <__b2d+0x4e>
 80092e8:	42ae      	cmp	r6, r5
 80092ea:	bf2c      	ite	cs
 80092ec:	2200      	movcs	r2, #0
 80092ee:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80092f2:	f1c3 0c0b 	rsb	ip, r3, #11
 80092f6:	3315      	adds	r3, #21
 80092f8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80092fc:	fa04 f303 	lsl.w	r3, r4, r3
 8009300:	fa22 f20c 	lsr.w	r2, r2, ip
 8009304:	ea4e 0107 	orr.w	r1, lr, r7
 8009308:	431a      	orrs	r2, r3
 800930a:	4610      	mov	r0, r2
 800930c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800930e:	42ae      	cmp	r6, r5
 8009310:	bf36      	itet	cc
 8009312:	f1a2 0508 	subcc.w	r5, r2, #8
 8009316:	2200      	movcs	r2, #0
 8009318:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800931c:	3b0b      	subs	r3, #11
 800931e:	d012      	beq.n	8009346 <__b2d+0x86>
 8009320:	f1c3 0720 	rsb	r7, r3, #32
 8009324:	fa22 f107 	lsr.w	r1, r2, r7
 8009328:	409c      	lsls	r4, r3
 800932a:	430c      	orrs	r4, r1
 800932c:	42b5      	cmp	r5, r6
 800932e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009332:	bf94      	ite	ls
 8009334:	2400      	movls	r4, #0
 8009336:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800933a:	409a      	lsls	r2, r3
 800933c:	40fc      	lsrs	r4, r7
 800933e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009342:	4322      	orrs	r2, r4
 8009344:	e7e1      	b.n	800930a <__b2d+0x4a>
 8009346:	ea44 0107 	orr.w	r1, r4, r7
 800934a:	e7de      	b.n	800930a <__b2d+0x4a>
 800934c:	3ff00000 	.word	0x3ff00000

08009350 <__d2b>:
 8009350:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009354:	2101      	movs	r1, #1
 8009356:	4690      	mov	r8, r2
 8009358:	4699      	mov	r9, r3
 800935a:	9e08      	ldr	r6, [sp, #32]
 800935c:	f7ff fc1e 	bl	8008b9c <_Balloc>
 8009360:	4604      	mov	r4, r0
 8009362:	b930      	cbnz	r0, 8009372 <__d2b+0x22>
 8009364:	4602      	mov	r2, r0
 8009366:	f240 310f 	movw	r1, #783	@ 0x30f
 800936a:	4b23      	ldr	r3, [pc, #140]	@ (80093f8 <__d2b+0xa8>)
 800936c:	4823      	ldr	r0, [pc, #140]	@ (80093fc <__d2b+0xac>)
 800936e:	f001 f969 	bl	800a644 <__assert_func>
 8009372:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009376:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800937a:	b10d      	cbz	r5, 8009380 <__d2b+0x30>
 800937c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	f1b8 0300 	subs.w	r3, r8, #0
 8009386:	d024      	beq.n	80093d2 <__d2b+0x82>
 8009388:	4668      	mov	r0, sp
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	f7ff fd17 	bl	8008dbe <__lo0bits>
 8009390:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009394:	b1d8      	cbz	r0, 80093ce <__d2b+0x7e>
 8009396:	f1c0 0320 	rsb	r3, r0, #32
 800939a:	fa02 f303 	lsl.w	r3, r2, r3
 800939e:	430b      	orrs	r3, r1
 80093a0:	40c2      	lsrs	r2, r0
 80093a2:	6163      	str	r3, [r4, #20]
 80093a4:	9201      	str	r2, [sp, #4]
 80093a6:	9b01      	ldr	r3, [sp, #4]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	bf0c      	ite	eq
 80093ac:	2201      	moveq	r2, #1
 80093ae:	2202      	movne	r2, #2
 80093b0:	61a3      	str	r3, [r4, #24]
 80093b2:	6122      	str	r2, [r4, #16]
 80093b4:	b1ad      	cbz	r5, 80093e2 <__d2b+0x92>
 80093b6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093ba:	4405      	add	r5, r0
 80093bc:	6035      	str	r5, [r6, #0]
 80093be:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c4:	6018      	str	r0, [r3, #0]
 80093c6:	4620      	mov	r0, r4
 80093c8:	b002      	add	sp, #8
 80093ca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80093ce:	6161      	str	r1, [r4, #20]
 80093d0:	e7e9      	b.n	80093a6 <__d2b+0x56>
 80093d2:	a801      	add	r0, sp, #4
 80093d4:	f7ff fcf3 	bl	8008dbe <__lo0bits>
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	6163      	str	r3, [r4, #20]
 80093de:	3020      	adds	r0, #32
 80093e0:	e7e7      	b.n	80093b2 <__d2b+0x62>
 80093e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093ea:	6030      	str	r0, [r6, #0]
 80093ec:	6918      	ldr	r0, [r3, #16]
 80093ee:	f7ff fcc7 	bl	8008d80 <__hi0bits>
 80093f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093f6:	e7e4      	b.n	80093c2 <__d2b+0x72>
 80093f8:	0800bc4b 	.word	0x0800bc4b
 80093fc:	0800bc5c 	.word	0x0800bc5c

08009400 <__ratio>:
 8009400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	b085      	sub	sp, #20
 8009406:	e9cd 1000 	strd	r1, r0, [sp]
 800940a:	a902      	add	r1, sp, #8
 800940c:	f7ff ff58 	bl	80092c0 <__b2d>
 8009410:	468b      	mov	fp, r1
 8009412:	4606      	mov	r6, r0
 8009414:	460f      	mov	r7, r1
 8009416:	9800      	ldr	r0, [sp, #0]
 8009418:	a903      	add	r1, sp, #12
 800941a:	f7ff ff51 	bl	80092c0 <__b2d>
 800941e:	460d      	mov	r5, r1
 8009420:	9b01      	ldr	r3, [sp, #4]
 8009422:	4689      	mov	r9, r1
 8009424:	6919      	ldr	r1, [r3, #16]
 8009426:	9b00      	ldr	r3, [sp, #0]
 8009428:	4604      	mov	r4, r0
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	4630      	mov	r0, r6
 800942e:	1ac9      	subs	r1, r1, r3
 8009430:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009434:	1a9b      	subs	r3, r3, r2
 8009436:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800943a:	2b00      	cmp	r3, #0
 800943c:	bfcd      	iteet	gt
 800943e:	463a      	movgt	r2, r7
 8009440:	462a      	movle	r2, r5
 8009442:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009446:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800944a:	bfd8      	it	le
 800944c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009450:	464b      	mov	r3, r9
 8009452:	4622      	mov	r2, r4
 8009454:	4659      	mov	r1, fp
 8009456:	f7f7 f969 	bl	800072c <__aeabi_ddiv>
 800945a:	b005      	add	sp, #20
 800945c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009460 <__copybits>:
 8009460:	3901      	subs	r1, #1
 8009462:	b570      	push	{r4, r5, r6, lr}
 8009464:	1149      	asrs	r1, r1, #5
 8009466:	6914      	ldr	r4, [r2, #16]
 8009468:	3101      	adds	r1, #1
 800946a:	f102 0314 	add.w	r3, r2, #20
 800946e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009472:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009476:	1f05      	subs	r5, r0, #4
 8009478:	42a3      	cmp	r3, r4
 800947a:	d30c      	bcc.n	8009496 <__copybits+0x36>
 800947c:	1aa3      	subs	r3, r4, r2
 800947e:	3b11      	subs	r3, #17
 8009480:	f023 0303 	bic.w	r3, r3, #3
 8009484:	3211      	adds	r2, #17
 8009486:	42a2      	cmp	r2, r4
 8009488:	bf88      	it	hi
 800948a:	2300      	movhi	r3, #0
 800948c:	4418      	add	r0, r3
 800948e:	2300      	movs	r3, #0
 8009490:	4288      	cmp	r0, r1
 8009492:	d305      	bcc.n	80094a0 <__copybits+0x40>
 8009494:	bd70      	pop	{r4, r5, r6, pc}
 8009496:	f853 6b04 	ldr.w	r6, [r3], #4
 800949a:	f845 6f04 	str.w	r6, [r5, #4]!
 800949e:	e7eb      	b.n	8009478 <__copybits+0x18>
 80094a0:	f840 3b04 	str.w	r3, [r0], #4
 80094a4:	e7f4      	b.n	8009490 <__copybits+0x30>

080094a6 <__any_on>:
 80094a6:	f100 0214 	add.w	r2, r0, #20
 80094aa:	6900      	ldr	r0, [r0, #16]
 80094ac:	114b      	asrs	r3, r1, #5
 80094ae:	4298      	cmp	r0, r3
 80094b0:	b510      	push	{r4, lr}
 80094b2:	db11      	blt.n	80094d8 <__any_on+0x32>
 80094b4:	dd0a      	ble.n	80094cc <__any_on+0x26>
 80094b6:	f011 011f 	ands.w	r1, r1, #31
 80094ba:	d007      	beq.n	80094cc <__any_on+0x26>
 80094bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094c0:	fa24 f001 	lsr.w	r0, r4, r1
 80094c4:	fa00 f101 	lsl.w	r1, r0, r1
 80094c8:	428c      	cmp	r4, r1
 80094ca:	d10b      	bne.n	80094e4 <__any_on+0x3e>
 80094cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d803      	bhi.n	80094dc <__any_on+0x36>
 80094d4:	2000      	movs	r0, #0
 80094d6:	bd10      	pop	{r4, pc}
 80094d8:	4603      	mov	r3, r0
 80094da:	e7f7      	b.n	80094cc <__any_on+0x26>
 80094dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094e0:	2900      	cmp	r1, #0
 80094e2:	d0f5      	beq.n	80094d0 <__any_on+0x2a>
 80094e4:	2001      	movs	r0, #1
 80094e6:	e7f6      	b.n	80094d6 <__any_on+0x30>

080094e8 <sulp>:
 80094e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ec:	460f      	mov	r7, r1
 80094ee:	4690      	mov	r8, r2
 80094f0:	f7ff fec6 	bl	8009280 <__ulp>
 80094f4:	4604      	mov	r4, r0
 80094f6:	460d      	mov	r5, r1
 80094f8:	f1b8 0f00 	cmp.w	r8, #0
 80094fc:	d011      	beq.n	8009522 <sulp+0x3a>
 80094fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009502:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009506:	2b00      	cmp	r3, #0
 8009508:	dd0b      	ble.n	8009522 <sulp+0x3a>
 800950a:	2400      	movs	r4, #0
 800950c:	051b      	lsls	r3, r3, #20
 800950e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009512:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009516:	4622      	mov	r2, r4
 8009518:	462b      	mov	r3, r5
 800951a:	f7f6 ffdd 	bl	80004d8 <__aeabi_dmul>
 800951e:	4604      	mov	r4, r0
 8009520:	460d      	mov	r5, r1
 8009522:	4620      	mov	r0, r4
 8009524:	4629      	mov	r1, r5
 8009526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800952a:	0000      	movs	r0, r0
 800952c:	0000      	movs	r0, r0
	...

08009530 <_strtod_l>:
 8009530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009534:	b09f      	sub	sp, #124	@ 0x7c
 8009536:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009538:	2200      	movs	r2, #0
 800953a:	460c      	mov	r4, r1
 800953c:	921a      	str	r2, [sp, #104]	@ 0x68
 800953e:	f04f 0a00 	mov.w	sl, #0
 8009542:	f04f 0b00 	mov.w	fp, #0
 8009546:	460a      	mov	r2, r1
 8009548:	9005      	str	r0, [sp, #20]
 800954a:	9219      	str	r2, [sp, #100]	@ 0x64
 800954c:	7811      	ldrb	r1, [r2, #0]
 800954e:	292b      	cmp	r1, #43	@ 0x2b
 8009550:	d048      	beq.n	80095e4 <_strtod_l+0xb4>
 8009552:	d836      	bhi.n	80095c2 <_strtod_l+0x92>
 8009554:	290d      	cmp	r1, #13
 8009556:	d830      	bhi.n	80095ba <_strtod_l+0x8a>
 8009558:	2908      	cmp	r1, #8
 800955a:	d830      	bhi.n	80095be <_strtod_l+0x8e>
 800955c:	2900      	cmp	r1, #0
 800955e:	d039      	beq.n	80095d4 <_strtod_l+0xa4>
 8009560:	2200      	movs	r2, #0
 8009562:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009564:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009566:	782a      	ldrb	r2, [r5, #0]
 8009568:	2a30      	cmp	r2, #48	@ 0x30
 800956a:	f040 80b1 	bne.w	80096d0 <_strtod_l+0x1a0>
 800956e:	786a      	ldrb	r2, [r5, #1]
 8009570:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009574:	2a58      	cmp	r2, #88	@ 0x58
 8009576:	d16c      	bne.n	8009652 <_strtod_l+0x122>
 8009578:	9302      	str	r3, [sp, #8]
 800957a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800957c:	4a8e      	ldr	r2, [pc, #568]	@ (80097b8 <_strtod_l+0x288>)
 800957e:	9301      	str	r3, [sp, #4]
 8009580:	ab1a      	add	r3, sp, #104	@ 0x68
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	9805      	ldr	r0, [sp, #20]
 8009586:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009588:	a919      	add	r1, sp, #100	@ 0x64
 800958a:	f001 f8f5 	bl	800a778 <__gethex>
 800958e:	f010 060f 	ands.w	r6, r0, #15
 8009592:	4604      	mov	r4, r0
 8009594:	d005      	beq.n	80095a2 <_strtod_l+0x72>
 8009596:	2e06      	cmp	r6, #6
 8009598:	d126      	bne.n	80095e8 <_strtod_l+0xb8>
 800959a:	2300      	movs	r3, #0
 800959c:	3501      	adds	r5, #1
 800959e:	9519      	str	r5, [sp, #100]	@ 0x64
 80095a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f040 8584 	bne.w	800a0b2 <_strtod_l+0xb82>
 80095aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095ac:	b1bb      	cbz	r3, 80095de <_strtod_l+0xae>
 80095ae:	4650      	mov	r0, sl
 80095b0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80095b4:	b01f      	add	sp, #124	@ 0x7c
 80095b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ba:	2920      	cmp	r1, #32
 80095bc:	d1d0      	bne.n	8009560 <_strtod_l+0x30>
 80095be:	3201      	adds	r2, #1
 80095c0:	e7c3      	b.n	800954a <_strtod_l+0x1a>
 80095c2:	292d      	cmp	r1, #45	@ 0x2d
 80095c4:	d1cc      	bne.n	8009560 <_strtod_l+0x30>
 80095c6:	2101      	movs	r1, #1
 80095c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80095ca:	1c51      	adds	r1, r2, #1
 80095cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80095ce:	7852      	ldrb	r2, [r2, #1]
 80095d0:	2a00      	cmp	r2, #0
 80095d2:	d1c7      	bne.n	8009564 <_strtod_l+0x34>
 80095d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095d6:	9419      	str	r4, [sp, #100]	@ 0x64
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f040 8568 	bne.w	800a0ae <_strtod_l+0xb7e>
 80095de:	4650      	mov	r0, sl
 80095e0:	4659      	mov	r1, fp
 80095e2:	e7e7      	b.n	80095b4 <_strtod_l+0x84>
 80095e4:	2100      	movs	r1, #0
 80095e6:	e7ef      	b.n	80095c8 <_strtod_l+0x98>
 80095e8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80095ea:	b13a      	cbz	r2, 80095fc <_strtod_l+0xcc>
 80095ec:	2135      	movs	r1, #53	@ 0x35
 80095ee:	a81c      	add	r0, sp, #112	@ 0x70
 80095f0:	f7ff ff36 	bl	8009460 <__copybits>
 80095f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095f6:	9805      	ldr	r0, [sp, #20]
 80095f8:	f7ff fb10 	bl	8008c1c <_Bfree>
 80095fc:	3e01      	subs	r6, #1
 80095fe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009600:	2e04      	cmp	r6, #4
 8009602:	d806      	bhi.n	8009612 <_strtod_l+0xe2>
 8009604:	e8df f006 	tbb	[pc, r6]
 8009608:	201d0314 	.word	0x201d0314
 800960c:	14          	.byte	0x14
 800960d:	00          	.byte	0x00
 800960e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009612:	05e1      	lsls	r1, r4, #23
 8009614:	bf48      	it	mi
 8009616:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800961a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800961e:	0d1b      	lsrs	r3, r3, #20
 8009620:	051b      	lsls	r3, r3, #20
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1bd      	bne.n	80095a2 <_strtod_l+0x72>
 8009626:	f7fe fb1d 	bl	8007c64 <__errno>
 800962a:	2322      	movs	r3, #34	@ 0x22
 800962c:	6003      	str	r3, [r0, #0]
 800962e:	e7b8      	b.n	80095a2 <_strtod_l+0x72>
 8009630:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009634:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009638:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800963c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009640:	e7e7      	b.n	8009612 <_strtod_l+0xe2>
 8009642:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80097bc <_strtod_l+0x28c>
 8009646:	e7e4      	b.n	8009612 <_strtod_l+0xe2>
 8009648:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800964c:	f04f 3aff 	mov.w	sl, #4294967295
 8009650:	e7df      	b.n	8009612 <_strtod_l+0xe2>
 8009652:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	9219      	str	r2, [sp, #100]	@ 0x64
 8009658:	785b      	ldrb	r3, [r3, #1]
 800965a:	2b30      	cmp	r3, #48	@ 0x30
 800965c:	d0f9      	beq.n	8009652 <_strtod_l+0x122>
 800965e:	2b00      	cmp	r3, #0
 8009660:	d09f      	beq.n	80095a2 <_strtod_l+0x72>
 8009662:	2301      	movs	r3, #1
 8009664:	9309      	str	r3, [sp, #36]	@ 0x24
 8009666:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009668:	220a      	movs	r2, #10
 800966a:	930c      	str	r3, [sp, #48]	@ 0x30
 800966c:	2300      	movs	r3, #0
 800966e:	461f      	mov	r7, r3
 8009670:	9308      	str	r3, [sp, #32]
 8009672:	930a      	str	r3, [sp, #40]	@ 0x28
 8009674:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009676:	7805      	ldrb	r5, [r0, #0]
 8009678:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800967c:	b2d9      	uxtb	r1, r3
 800967e:	2909      	cmp	r1, #9
 8009680:	d928      	bls.n	80096d4 <_strtod_l+0x1a4>
 8009682:	2201      	movs	r2, #1
 8009684:	494e      	ldr	r1, [pc, #312]	@ (80097c0 <_strtod_l+0x290>)
 8009686:	f7fe fa90 	bl	8007baa <strncmp>
 800968a:	2800      	cmp	r0, #0
 800968c:	d032      	beq.n	80096f4 <_strtod_l+0x1c4>
 800968e:	2000      	movs	r0, #0
 8009690:	462a      	mov	r2, r5
 8009692:	4681      	mov	r9, r0
 8009694:	463d      	mov	r5, r7
 8009696:	4603      	mov	r3, r0
 8009698:	2a65      	cmp	r2, #101	@ 0x65
 800969a:	d001      	beq.n	80096a0 <_strtod_l+0x170>
 800969c:	2a45      	cmp	r2, #69	@ 0x45
 800969e:	d114      	bne.n	80096ca <_strtod_l+0x19a>
 80096a0:	b91d      	cbnz	r5, 80096aa <_strtod_l+0x17a>
 80096a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096a4:	4302      	orrs	r2, r0
 80096a6:	d095      	beq.n	80095d4 <_strtod_l+0xa4>
 80096a8:	2500      	movs	r5, #0
 80096aa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80096ac:	1c62      	adds	r2, r4, #1
 80096ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80096b0:	7862      	ldrb	r2, [r4, #1]
 80096b2:	2a2b      	cmp	r2, #43	@ 0x2b
 80096b4:	d077      	beq.n	80097a6 <_strtod_l+0x276>
 80096b6:	2a2d      	cmp	r2, #45	@ 0x2d
 80096b8:	d07b      	beq.n	80097b2 <_strtod_l+0x282>
 80096ba:	f04f 0c00 	mov.w	ip, #0
 80096be:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80096c2:	2909      	cmp	r1, #9
 80096c4:	f240 8082 	bls.w	80097cc <_strtod_l+0x29c>
 80096c8:	9419      	str	r4, [sp, #100]	@ 0x64
 80096ca:	f04f 0800 	mov.w	r8, #0
 80096ce:	e0a2      	b.n	8009816 <_strtod_l+0x2e6>
 80096d0:	2300      	movs	r3, #0
 80096d2:	e7c7      	b.n	8009664 <_strtod_l+0x134>
 80096d4:	2f08      	cmp	r7, #8
 80096d6:	bfd5      	itete	le
 80096d8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80096da:	9908      	ldrgt	r1, [sp, #32]
 80096dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80096e0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80096e4:	f100 0001 	add.w	r0, r0, #1
 80096e8:	bfd4      	ite	le
 80096ea:	930a      	strle	r3, [sp, #40]	@ 0x28
 80096ec:	9308      	strgt	r3, [sp, #32]
 80096ee:	3701      	adds	r7, #1
 80096f0:	9019      	str	r0, [sp, #100]	@ 0x64
 80096f2:	e7bf      	b.n	8009674 <_strtod_l+0x144>
 80096f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096f6:	1c5a      	adds	r2, r3, #1
 80096f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80096fa:	785a      	ldrb	r2, [r3, #1]
 80096fc:	b37f      	cbz	r7, 800975e <_strtod_l+0x22e>
 80096fe:	4681      	mov	r9, r0
 8009700:	463d      	mov	r5, r7
 8009702:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009706:	2b09      	cmp	r3, #9
 8009708:	d912      	bls.n	8009730 <_strtod_l+0x200>
 800970a:	2301      	movs	r3, #1
 800970c:	e7c4      	b.n	8009698 <_strtod_l+0x168>
 800970e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009710:	3001      	adds	r0, #1
 8009712:	1c5a      	adds	r2, r3, #1
 8009714:	9219      	str	r2, [sp, #100]	@ 0x64
 8009716:	785a      	ldrb	r2, [r3, #1]
 8009718:	2a30      	cmp	r2, #48	@ 0x30
 800971a:	d0f8      	beq.n	800970e <_strtod_l+0x1de>
 800971c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009720:	2b08      	cmp	r3, #8
 8009722:	f200 84cb 	bhi.w	800a0bc <_strtod_l+0xb8c>
 8009726:	4681      	mov	r9, r0
 8009728:	2000      	movs	r0, #0
 800972a:	4605      	mov	r5, r0
 800972c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800972e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009730:	3a30      	subs	r2, #48	@ 0x30
 8009732:	f100 0301 	add.w	r3, r0, #1
 8009736:	d02a      	beq.n	800978e <_strtod_l+0x25e>
 8009738:	4499      	add	r9, r3
 800973a:	210a      	movs	r1, #10
 800973c:	462b      	mov	r3, r5
 800973e:	eb00 0c05 	add.w	ip, r0, r5
 8009742:	4563      	cmp	r3, ip
 8009744:	d10d      	bne.n	8009762 <_strtod_l+0x232>
 8009746:	1c69      	adds	r1, r5, #1
 8009748:	4401      	add	r1, r0
 800974a:	4428      	add	r0, r5
 800974c:	2808      	cmp	r0, #8
 800974e:	dc16      	bgt.n	800977e <_strtod_l+0x24e>
 8009750:	230a      	movs	r3, #10
 8009752:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009754:	fb03 2300 	mla	r3, r3, r0, r2
 8009758:	930a      	str	r3, [sp, #40]	@ 0x28
 800975a:	2300      	movs	r3, #0
 800975c:	e018      	b.n	8009790 <_strtod_l+0x260>
 800975e:	4638      	mov	r0, r7
 8009760:	e7da      	b.n	8009718 <_strtod_l+0x1e8>
 8009762:	2b08      	cmp	r3, #8
 8009764:	f103 0301 	add.w	r3, r3, #1
 8009768:	dc03      	bgt.n	8009772 <_strtod_l+0x242>
 800976a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800976c:	434e      	muls	r6, r1
 800976e:	960a      	str	r6, [sp, #40]	@ 0x28
 8009770:	e7e7      	b.n	8009742 <_strtod_l+0x212>
 8009772:	2b10      	cmp	r3, #16
 8009774:	bfde      	ittt	le
 8009776:	9e08      	ldrle	r6, [sp, #32]
 8009778:	434e      	mulle	r6, r1
 800977a:	9608      	strle	r6, [sp, #32]
 800977c:	e7e1      	b.n	8009742 <_strtod_l+0x212>
 800977e:	280f      	cmp	r0, #15
 8009780:	dceb      	bgt.n	800975a <_strtod_l+0x22a>
 8009782:	230a      	movs	r3, #10
 8009784:	9808      	ldr	r0, [sp, #32]
 8009786:	fb03 2300 	mla	r3, r3, r0, r2
 800978a:	9308      	str	r3, [sp, #32]
 800978c:	e7e5      	b.n	800975a <_strtod_l+0x22a>
 800978e:	4629      	mov	r1, r5
 8009790:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009792:	460d      	mov	r5, r1
 8009794:	1c50      	adds	r0, r2, #1
 8009796:	9019      	str	r0, [sp, #100]	@ 0x64
 8009798:	7852      	ldrb	r2, [r2, #1]
 800979a:	4618      	mov	r0, r3
 800979c:	e7b1      	b.n	8009702 <_strtod_l+0x1d2>
 800979e:	f04f 0900 	mov.w	r9, #0
 80097a2:	2301      	movs	r3, #1
 80097a4:	e77d      	b.n	80096a2 <_strtod_l+0x172>
 80097a6:	f04f 0c00 	mov.w	ip, #0
 80097aa:	1ca2      	adds	r2, r4, #2
 80097ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80097ae:	78a2      	ldrb	r2, [r4, #2]
 80097b0:	e785      	b.n	80096be <_strtod_l+0x18e>
 80097b2:	f04f 0c01 	mov.w	ip, #1
 80097b6:	e7f8      	b.n	80097aa <_strtod_l+0x27a>
 80097b8:	0800bdd0 	.word	0x0800bdd0
 80097bc:	7ff00000 	.word	0x7ff00000
 80097c0:	0800bdb8 	.word	0x0800bdb8
 80097c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097c6:	1c51      	adds	r1, r2, #1
 80097c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80097ca:	7852      	ldrb	r2, [r2, #1]
 80097cc:	2a30      	cmp	r2, #48	@ 0x30
 80097ce:	d0f9      	beq.n	80097c4 <_strtod_l+0x294>
 80097d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80097d4:	2908      	cmp	r1, #8
 80097d6:	f63f af78 	bhi.w	80096ca <_strtod_l+0x19a>
 80097da:	f04f 080a 	mov.w	r8, #10
 80097de:	3a30      	subs	r2, #48	@ 0x30
 80097e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80097e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80097e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097e8:	1c56      	adds	r6, r2, #1
 80097ea:	9619      	str	r6, [sp, #100]	@ 0x64
 80097ec:	7852      	ldrb	r2, [r2, #1]
 80097ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80097f2:	f1be 0f09 	cmp.w	lr, #9
 80097f6:	d939      	bls.n	800986c <_strtod_l+0x33c>
 80097f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80097fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80097fe:	1a76      	subs	r6, r6, r1
 8009800:	2e08      	cmp	r6, #8
 8009802:	dc03      	bgt.n	800980c <_strtod_l+0x2dc>
 8009804:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009806:	4588      	cmp	r8, r1
 8009808:	bfa8      	it	ge
 800980a:	4688      	movge	r8, r1
 800980c:	f1bc 0f00 	cmp.w	ip, #0
 8009810:	d001      	beq.n	8009816 <_strtod_l+0x2e6>
 8009812:	f1c8 0800 	rsb	r8, r8, #0
 8009816:	2d00      	cmp	r5, #0
 8009818:	d14e      	bne.n	80098b8 <_strtod_l+0x388>
 800981a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800981c:	4308      	orrs	r0, r1
 800981e:	f47f aec0 	bne.w	80095a2 <_strtod_l+0x72>
 8009822:	2b00      	cmp	r3, #0
 8009824:	f47f aed6 	bne.w	80095d4 <_strtod_l+0xa4>
 8009828:	2a69      	cmp	r2, #105	@ 0x69
 800982a:	d028      	beq.n	800987e <_strtod_l+0x34e>
 800982c:	dc25      	bgt.n	800987a <_strtod_l+0x34a>
 800982e:	2a49      	cmp	r2, #73	@ 0x49
 8009830:	d025      	beq.n	800987e <_strtod_l+0x34e>
 8009832:	2a4e      	cmp	r2, #78	@ 0x4e
 8009834:	f47f aece 	bne.w	80095d4 <_strtod_l+0xa4>
 8009838:	499a      	ldr	r1, [pc, #616]	@ (8009aa4 <_strtod_l+0x574>)
 800983a:	a819      	add	r0, sp, #100	@ 0x64
 800983c:	f001 f9be 	bl	800abbc <__match>
 8009840:	2800      	cmp	r0, #0
 8009842:	f43f aec7 	beq.w	80095d4 <_strtod_l+0xa4>
 8009846:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b28      	cmp	r3, #40	@ 0x28
 800984c:	d12e      	bne.n	80098ac <_strtod_l+0x37c>
 800984e:	4996      	ldr	r1, [pc, #600]	@ (8009aa8 <_strtod_l+0x578>)
 8009850:	aa1c      	add	r2, sp, #112	@ 0x70
 8009852:	a819      	add	r0, sp, #100	@ 0x64
 8009854:	f001 f9c6 	bl	800abe4 <__hexnan>
 8009858:	2805      	cmp	r0, #5
 800985a:	d127      	bne.n	80098ac <_strtod_l+0x37c>
 800985c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800985e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009862:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009866:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800986a:	e69a      	b.n	80095a2 <_strtod_l+0x72>
 800986c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800986e:	fb08 2101 	mla	r1, r8, r1, r2
 8009872:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009876:	920e      	str	r2, [sp, #56]	@ 0x38
 8009878:	e7b5      	b.n	80097e6 <_strtod_l+0x2b6>
 800987a:	2a6e      	cmp	r2, #110	@ 0x6e
 800987c:	e7da      	b.n	8009834 <_strtod_l+0x304>
 800987e:	498b      	ldr	r1, [pc, #556]	@ (8009aac <_strtod_l+0x57c>)
 8009880:	a819      	add	r0, sp, #100	@ 0x64
 8009882:	f001 f99b 	bl	800abbc <__match>
 8009886:	2800      	cmp	r0, #0
 8009888:	f43f aea4 	beq.w	80095d4 <_strtod_l+0xa4>
 800988c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800988e:	4988      	ldr	r1, [pc, #544]	@ (8009ab0 <_strtod_l+0x580>)
 8009890:	3b01      	subs	r3, #1
 8009892:	a819      	add	r0, sp, #100	@ 0x64
 8009894:	9319      	str	r3, [sp, #100]	@ 0x64
 8009896:	f001 f991 	bl	800abbc <__match>
 800989a:	b910      	cbnz	r0, 80098a2 <_strtod_l+0x372>
 800989c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800989e:	3301      	adds	r3, #1
 80098a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80098a2:	f04f 0a00 	mov.w	sl, #0
 80098a6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009ab4 <_strtod_l+0x584>
 80098aa:	e67a      	b.n	80095a2 <_strtod_l+0x72>
 80098ac:	4882      	ldr	r0, [pc, #520]	@ (8009ab8 <_strtod_l+0x588>)
 80098ae:	f000 fec3 	bl	800a638 <nan>
 80098b2:	4682      	mov	sl, r0
 80098b4:	468b      	mov	fp, r1
 80098b6:	e674      	b.n	80095a2 <_strtod_l+0x72>
 80098b8:	eba8 0309 	sub.w	r3, r8, r9
 80098bc:	2f00      	cmp	r7, #0
 80098be:	bf08      	it	eq
 80098c0:	462f      	moveq	r7, r5
 80098c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80098c4:	2d10      	cmp	r5, #16
 80098c6:	462c      	mov	r4, r5
 80098c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ca:	bfa8      	it	ge
 80098cc:	2410      	movge	r4, #16
 80098ce:	f7f6 fd89 	bl	80003e4 <__aeabi_ui2d>
 80098d2:	2d09      	cmp	r5, #9
 80098d4:	4682      	mov	sl, r0
 80098d6:	468b      	mov	fp, r1
 80098d8:	dc11      	bgt.n	80098fe <_strtod_l+0x3ce>
 80098da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f43f ae60 	beq.w	80095a2 <_strtod_l+0x72>
 80098e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e4:	dd76      	ble.n	80099d4 <_strtod_l+0x4a4>
 80098e6:	2b16      	cmp	r3, #22
 80098e8:	dc5d      	bgt.n	80099a6 <_strtod_l+0x476>
 80098ea:	4974      	ldr	r1, [pc, #464]	@ (8009abc <_strtod_l+0x58c>)
 80098ec:	4652      	mov	r2, sl
 80098ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098f2:	465b      	mov	r3, fp
 80098f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098f8:	f7f6 fdee 	bl	80004d8 <__aeabi_dmul>
 80098fc:	e7d9      	b.n	80098b2 <_strtod_l+0x382>
 80098fe:	4b6f      	ldr	r3, [pc, #444]	@ (8009abc <_strtod_l+0x58c>)
 8009900:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009904:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009908:	f7f6 fde6 	bl	80004d8 <__aeabi_dmul>
 800990c:	4682      	mov	sl, r0
 800990e:	9808      	ldr	r0, [sp, #32]
 8009910:	468b      	mov	fp, r1
 8009912:	f7f6 fd67 	bl	80003e4 <__aeabi_ui2d>
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	4650      	mov	r0, sl
 800991c:	4659      	mov	r1, fp
 800991e:	f7f6 fc25 	bl	800016c <__adddf3>
 8009922:	2d0f      	cmp	r5, #15
 8009924:	4682      	mov	sl, r0
 8009926:	468b      	mov	fp, r1
 8009928:	ddd7      	ble.n	80098da <_strtod_l+0x3aa>
 800992a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800992c:	1b2c      	subs	r4, r5, r4
 800992e:	441c      	add	r4, r3
 8009930:	2c00      	cmp	r4, #0
 8009932:	f340 8096 	ble.w	8009a62 <_strtod_l+0x532>
 8009936:	f014 030f 	ands.w	r3, r4, #15
 800993a:	d00a      	beq.n	8009952 <_strtod_l+0x422>
 800993c:	495f      	ldr	r1, [pc, #380]	@ (8009abc <_strtod_l+0x58c>)
 800993e:	4652      	mov	r2, sl
 8009940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009948:	465b      	mov	r3, fp
 800994a:	f7f6 fdc5 	bl	80004d8 <__aeabi_dmul>
 800994e:	4682      	mov	sl, r0
 8009950:	468b      	mov	fp, r1
 8009952:	f034 040f 	bics.w	r4, r4, #15
 8009956:	d073      	beq.n	8009a40 <_strtod_l+0x510>
 8009958:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800995c:	dd48      	ble.n	80099f0 <_strtod_l+0x4c0>
 800995e:	2400      	movs	r4, #0
 8009960:	46a0      	mov	r8, r4
 8009962:	46a1      	mov	r9, r4
 8009964:	940a      	str	r4, [sp, #40]	@ 0x28
 8009966:	2322      	movs	r3, #34	@ 0x22
 8009968:	f04f 0a00 	mov.w	sl, #0
 800996c:	9a05      	ldr	r2, [sp, #20]
 800996e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009ab4 <_strtod_l+0x584>
 8009972:	6013      	str	r3, [r2, #0]
 8009974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009976:	2b00      	cmp	r3, #0
 8009978:	f43f ae13 	beq.w	80095a2 <_strtod_l+0x72>
 800997c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800997e:	9805      	ldr	r0, [sp, #20]
 8009980:	f7ff f94c 	bl	8008c1c <_Bfree>
 8009984:	4649      	mov	r1, r9
 8009986:	9805      	ldr	r0, [sp, #20]
 8009988:	f7ff f948 	bl	8008c1c <_Bfree>
 800998c:	4641      	mov	r1, r8
 800998e:	9805      	ldr	r0, [sp, #20]
 8009990:	f7ff f944 	bl	8008c1c <_Bfree>
 8009994:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009996:	9805      	ldr	r0, [sp, #20]
 8009998:	f7ff f940 	bl	8008c1c <_Bfree>
 800999c:	4621      	mov	r1, r4
 800999e:	9805      	ldr	r0, [sp, #20]
 80099a0:	f7ff f93c 	bl	8008c1c <_Bfree>
 80099a4:	e5fd      	b.n	80095a2 <_strtod_l+0x72>
 80099a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80099ac:	4293      	cmp	r3, r2
 80099ae:	dbbc      	blt.n	800992a <_strtod_l+0x3fa>
 80099b0:	4c42      	ldr	r4, [pc, #264]	@ (8009abc <_strtod_l+0x58c>)
 80099b2:	f1c5 050f 	rsb	r5, r5, #15
 80099b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80099ba:	4652      	mov	r2, sl
 80099bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099c0:	465b      	mov	r3, fp
 80099c2:	f7f6 fd89 	bl	80004d8 <__aeabi_dmul>
 80099c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c8:	1b5d      	subs	r5, r3, r5
 80099ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80099ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80099d2:	e791      	b.n	80098f8 <_strtod_l+0x3c8>
 80099d4:	3316      	adds	r3, #22
 80099d6:	dba8      	blt.n	800992a <_strtod_l+0x3fa>
 80099d8:	4b38      	ldr	r3, [pc, #224]	@ (8009abc <_strtod_l+0x58c>)
 80099da:	eba9 0808 	sub.w	r8, r9, r8
 80099de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80099e2:	4650      	mov	r0, sl
 80099e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80099e8:	4659      	mov	r1, fp
 80099ea:	f7f6 fe9f 	bl	800072c <__aeabi_ddiv>
 80099ee:	e760      	b.n	80098b2 <_strtod_l+0x382>
 80099f0:	4b33      	ldr	r3, [pc, #204]	@ (8009ac0 <_strtod_l+0x590>)
 80099f2:	4650      	mov	r0, sl
 80099f4:	9308      	str	r3, [sp, #32]
 80099f6:	2300      	movs	r3, #0
 80099f8:	4659      	mov	r1, fp
 80099fa:	461e      	mov	r6, r3
 80099fc:	1124      	asrs	r4, r4, #4
 80099fe:	2c01      	cmp	r4, #1
 8009a00:	dc21      	bgt.n	8009a46 <_strtod_l+0x516>
 8009a02:	b10b      	cbz	r3, 8009a08 <_strtod_l+0x4d8>
 8009a04:	4682      	mov	sl, r0
 8009a06:	468b      	mov	fp, r1
 8009a08:	492d      	ldr	r1, [pc, #180]	@ (8009ac0 <_strtod_l+0x590>)
 8009a0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009a0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009a12:	4652      	mov	r2, sl
 8009a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a18:	465b      	mov	r3, fp
 8009a1a:	f7f6 fd5d 	bl	80004d8 <__aeabi_dmul>
 8009a1e:	4b25      	ldr	r3, [pc, #148]	@ (8009ab4 <_strtod_l+0x584>)
 8009a20:	460a      	mov	r2, r1
 8009a22:	400b      	ands	r3, r1
 8009a24:	4927      	ldr	r1, [pc, #156]	@ (8009ac4 <_strtod_l+0x594>)
 8009a26:	4682      	mov	sl, r0
 8009a28:	428b      	cmp	r3, r1
 8009a2a:	d898      	bhi.n	800995e <_strtod_l+0x42e>
 8009a2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009a30:	428b      	cmp	r3, r1
 8009a32:	bf86      	itte	hi
 8009a34:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a38:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009ac8 <_strtod_l+0x598>
 8009a3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009a40:	2300      	movs	r3, #0
 8009a42:	9308      	str	r3, [sp, #32]
 8009a44:	e07a      	b.n	8009b3c <_strtod_l+0x60c>
 8009a46:	07e2      	lsls	r2, r4, #31
 8009a48:	d505      	bpl.n	8009a56 <_strtod_l+0x526>
 8009a4a:	9b08      	ldr	r3, [sp, #32]
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	f7f6 fd42 	bl	80004d8 <__aeabi_dmul>
 8009a54:	2301      	movs	r3, #1
 8009a56:	9a08      	ldr	r2, [sp, #32]
 8009a58:	3601      	adds	r6, #1
 8009a5a:	3208      	adds	r2, #8
 8009a5c:	1064      	asrs	r4, r4, #1
 8009a5e:	9208      	str	r2, [sp, #32]
 8009a60:	e7cd      	b.n	80099fe <_strtod_l+0x4ce>
 8009a62:	d0ed      	beq.n	8009a40 <_strtod_l+0x510>
 8009a64:	4264      	negs	r4, r4
 8009a66:	f014 020f 	ands.w	r2, r4, #15
 8009a6a:	d00a      	beq.n	8009a82 <_strtod_l+0x552>
 8009a6c:	4b13      	ldr	r3, [pc, #76]	@ (8009abc <_strtod_l+0x58c>)
 8009a6e:	4650      	mov	r0, sl
 8009a70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a74:	4659      	mov	r1, fp
 8009a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7a:	f7f6 fe57 	bl	800072c <__aeabi_ddiv>
 8009a7e:	4682      	mov	sl, r0
 8009a80:	468b      	mov	fp, r1
 8009a82:	1124      	asrs	r4, r4, #4
 8009a84:	d0dc      	beq.n	8009a40 <_strtod_l+0x510>
 8009a86:	2c1f      	cmp	r4, #31
 8009a88:	dd20      	ble.n	8009acc <_strtod_l+0x59c>
 8009a8a:	2400      	movs	r4, #0
 8009a8c:	46a0      	mov	r8, r4
 8009a8e:	46a1      	mov	r9, r4
 8009a90:	940a      	str	r4, [sp, #40]	@ 0x28
 8009a92:	2322      	movs	r3, #34	@ 0x22
 8009a94:	9a05      	ldr	r2, [sp, #20]
 8009a96:	f04f 0a00 	mov.w	sl, #0
 8009a9a:	f04f 0b00 	mov.w	fp, #0
 8009a9e:	6013      	str	r3, [r2, #0]
 8009aa0:	e768      	b.n	8009974 <_strtod_l+0x444>
 8009aa2:	bf00      	nop
 8009aa4:	0800bba3 	.word	0x0800bba3
 8009aa8:	0800bdbc 	.word	0x0800bdbc
 8009aac:	0800bb9b 	.word	0x0800bb9b
 8009ab0:	0800bbd2 	.word	0x0800bbd2
 8009ab4:	7ff00000 	.word	0x7ff00000
 8009ab8:	0800bf65 	.word	0x0800bf65
 8009abc:	0800bcf0 	.word	0x0800bcf0
 8009ac0:	0800bcc8 	.word	0x0800bcc8
 8009ac4:	7ca00000 	.word	0x7ca00000
 8009ac8:	7fefffff 	.word	0x7fefffff
 8009acc:	f014 0310 	ands.w	r3, r4, #16
 8009ad0:	bf18      	it	ne
 8009ad2:	236a      	movne	r3, #106	@ 0x6a
 8009ad4:	4650      	mov	r0, sl
 8009ad6:	9308      	str	r3, [sp, #32]
 8009ad8:	4659      	mov	r1, fp
 8009ada:	2300      	movs	r3, #0
 8009adc:	4ea9      	ldr	r6, [pc, #676]	@ (8009d84 <_strtod_l+0x854>)
 8009ade:	07e2      	lsls	r2, r4, #31
 8009ae0:	d504      	bpl.n	8009aec <_strtod_l+0x5bc>
 8009ae2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ae6:	f7f6 fcf7 	bl	80004d8 <__aeabi_dmul>
 8009aea:	2301      	movs	r3, #1
 8009aec:	1064      	asrs	r4, r4, #1
 8009aee:	f106 0608 	add.w	r6, r6, #8
 8009af2:	d1f4      	bne.n	8009ade <_strtod_l+0x5ae>
 8009af4:	b10b      	cbz	r3, 8009afa <_strtod_l+0x5ca>
 8009af6:	4682      	mov	sl, r0
 8009af8:	468b      	mov	fp, r1
 8009afa:	9b08      	ldr	r3, [sp, #32]
 8009afc:	b1b3      	cbz	r3, 8009b2c <_strtod_l+0x5fc>
 8009afe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	4659      	mov	r1, fp
 8009b0a:	dd0f      	ble.n	8009b2c <_strtod_l+0x5fc>
 8009b0c:	2b1f      	cmp	r3, #31
 8009b0e:	dd57      	ble.n	8009bc0 <_strtod_l+0x690>
 8009b10:	2b34      	cmp	r3, #52	@ 0x34
 8009b12:	bfd8      	it	le
 8009b14:	f04f 33ff 	movle.w	r3, #4294967295
 8009b18:	f04f 0a00 	mov.w	sl, #0
 8009b1c:	bfcf      	iteee	gt
 8009b1e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009b22:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009b26:	4093      	lslle	r3, r2
 8009b28:	ea03 0b01 	andle.w	fp, r3, r1
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	2300      	movs	r3, #0
 8009b30:	4650      	mov	r0, sl
 8009b32:	4659      	mov	r1, fp
 8009b34:	f7f6 ff38 	bl	80009a8 <__aeabi_dcmpeq>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d1a6      	bne.n	8009a8a <_strtod_l+0x55a>
 8009b3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b3e:	463a      	mov	r2, r7
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009b44:	462b      	mov	r3, r5
 8009b46:	9805      	ldr	r0, [sp, #20]
 8009b48:	f7ff f8d0 	bl	8008cec <__s2b>
 8009b4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	f43f af05 	beq.w	800995e <_strtod_l+0x42e>
 8009b54:	2400      	movs	r4, #0
 8009b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b58:	eba9 0308 	sub.w	r3, r9, r8
 8009b5c:	2a00      	cmp	r2, #0
 8009b5e:	bfa8      	it	ge
 8009b60:	2300      	movge	r3, #0
 8009b62:	46a0      	mov	r8, r4
 8009b64:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009b6a:	9316      	str	r3, [sp, #88]	@ 0x58
 8009b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b6e:	9805      	ldr	r0, [sp, #20]
 8009b70:	6859      	ldr	r1, [r3, #4]
 8009b72:	f7ff f813 	bl	8008b9c <_Balloc>
 8009b76:	4681      	mov	r9, r0
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	f43f aef4 	beq.w	8009966 <_strtod_l+0x436>
 8009b7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b80:	300c      	adds	r0, #12
 8009b82:	691a      	ldr	r2, [r3, #16]
 8009b84:	f103 010c 	add.w	r1, r3, #12
 8009b88:	3202      	adds	r2, #2
 8009b8a:	0092      	lsls	r2, r2, #2
 8009b8c:	f7fe f8a5 	bl	8007cda <memcpy>
 8009b90:	ab1c      	add	r3, sp, #112	@ 0x70
 8009b92:	9301      	str	r3, [sp, #4]
 8009b94:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	4652      	mov	r2, sl
 8009b9a:	465b      	mov	r3, fp
 8009b9c:	9805      	ldr	r0, [sp, #20]
 8009b9e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009ba2:	f7ff fbd5 	bl	8009350 <__d2b>
 8009ba6:	901a      	str	r0, [sp, #104]	@ 0x68
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	f43f aedc 	beq.w	8009966 <_strtod_l+0x436>
 8009bae:	2101      	movs	r1, #1
 8009bb0:	9805      	ldr	r0, [sp, #20]
 8009bb2:	f7ff f931 	bl	8008e18 <__i2b>
 8009bb6:	4680      	mov	r8, r0
 8009bb8:	b948      	cbnz	r0, 8009bce <_strtod_l+0x69e>
 8009bba:	f04f 0800 	mov.w	r8, #0
 8009bbe:	e6d2      	b.n	8009966 <_strtod_l+0x436>
 8009bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc8:	ea03 0a0a 	and.w	sl, r3, sl
 8009bcc:	e7ae      	b.n	8009b2c <_strtod_l+0x5fc>
 8009bce:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009bd0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009bd2:	2d00      	cmp	r5, #0
 8009bd4:	bfab      	itete	ge
 8009bd6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009bd8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009bda:	18ef      	addge	r7, r5, r3
 8009bdc:	1b5e      	sublt	r6, r3, r5
 8009bde:	9b08      	ldr	r3, [sp, #32]
 8009be0:	bfa8      	it	ge
 8009be2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009be4:	eba5 0503 	sub.w	r5, r5, r3
 8009be8:	4415      	add	r5, r2
 8009bea:	4b67      	ldr	r3, [pc, #412]	@ (8009d88 <_strtod_l+0x858>)
 8009bec:	f105 35ff 	add.w	r5, r5, #4294967295
 8009bf0:	bfb8      	it	lt
 8009bf2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009bf4:	429d      	cmp	r5, r3
 8009bf6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009bfa:	da50      	bge.n	8009c9e <_strtod_l+0x76e>
 8009bfc:	1b5b      	subs	r3, r3, r5
 8009bfe:	2b1f      	cmp	r3, #31
 8009c00:	f04f 0101 	mov.w	r1, #1
 8009c04:	eba2 0203 	sub.w	r2, r2, r3
 8009c08:	dc3d      	bgt.n	8009c86 <_strtod_l+0x756>
 8009c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c0e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c10:	2300      	movs	r3, #0
 8009c12:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c14:	18bd      	adds	r5, r7, r2
 8009c16:	9b08      	ldr	r3, [sp, #32]
 8009c18:	42af      	cmp	r7, r5
 8009c1a:	4416      	add	r6, r2
 8009c1c:	441e      	add	r6, r3
 8009c1e:	463b      	mov	r3, r7
 8009c20:	bfa8      	it	ge
 8009c22:	462b      	movge	r3, r5
 8009c24:	42b3      	cmp	r3, r6
 8009c26:	bfa8      	it	ge
 8009c28:	4633      	movge	r3, r6
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	bfc2      	ittt	gt
 8009c2e:	1aed      	subgt	r5, r5, r3
 8009c30:	1af6      	subgt	r6, r6, r3
 8009c32:	1aff      	subgt	r7, r7, r3
 8009c34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	dd16      	ble.n	8009c68 <_strtod_l+0x738>
 8009c3a:	4641      	mov	r1, r8
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	9805      	ldr	r0, [sp, #20]
 8009c40:	f7ff f9a8 	bl	8008f94 <__pow5mult>
 8009c44:	4680      	mov	r8, r0
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d0b7      	beq.n	8009bba <_strtod_l+0x68a>
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c4e:	9805      	ldr	r0, [sp, #20]
 8009c50:	f7ff f8f8 	bl	8008e44 <__multiply>
 8009c54:	900e      	str	r0, [sp, #56]	@ 0x38
 8009c56:	2800      	cmp	r0, #0
 8009c58:	f43f ae85 	beq.w	8009966 <_strtod_l+0x436>
 8009c5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c5e:	9805      	ldr	r0, [sp, #20]
 8009c60:	f7fe ffdc 	bl	8008c1c <_Bfree>
 8009c64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c66:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c68:	2d00      	cmp	r5, #0
 8009c6a:	dc1d      	bgt.n	8009ca8 <_strtod_l+0x778>
 8009c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	dd23      	ble.n	8009cba <_strtod_l+0x78a>
 8009c72:	4649      	mov	r1, r9
 8009c74:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009c76:	9805      	ldr	r0, [sp, #20]
 8009c78:	f7ff f98c 	bl	8008f94 <__pow5mult>
 8009c7c:	4681      	mov	r9, r0
 8009c7e:	b9e0      	cbnz	r0, 8009cba <_strtod_l+0x78a>
 8009c80:	f04f 0900 	mov.w	r9, #0
 8009c84:	e66f      	b.n	8009966 <_strtod_l+0x436>
 8009c86:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009c8a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009c8e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009c92:	35e2      	adds	r5, #226	@ 0xe2
 8009c94:	fa01 f305 	lsl.w	r3, r1, r5
 8009c98:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c9a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009c9c:	e7ba      	b.n	8009c14 <_strtod_l+0x6e4>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ca6:	e7b5      	b.n	8009c14 <_strtod_l+0x6e4>
 8009ca8:	462a      	mov	r2, r5
 8009caa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cac:	9805      	ldr	r0, [sp, #20]
 8009cae:	f7ff f9cb 	bl	8009048 <__lshift>
 8009cb2:	901a      	str	r0, [sp, #104]	@ 0x68
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d1d9      	bne.n	8009c6c <_strtod_l+0x73c>
 8009cb8:	e655      	b.n	8009966 <_strtod_l+0x436>
 8009cba:	2e00      	cmp	r6, #0
 8009cbc:	dd07      	ble.n	8009cce <_strtod_l+0x79e>
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	4632      	mov	r2, r6
 8009cc2:	9805      	ldr	r0, [sp, #20]
 8009cc4:	f7ff f9c0 	bl	8009048 <__lshift>
 8009cc8:	4681      	mov	r9, r0
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d0d8      	beq.n	8009c80 <_strtod_l+0x750>
 8009cce:	2f00      	cmp	r7, #0
 8009cd0:	dd08      	ble.n	8009ce4 <_strtod_l+0x7b4>
 8009cd2:	4641      	mov	r1, r8
 8009cd4:	463a      	mov	r2, r7
 8009cd6:	9805      	ldr	r0, [sp, #20]
 8009cd8:	f7ff f9b6 	bl	8009048 <__lshift>
 8009cdc:	4680      	mov	r8, r0
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f43f ae41 	beq.w	8009966 <_strtod_l+0x436>
 8009ce4:	464a      	mov	r2, r9
 8009ce6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ce8:	9805      	ldr	r0, [sp, #20]
 8009cea:	f7ff fa35 	bl	8009158 <__mdiff>
 8009cee:	4604      	mov	r4, r0
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	f43f ae38 	beq.w	8009966 <_strtod_l+0x436>
 8009cf6:	68c3      	ldr	r3, [r0, #12]
 8009cf8:	4641      	mov	r1, r8
 8009cfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	60c3      	str	r3, [r0, #12]
 8009d00:	f7ff fa0e 	bl	8009120 <__mcmp>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	da45      	bge.n	8009d94 <_strtod_l+0x864>
 8009d08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d0a:	ea53 030a 	orrs.w	r3, r3, sl
 8009d0e:	d16b      	bne.n	8009de8 <_strtod_l+0x8b8>
 8009d10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d167      	bne.n	8009de8 <_strtod_l+0x8b8>
 8009d18:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d1c:	0d1b      	lsrs	r3, r3, #20
 8009d1e:	051b      	lsls	r3, r3, #20
 8009d20:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d24:	d960      	bls.n	8009de8 <_strtod_l+0x8b8>
 8009d26:	6963      	ldr	r3, [r4, #20]
 8009d28:	b913      	cbnz	r3, 8009d30 <_strtod_l+0x800>
 8009d2a:	6923      	ldr	r3, [r4, #16]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	dd5b      	ble.n	8009de8 <_strtod_l+0x8b8>
 8009d30:	4621      	mov	r1, r4
 8009d32:	2201      	movs	r2, #1
 8009d34:	9805      	ldr	r0, [sp, #20]
 8009d36:	f7ff f987 	bl	8009048 <__lshift>
 8009d3a:	4641      	mov	r1, r8
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	f7ff f9ef 	bl	8009120 <__mcmp>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	dd50      	ble.n	8009de8 <_strtod_l+0x8b8>
 8009d46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d4a:	9a08      	ldr	r2, [sp, #32]
 8009d4c:	0d1b      	lsrs	r3, r3, #20
 8009d4e:	051b      	lsls	r3, r3, #20
 8009d50:	2a00      	cmp	r2, #0
 8009d52:	d06a      	beq.n	8009e2a <_strtod_l+0x8fa>
 8009d54:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d58:	d867      	bhi.n	8009e2a <_strtod_l+0x8fa>
 8009d5a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009d5e:	f67f ae98 	bls.w	8009a92 <_strtod_l+0x562>
 8009d62:	4650      	mov	r0, sl
 8009d64:	4659      	mov	r1, fp
 8009d66:	4b09      	ldr	r3, [pc, #36]	@ (8009d8c <_strtod_l+0x85c>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f7f6 fbb5 	bl	80004d8 <__aeabi_dmul>
 8009d6e:	4b08      	ldr	r3, [pc, #32]	@ (8009d90 <_strtod_l+0x860>)
 8009d70:	4682      	mov	sl, r0
 8009d72:	400b      	ands	r3, r1
 8009d74:	468b      	mov	fp, r1
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f47f ae00 	bne.w	800997c <_strtod_l+0x44c>
 8009d7c:	2322      	movs	r3, #34	@ 0x22
 8009d7e:	9a05      	ldr	r2, [sp, #20]
 8009d80:	6013      	str	r3, [r2, #0]
 8009d82:	e5fb      	b.n	800997c <_strtod_l+0x44c>
 8009d84:	0800bde8 	.word	0x0800bde8
 8009d88:	fffffc02 	.word	0xfffffc02
 8009d8c:	39500000 	.word	0x39500000
 8009d90:	7ff00000 	.word	0x7ff00000
 8009d94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009d98:	d165      	bne.n	8009e66 <_strtod_l+0x936>
 8009d9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009d9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009da0:	b35a      	cbz	r2, 8009dfa <_strtod_l+0x8ca>
 8009da2:	4a99      	ldr	r2, [pc, #612]	@ (800a008 <_strtod_l+0xad8>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d12b      	bne.n	8009e00 <_strtod_l+0x8d0>
 8009da8:	9b08      	ldr	r3, [sp, #32]
 8009daa:	4651      	mov	r1, sl
 8009dac:	b303      	cbz	r3, 8009df0 <_strtod_l+0x8c0>
 8009dae:	465a      	mov	r2, fp
 8009db0:	4b96      	ldr	r3, [pc, #600]	@ (800a00c <_strtod_l+0xadc>)
 8009db2:	4013      	ands	r3, r2
 8009db4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009db8:	f04f 32ff 	mov.w	r2, #4294967295
 8009dbc:	d81b      	bhi.n	8009df6 <_strtod_l+0x8c6>
 8009dbe:	0d1b      	lsrs	r3, r3, #20
 8009dc0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc8:	4299      	cmp	r1, r3
 8009dca:	d119      	bne.n	8009e00 <_strtod_l+0x8d0>
 8009dcc:	4b90      	ldr	r3, [pc, #576]	@ (800a010 <_strtod_l+0xae0>)
 8009dce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d102      	bne.n	8009dda <_strtod_l+0x8aa>
 8009dd4:	3101      	adds	r1, #1
 8009dd6:	f43f adc6 	beq.w	8009966 <_strtod_l+0x436>
 8009dda:	f04f 0a00 	mov.w	sl, #0
 8009dde:	4b8b      	ldr	r3, [pc, #556]	@ (800a00c <_strtod_l+0xadc>)
 8009de0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009de2:	401a      	ands	r2, r3
 8009de4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009de8:	9b08      	ldr	r3, [sp, #32]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1b9      	bne.n	8009d62 <_strtod_l+0x832>
 8009dee:	e5c5      	b.n	800997c <_strtod_l+0x44c>
 8009df0:	f04f 33ff 	mov.w	r3, #4294967295
 8009df4:	e7e8      	b.n	8009dc8 <_strtod_l+0x898>
 8009df6:	4613      	mov	r3, r2
 8009df8:	e7e6      	b.n	8009dc8 <_strtod_l+0x898>
 8009dfa:	ea53 030a 	orrs.w	r3, r3, sl
 8009dfe:	d0a2      	beq.n	8009d46 <_strtod_l+0x816>
 8009e00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e02:	b1db      	cbz	r3, 8009e3c <_strtod_l+0x90c>
 8009e04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e06:	4213      	tst	r3, r2
 8009e08:	d0ee      	beq.n	8009de8 <_strtod_l+0x8b8>
 8009e0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e0c:	4650      	mov	r0, sl
 8009e0e:	4659      	mov	r1, fp
 8009e10:	9a08      	ldr	r2, [sp, #32]
 8009e12:	b1bb      	cbz	r3, 8009e44 <_strtod_l+0x914>
 8009e14:	f7ff fb68 	bl	80094e8 <sulp>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e20:	f7f6 f9a4 	bl	800016c <__adddf3>
 8009e24:	4682      	mov	sl, r0
 8009e26:	468b      	mov	fp, r1
 8009e28:	e7de      	b.n	8009de8 <_strtod_l+0x8b8>
 8009e2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009e2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e32:	f04f 3aff 	mov.w	sl, #4294967295
 8009e36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e3a:	e7d5      	b.n	8009de8 <_strtod_l+0x8b8>
 8009e3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e3e:	ea13 0f0a 	tst.w	r3, sl
 8009e42:	e7e1      	b.n	8009e08 <_strtod_l+0x8d8>
 8009e44:	f7ff fb50 	bl	80094e8 <sulp>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e50:	f7f6 f98a 	bl	8000168 <__aeabi_dsub>
 8009e54:	2200      	movs	r2, #0
 8009e56:	2300      	movs	r3, #0
 8009e58:	4682      	mov	sl, r0
 8009e5a:	468b      	mov	fp, r1
 8009e5c:	f7f6 fda4 	bl	80009a8 <__aeabi_dcmpeq>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d0c1      	beq.n	8009de8 <_strtod_l+0x8b8>
 8009e64:	e615      	b.n	8009a92 <_strtod_l+0x562>
 8009e66:	4641      	mov	r1, r8
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f7ff fac9 	bl	8009400 <__ratio>
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e74:	4606      	mov	r6, r0
 8009e76:	460f      	mov	r7, r1
 8009e78:	f7f6 fdaa 	bl	80009d0 <__aeabi_dcmple>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d06d      	beq.n	8009f5c <_strtod_l+0xa2c>
 8009e80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d178      	bne.n	8009f78 <_strtod_l+0xa48>
 8009e86:	f1ba 0f00 	cmp.w	sl, #0
 8009e8a:	d156      	bne.n	8009f3a <_strtod_l+0xa0a>
 8009e8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d158      	bne.n	8009f48 <_strtod_l+0xa18>
 8009e96:	2200      	movs	r2, #0
 8009e98:	4630      	mov	r0, r6
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	4b5d      	ldr	r3, [pc, #372]	@ (800a014 <_strtod_l+0xae4>)
 8009e9e:	f7f6 fd8d 	bl	80009bc <__aeabi_dcmplt>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d157      	bne.n	8009f56 <_strtod_l+0xa26>
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	2200      	movs	r2, #0
 8009eac:	4b5a      	ldr	r3, [pc, #360]	@ (800a018 <_strtod_l+0xae8>)
 8009eae:	f7f6 fb13 	bl	80004d8 <__aeabi_dmul>
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	460f      	mov	r7, r1
 8009eb6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009eba:	9606      	str	r6, [sp, #24]
 8009ebc:	9307      	str	r3, [sp, #28]
 8009ebe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ec2:	4d52      	ldr	r5, [pc, #328]	@ (800a00c <_strtod_l+0xadc>)
 8009ec4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eca:	401d      	ands	r5, r3
 8009ecc:	4b53      	ldr	r3, [pc, #332]	@ (800a01c <_strtod_l+0xaec>)
 8009ece:	429d      	cmp	r5, r3
 8009ed0:	f040 80aa 	bne.w	800a028 <_strtod_l+0xaf8>
 8009ed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ed6:	4650      	mov	r0, sl
 8009ed8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009edc:	4659      	mov	r1, fp
 8009ede:	f7ff f9cf 	bl	8009280 <__ulp>
 8009ee2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ee6:	f7f6 faf7 	bl	80004d8 <__aeabi_dmul>
 8009eea:	4652      	mov	r2, sl
 8009eec:	465b      	mov	r3, fp
 8009eee:	f7f6 f93d 	bl	800016c <__adddf3>
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4945      	ldr	r1, [pc, #276]	@ (800a00c <_strtod_l+0xadc>)
 8009ef6:	4a4a      	ldr	r2, [pc, #296]	@ (800a020 <_strtod_l+0xaf0>)
 8009ef8:	4019      	ands	r1, r3
 8009efa:	4291      	cmp	r1, r2
 8009efc:	4682      	mov	sl, r0
 8009efe:	d942      	bls.n	8009f86 <_strtod_l+0xa56>
 8009f00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f02:	4b43      	ldr	r3, [pc, #268]	@ (800a010 <_strtod_l+0xae0>)
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d103      	bne.n	8009f10 <_strtod_l+0x9e0>
 8009f08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	f43f ad2b 	beq.w	8009966 <_strtod_l+0x436>
 8009f10:	f04f 3aff 	mov.w	sl, #4294967295
 8009f14:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a010 <_strtod_l+0xae0>
 8009f18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f1a:	9805      	ldr	r0, [sp, #20]
 8009f1c:	f7fe fe7e 	bl	8008c1c <_Bfree>
 8009f20:	4649      	mov	r1, r9
 8009f22:	9805      	ldr	r0, [sp, #20]
 8009f24:	f7fe fe7a 	bl	8008c1c <_Bfree>
 8009f28:	4641      	mov	r1, r8
 8009f2a:	9805      	ldr	r0, [sp, #20]
 8009f2c:	f7fe fe76 	bl	8008c1c <_Bfree>
 8009f30:	4621      	mov	r1, r4
 8009f32:	9805      	ldr	r0, [sp, #20]
 8009f34:	f7fe fe72 	bl	8008c1c <_Bfree>
 8009f38:	e618      	b.n	8009b6c <_strtod_l+0x63c>
 8009f3a:	f1ba 0f01 	cmp.w	sl, #1
 8009f3e:	d103      	bne.n	8009f48 <_strtod_l+0xa18>
 8009f40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f43f ada5 	beq.w	8009a92 <_strtod_l+0x562>
 8009f48:	2200      	movs	r2, #0
 8009f4a:	4b36      	ldr	r3, [pc, #216]	@ (800a024 <_strtod_l+0xaf4>)
 8009f4c:	2600      	movs	r6, #0
 8009f4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f52:	4f30      	ldr	r7, [pc, #192]	@ (800a014 <_strtod_l+0xae4>)
 8009f54:	e7b3      	b.n	8009ebe <_strtod_l+0x98e>
 8009f56:	2600      	movs	r6, #0
 8009f58:	4f2f      	ldr	r7, [pc, #188]	@ (800a018 <_strtod_l+0xae8>)
 8009f5a:	e7ac      	b.n	8009eb6 <_strtod_l+0x986>
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	4639      	mov	r1, r7
 8009f60:	4b2d      	ldr	r3, [pc, #180]	@ (800a018 <_strtod_l+0xae8>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	f7f6 fab8 	bl	80004d8 <__aeabi_dmul>
 8009f68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	460f      	mov	r7, r1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0a1      	beq.n	8009eb6 <_strtod_l+0x986>
 8009f72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009f76:	e7a2      	b.n	8009ebe <_strtod_l+0x98e>
 8009f78:	2200      	movs	r2, #0
 8009f7a:	4b26      	ldr	r3, [pc, #152]	@ (800a014 <_strtod_l+0xae4>)
 8009f7c:	4616      	mov	r6, r2
 8009f7e:	461f      	mov	r7, r3
 8009f80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f84:	e79b      	b.n	8009ebe <_strtod_l+0x98e>
 8009f86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009f8a:	9b08      	ldr	r3, [sp, #32]
 8009f8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1c1      	bne.n	8009f18 <_strtod_l+0x9e8>
 8009f94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f98:	0d1b      	lsrs	r3, r3, #20
 8009f9a:	051b      	lsls	r3, r3, #20
 8009f9c:	429d      	cmp	r5, r3
 8009f9e:	d1bb      	bne.n	8009f18 <_strtod_l+0x9e8>
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	4639      	mov	r1, r7
 8009fa4:	f7f7 f83e 	bl	8001024 <__aeabi_d2lz>
 8009fa8:	f7f6 fa68 	bl	800047c <__aeabi_l2d>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	4639      	mov	r1, r7
 8009fb4:	f7f6 f8d8 	bl	8000168 <__aeabi_dsub>
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4602      	mov	r2, r0
 8009fbc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009fc0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fc6:	ea46 060a 	orr.w	r6, r6, sl
 8009fca:	431e      	orrs	r6, r3
 8009fcc:	d069      	beq.n	800a0a2 <_strtod_l+0xb72>
 8009fce:	a30a      	add	r3, pc, #40	@ (adr r3, 8009ff8 <_strtod_l+0xac8>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f7f6 fcf2 	bl	80009bc <__aeabi_dcmplt>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	f47f accf 	bne.w	800997c <_strtod_l+0x44c>
 8009fde:	a308      	add	r3, pc, #32	@ (adr r3, 800a000 <_strtod_l+0xad0>)
 8009fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fe8:	f7f6 fd06 	bl	80009f8 <__aeabi_dcmpgt>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d093      	beq.n	8009f18 <_strtod_l+0x9e8>
 8009ff0:	e4c4      	b.n	800997c <_strtod_l+0x44c>
 8009ff2:	bf00      	nop
 8009ff4:	f3af 8000 	nop.w
 8009ff8:	94a03595 	.word	0x94a03595
 8009ffc:	3fdfffff 	.word	0x3fdfffff
 800a000:	35afe535 	.word	0x35afe535
 800a004:	3fe00000 	.word	0x3fe00000
 800a008:	000fffff 	.word	0x000fffff
 800a00c:	7ff00000 	.word	0x7ff00000
 800a010:	7fefffff 	.word	0x7fefffff
 800a014:	3ff00000 	.word	0x3ff00000
 800a018:	3fe00000 	.word	0x3fe00000
 800a01c:	7fe00000 	.word	0x7fe00000
 800a020:	7c9fffff 	.word	0x7c9fffff
 800a024:	bff00000 	.word	0xbff00000
 800a028:	9b08      	ldr	r3, [sp, #32]
 800a02a:	b323      	cbz	r3, 800a076 <_strtod_l+0xb46>
 800a02c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a030:	d821      	bhi.n	800a076 <_strtod_l+0xb46>
 800a032:	a327      	add	r3, pc, #156	@ (adr r3, 800a0d0 <_strtod_l+0xba0>)
 800a034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a038:	4630      	mov	r0, r6
 800a03a:	4639      	mov	r1, r7
 800a03c:	f7f6 fcc8 	bl	80009d0 <__aeabi_dcmple>
 800a040:	b1a0      	cbz	r0, 800a06c <_strtod_l+0xb3c>
 800a042:	4639      	mov	r1, r7
 800a044:	4630      	mov	r0, r6
 800a046:	f7f6 fd1f 	bl	8000a88 <__aeabi_d2uiz>
 800a04a:	2801      	cmp	r0, #1
 800a04c:	bf38      	it	cc
 800a04e:	2001      	movcc	r0, #1
 800a050:	f7f6 f9c8 	bl	80003e4 <__aeabi_ui2d>
 800a054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a056:	4606      	mov	r6, r0
 800a058:	460f      	mov	r7, r1
 800a05a:	b9fb      	cbnz	r3, 800a09c <_strtod_l+0xb6c>
 800a05c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a060:	9014      	str	r0, [sp, #80]	@ 0x50
 800a062:	9315      	str	r3, [sp, #84]	@ 0x54
 800a064:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a068:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a06c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a06e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a072:	1b5b      	subs	r3, r3, r5
 800a074:	9311      	str	r3, [sp, #68]	@ 0x44
 800a076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a07a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a07e:	f7ff f8ff 	bl	8009280 <__ulp>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	4650      	mov	r0, sl
 800a088:	4659      	mov	r1, fp
 800a08a:	f7f6 fa25 	bl	80004d8 <__aeabi_dmul>
 800a08e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a092:	f7f6 f86b 	bl	800016c <__adddf3>
 800a096:	4682      	mov	sl, r0
 800a098:	468b      	mov	fp, r1
 800a09a:	e776      	b.n	8009f8a <_strtod_l+0xa5a>
 800a09c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a0a0:	e7e0      	b.n	800a064 <_strtod_l+0xb34>
 800a0a2:	a30d      	add	r3, pc, #52	@ (adr r3, 800a0d8 <_strtod_l+0xba8>)
 800a0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a8:	f7f6 fc88 	bl	80009bc <__aeabi_dcmplt>
 800a0ac:	e79e      	b.n	8009fec <_strtod_l+0xabc>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0b4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	f7ff ba77 	b.w	80095aa <_strtod_l+0x7a>
 800a0bc:	2a65      	cmp	r2, #101	@ 0x65
 800a0be:	f43f ab6e 	beq.w	800979e <_strtod_l+0x26e>
 800a0c2:	2a45      	cmp	r2, #69	@ 0x45
 800a0c4:	f43f ab6b 	beq.w	800979e <_strtod_l+0x26e>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	f7ff bba6 	b.w	800981a <_strtod_l+0x2ea>
 800a0ce:	bf00      	nop
 800a0d0:	ffc00000 	.word	0xffc00000
 800a0d4:	41dfffff 	.word	0x41dfffff
 800a0d8:	94a03595 	.word	0x94a03595
 800a0dc:	3fcfffff 	.word	0x3fcfffff

0800a0e0 <_strtod_r>:
 800a0e0:	4b01      	ldr	r3, [pc, #4]	@ (800a0e8 <_strtod_r+0x8>)
 800a0e2:	f7ff ba25 	b.w	8009530 <_strtod_l>
 800a0e6:	bf00      	nop
 800a0e8:	20000068 	.word	0x20000068

0800a0ec <_strtol_l.constprop.0>:
 800a0ec:	2b24      	cmp	r3, #36	@ 0x24
 800a0ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f2:	4686      	mov	lr, r0
 800a0f4:	4690      	mov	r8, r2
 800a0f6:	d801      	bhi.n	800a0fc <_strtol_l.constprop.0+0x10>
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d106      	bne.n	800a10a <_strtol_l.constprop.0+0x1e>
 800a0fc:	f7fd fdb2 	bl	8007c64 <__errno>
 800a100:	2316      	movs	r3, #22
 800a102:	6003      	str	r3, [r0, #0]
 800a104:	2000      	movs	r0, #0
 800a106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a10a:	460d      	mov	r5, r1
 800a10c:	4833      	ldr	r0, [pc, #204]	@ (800a1dc <_strtol_l.constprop.0+0xf0>)
 800a10e:	462a      	mov	r2, r5
 800a110:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a114:	5d06      	ldrb	r6, [r0, r4]
 800a116:	f016 0608 	ands.w	r6, r6, #8
 800a11a:	d1f8      	bne.n	800a10e <_strtol_l.constprop.0+0x22>
 800a11c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a11e:	d12d      	bne.n	800a17c <_strtol_l.constprop.0+0x90>
 800a120:	2601      	movs	r6, #1
 800a122:	782c      	ldrb	r4, [r5, #0]
 800a124:	1c95      	adds	r5, r2, #2
 800a126:	f033 0210 	bics.w	r2, r3, #16
 800a12a:	d109      	bne.n	800a140 <_strtol_l.constprop.0+0x54>
 800a12c:	2c30      	cmp	r4, #48	@ 0x30
 800a12e:	d12a      	bne.n	800a186 <_strtol_l.constprop.0+0x9a>
 800a130:	782a      	ldrb	r2, [r5, #0]
 800a132:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a136:	2a58      	cmp	r2, #88	@ 0x58
 800a138:	d125      	bne.n	800a186 <_strtol_l.constprop.0+0x9a>
 800a13a:	2310      	movs	r3, #16
 800a13c:	786c      	ldrb	r4, [r5, #1]
 800a13e:	3502      	adds	r5, #2
 800a140:	2200      	movs	r2, #0
 800a142:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a146:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a14a:	fbbc f9f3 	udiv	r9, ip, r3
 800a14e:	4610      	mov	r0, r2
 800a150:	fb03 ca19 	mls	sl, r3, r9, ip
 800a154:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a158:	2f09      	cmp	r7, #9
 800a15a:	d81b      	bhi.n	800a194 <_strtol_l.constprop.0+0xa8>
 800a15c:	463c      	mov	r4, r7
 800a15e:	42a3      	cmp	r3, r4
 800a160:	dd27      	ble.n	800a1b2 <_strtol_l.constprop.0+0xc6>
 800a162:	1c57      	adds	r7, r2, #1
 800a164:	d007      	beq.n	800a176 <_strtol_l.constprop.0+0x8a>
 800a166:	4581      	cmp	r9, r0
 800a168:	d320      	bcc.n	800a1ac <_strtol_l.constprop.0+0xc0>
 800a16a:	d101      	bne.n	800a170 <_strtol_l.constprop.0+0x84>
 800a16c:	45a2      	cmp	sl, r4
 800a16e:	db1d      	blt.n	800a1ac <_strtol_l.constprop.0+0xc0>
 800a170:	2201      	movs	r2, #1
 800a172:	fb00 4003 	mla	r0, r0, r3, r4
 800a176:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a17a:	e7eb      	b.n	800a154 <_strtol_l.constprop.0+0x68>
 800a17c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a17e:	bf04      	itt	eq
 800a180:	782c      	ldrbeq	r4, [r5, #0]
 800a182:	1c95      	addeq	r5, r2, #2
 800a184:	e7cf      	b.n	800a126 <_strtol_l.constprop.0+0x3a>
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1da      	bne.n	800a140 <_strtol_l.constprop.0+0x54>
 800a18a:	2c30      	cmp	r4, #48	@ 0x30
 800a18c:	bf0c      	ite	eq
 800a18e:	2308      	moveq	r3, #8
 800a190:	230a      	movne	r3, #10
 800a192:	e7d5      	b.n	800a140 <_strtol_l.constprop.0+0x54>
 800a194:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a198:	2f19      	cmp	r7, #25
 800a19a:	d801      	bhi.n	800a1a0 <_strtol_l.constprop.0+0xb4>
 800a19c:	3c37      	subs	r4, #55	@ 0x37
 800a19e:	e7de      	b.n	800a15e <_strtol_l.constprop.0+0x72>
 800a1a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a1a4:	2f19      	cmp	r7, #25
 800a1a6:	d804      	bhi.n	800a1b2 <_strtol_l.constprop.0+0xc6>
 800a1a8:	3c57      	subs	r4, #87	@ 0x57
 800a1aa:	e7d8      	b.n	800a15e <_strtol_l.constprop.0+0x72>
 800a1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b0:	e7e1      	b.n	800a176 <_strtol_l.constprop.0+0x8a>
 800a1b2:	1c53      	adds	r3, r2, #1
 800a1b4:	d108      	bne.n	800a1c8 <_strtol_l.constprop.0+0xdc>
 800a1b6:	2322      	movs	r3, #34	@ 0x22
 800a1b8:	4660      	mov	r0, ip
 800a1ba:	f8ce 3000 	str.w	r3, [lr]
 800a1be:	f1b8 0f00 	cmp.w	r8, #0
 800a1c2:	d0a0      	beq.n	800a106 <_strtol_l.constprop.0+0x1a>
 800a1c4:	1e69      	subs	r1, r5, #1
 800a1c6:	e006      	b.n	800a1d6 <_strtol_l.constprop.0+0xea>
 800a1c8:	b106      	cbz	r6, 800a1cc <_strtol_l.constprop.0+0xe0>
 800a1ca:	4240      	negs	r0, r0
 800a1cc:	f1b8 0f00 	cmp.w	r8, #0
 800a1d0:	d099      	beq.n	800a106 <_strtol_l.constprop.0+0x1a>
 800a1d2:	2a00      	cmp	r2, #0
 800a1d4:	d1f6      	bne.n	800a1c4 <_strtol_l.constprop.0+0xd8>
 800a1d6:	f8c8 1000 	str.w	r1, [r8]
 800a1da:	e794      	b.n	800a106 <_strtol_l.constprop.0+0x1a>
 800a1dc:	0800be11 	.word	0x0800be11

0800a1e0 <_strtol_r>:
 800a1e0:	f7ff bf84 	b.w	800a0ec <_strtol_l.constprop.0>

0800a1e4 <__ssputs_r>:
 800a1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e8:	461f      	mov	r7, r3
 800a1ea:	688e      	ldr	r6, [r1, #8]
 800a1ec:	4682      	mov	sl, r0
 800a1ee:	42be      	cmp	r6, r7
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	4690      	mov	r8, r2
 800a1f4:	680b      	ldr	r3, [r1, #0]
 800a1f6:	d82d      	bhi.n	800a254 <__ssputs_r+0x70>
 800a1f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a200:	d026      	beq.n	800a250 <__ssputs_r+0x6c>
 800a202:	6965      	ldr	r5, [r4, #20]
 800a204:	6909      	ldr	r1, [r1, #16]
 800a206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a20a:	eba3 0901 	sub.w	r9, r3, r1
 800a20e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a212:	1c7b      	adds	r3, r7, #1
 800a214:	444b      	add	r3, r9
 800a216:	106d      	asrs	r5, r5, #1
 800a218:	429d      	cmp	r5, r3
 800a21a:	bf38      	it	cc
 800a21c:	461d      	movcc	r5, r3
 800a21e:	0553      	lsls	r3, r2, #21
 800a220:	d527      	bpl.n	800a272 <__ssputs_r+0x8e>
 800a222:	4629      	mov	r1, r5
 800a224:	f7fe fc2e 	bl	8008a84 <_malloc_r>
 800a228:	4606      	mov	r6, r0
 800a22a:	b360      	cbz	r0, 800a286 <__ssputs_r+0xa2>
 800a22c:	464a      	mov	r2, r9
 800a22e:	6921      	ldr	r1, [r4, #16]
 800a230:	f7fd fd53 	bl	8007cda <memcpy>
 800a234:	89a3      	ldrh	r3, [r4, #12]
 800a236:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a23e:	81a3      	strh	r3, [r4, #12]
 800a240:	6126      	str	r6, [r4, #16]
 800a242:	444e      	add	r6, r9
 800a244:	6026      	str	r6, [r4, #0]
 800a246:	463e      	mov	r6, r7
 800a248:	6165      	str	r5, [r4, #20]
 800a24a:	eba5 0509 	sub.w	r5, r5, r9
 800a24e:	60a5      	str	r5, [r4, #8]
 800a250:	42be      	cmp	r6, r7
 800a252:	d900      	bls.n	800a256 <__ssputs_r+0x72>
 800a254:	463e      	mov	r6, r7
 800a256:	4632      	mov	r2, r6
 800a258:	4641      	mov	r1, r8
 800a25a:	6820      	ldr	r0, [r4, #0]
 800a25c:	f000 f9c2 	bl	800a5e4 <memmove>
 800a260:	2000      	movs	r0, #0
 800a262:	68a3      	ldr	r3, [r4, #8]
 800a264:	1b9b      	subs	r3, r3, r6
 800a266:	60a3      	str	r3, [r4, #8]
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	4433      	add	r3, r6
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a272:	462a      	mov	r2, r5
 800a274:	f000 fd63 	bl	800ad3e <_realloc_r>
 800a278:	4606      	mov	r6, r0
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d1e0      	bne.n	800a240 <__ssputs_r+0x5c>
 800a27e:	4650      	mov	r0, sl
 800a280:	6921      	ldr	r1, [r4, #16]
 800a282:	f7fe fb8d 	bl	80089a0 <_free_r>
 800a286:	230c      	movs	r3, #12
 800a288:	f8ca 3000 	str.w	r3, [sl]
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	f04f 30ff 	mov.w	r0, #4294967295
 800a292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a296:	81a3      	strh	r3, [r4, #12]
 800a298:	e7e9      	b.n	800a26e <__ssputs_r+0x8a>
	...

0800a29c <_svfiprintf_r>:
 800a29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a0:	4698      	mov	r8, r3
 800a2a2:	898b      	ldrh	r3, [r1, #12]
 800a2a4:	4607      	mov	r7, r0
 800a2a6:	061b      	lsls	r3, r3, #24
 800a2a8:	460d      	mov	r5, r1
 800a2aa:	4614      	mov	r4, r2
 800a2ac:	b09d      	sub	sp, #116	@ 0x74
 800a2ae:	d510      	bpl.n	800a2d2 <_svfiprintf_r+0x36>
 800a2b0:	690b      	ldr	r3, [r1, #16]
 800a2b2:	b973      	cbnz	r3, 800a2d2 <_svfiprintf_r+0x36>
 800a2b4:	2140      	movs	r1, #64	@ 0x40
 800a2b6:	f7fe fbe5 	bl	8008a84 <_malloc_r>
 800a2ba:	6028      	str	r0, [r5, #0]
 800a2bc:	6128      	str	r0, [r5, #16]
 800a2be:	b930      	cbnz	r0, 800a2ce <_svfiprintf_r+0x32>
 800a2c0:	230c      	movs	r3, #12
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c8:	b01d      	add	sp, #116	@ 0x74
 800a2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ce:	2340      	movs	r3, #64	@ 0x40
 800a2d0:	616b      	str	r3, [r5, #20]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2d6:	2320      	movs	r3, #32
 800a2d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2dc:	2330      	movs	r3, #48	@ 0x30
 800a2de:	f04f 0901 	mov.w	r9, #1
 800a2e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a480 <_svfiprintf_r+0x1e4>
 800a2ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2ee:	4623      	mov	r3, r4
 800a2f0:	469a      	mov	sl, r3
 800a2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2f6:	b10a      	cbz	r2, 800a2fc <_svfiprintf_r+0x60>
 800a2f8:	2a25      	cmp	r2, #37	@ 0x25
 800a2fa:	d1f9      	bne.n	800a2f0 <_svfiprintf_r+0x54>
 800a2fc:	ebba 0b04 	subs.w	fp, sl, r4
 800a300:	d00b      	beq.n	800a31a <_svfiprintf_r+0x7e>
 800a302:	465b      	mov	r3, fp
 800a304:	4622      	mov	r2, r4
 800a306:	4629      	mov	r1, r5
 800a308:	4638      	mov	r0, r7
 800a30a:	f7ff ff6b 	bl	800a1e4 <__ssputs_r>
 800a30e:	3001      	adds	r0, #1
 800a310:	f000 80a7 	beq.w	800a462 <_svfiprintf_r+0x1c6>
 800a314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a316:	445a      	add	r2, fp
 800a318:	9209      	str	r2, [sp, #36]	@ 0x24
 800a31a:	f89a 3000 	ldrb.w	r3, [sl]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 809f 	beq.w	800a462 <_svfiprintf_r+0x1c6>
 800a324:	2300      	movs	r3, #0
 800a326:	f04f 32ff 	mov.w	r2, #4294967295
 800a32a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a32e:	f10a 0a01 	add.w	sl, sl, #1
 800a332:	9304      	str	r3, [sp, #16]
 800a334:	9307      	str	r3, [sp, #28]
 800a336:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a33a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a33c:	4654      	mov	r4, sl
 800a33e:	2205      	movs	r2, #5
 800a340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a344:	484e      	ldr	r0, [pc, #312]	@ (800a480 <_svfiprintf_r+0x1e4>)
 800a346:	f7fd fcba 	bl	8007cbe <memchr>
 800a34a:	9a04      	ldr	r2, [sp, #16]
 800a34c:	b9d8      	cbnz	r0, 800a386 <_svfiprintf_r+0xea>
 800a34e:	06d0      	lsls	r0, r2, #27
 800a350:	bf44      	itt	mi
 800a352:	2320      	movmi	r3, #32
 800a354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a358:	0711      	lsls	r1, r2, #28
 800a35a:	bf44      	itt	mi
 800a35c:	232b      	movmi	r3, #43	@ 0x2b
 800a35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a362:	f89a 3000 	ldrb.w	r3, [sl]
 800a366:	2b2a      	cmp	r3, #42	@ 0x2a
 800a368:	d015      	beq.n	800a396 <_svfiprintf_r+0xfa>
 800a36a:	4654      	mov	r4, sl
 800a36c:	2000      	movs	r0, #0
 800a36e:	f04f 0c0a 	mov.w	ip, #10
 800a372:	9a07      	ldr	r2, [sp, #28]
 800a374:	4621      	mov	r1, r4
 800a376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a37a:	3b30      	subs	r3, #48	@ 0x30
 800a37c:	2b09      	cmp	r3, #9
 800a37e:	d94b      	bls.n	800a418 <_svfiprintf_r+0x17c>
 800a380:	b1b0      	cbz	r0, 800a3b0 <_svfiprintf_r+0x114>
 800a382:	9207      	str	r2, [sp, #28]
 800a384:	e014      	b.n	800a3b0 <_svfiprintf_r+0x114>
 800a386:	eba0 0308 	sub.w	r3, r0, r8
 800a38a:	fa09 f303 	lsl.w	r3, r9, r3
 800a38e:	4313      	orrs	r3, r2
 800a390:	46a2      	mov	sl, r4
 800a392:	9304      	str	r3, [sp, #16]
 800a394:	e7d2      	b.n	800a33c <_svfiprintf_r+0xa0>
 800a396:	9b03      	ldr	r3, [sp, #12]
 800a398:	1d19      	adds	r1, r3, #4
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	9103      	str	r1, [sp, #12]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	bfbb      	ittet	lt
 800a3a2:	425b      	neglt	r3, r3
 800a3a4:	f042 0202 	orrlt.w	r2, r2, #2
 800a3a8:	9307      	strge	r3, [sp, #28]
 800a3aa:	9307      	strlt	r3, [sp, #28]
 800a3ac:	bfb8      	it	lt
 800a3ae:	9204      	strlt	r2, [sp, #16]
 800a3b0:	7823      	ldrb	r3, [r4, #0]
 800a3b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3b4:	d10a      	bne.n	800a3cc <_svfiprintf_r+0x130>
 800a3b6:	7863      	ldrb	r3, [r4, #1]
 800a3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3ba:	d132      	bne.n	800a422 <_svfiprintf_r+0x186>
 800a3bc:	9b03      	ldr	r3, [sp, #12]
 800a3be:	3402      	adds	r4, #2
 800a3c0:	1d1a      	adds	r2, r3, #4
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	9203      	str	r2, [sp, #12]
 800a3c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3ca:	9305      	str	r3, [sp, #20]
 800a3cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a484 <_svfiprintf_r+0x1e8>
 800a3d0:	2203      	movs	r2, #3
 800a3d2:	4650      	mov	r0, sl
 800a3d4:	7821      	ldrb	r1, [r4, #0]
 800a3d6:	f7fd fc72 	bl	8007cbe <memchr>
 800a3da:	b138      	cbz	r0, 800a3ec <_svfiprintf_r+0x150>
 800a3dc:	2240      	movs	r2, #64	@ 0x40
 800a3de:	9b04      	ldr	r3, [sp, #16]
 800a3e0:	eba0 000a 	sub.w	r0, r0, sl
 800a3e4:	4082      	lsls	r2, r0
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	3401      	adds	r4, #1
 800a3ea:	9304      	str	r3, [sp, #16]
 800a3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f0:	2206      	movs	r2, #6
 800a3f2:	4825      	ldr	r0, [pc, #148]	@ (800a488 <_svfiprintf_r+0x1ec>)
 800a3f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3f8:	f7fd fc61 	bl	8007cbe <memchr>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d036      	beq.n	800a46e <_svfiprintf_r+0x1d2>
 800a400:	4b22      	ldr	r3, [pc, #136]	@ (800a48c <_svfiprintf_r+0x1f0>)
 800a402:	bb1b      	cbnz	r3, 800a44c <_svfiprintf_r+0x1b0>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	3307      	adds	r3, #7
 800a408:	f023 0307 	bic.w	r3, r3, #7
 800a40c:	3308      	adds	r3, #8
 800a40e:	9303      	str	r3, [sp, #12]
 800a410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a412:	4433      	add	r3, r6
 800a414:	9309      	str	r3, [sp, #36]	@ 0x24
 800a416:	e76a      	b.n	800a2ee <_svfiprintf_r+0x52>
 800a418:	460c      	mov	r4, r1
 800a41a:	2001      	movs	r0, #1
 800a41c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a420:	e7a8      	b.n	800a374 <_svfiprintf_r+0xd8>
 800a422:	2300      	movs	r3, #0
 800a424:	f04f 0c0a 	mov.w	ip, #10
 800a428:	4619      	mov	r1, r3
 800a42a:	3401      	adds	r4, #1
 800a42c:	9305      	str	r3, [sp, #20]
 800a42e:	4620      	mov	r0, r4
 800a430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a434:	3a30      	subs	r2, #48	@ 0x30
 800a436:	2a09      	cmp	r2, #9
 800a438:	d903      	bls.n	800a442 <_svfiprintf_r+0x1a6>
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d0c6      	beq.n	800a3cc <_svfiprintf_r+0x130>
 800a43e:	9105      	str	r1, [sp, #20]
 800a440:	e7c4      	b.n	800a3cc <_svfiprintf_r+0x130>
 800a442:	4604      	mov	r4, r0
 800a444:	2301      	movs	r3, #1
 800a446:	fb0c 2101 	mla	r1, ip, r1, r2
 800a44a:	e7f0      	b.n	800a42e <_svfiprintf_r+0x192>
 800a44c:	ab03      	add	r3, sp, #12
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	462a      	mov	r2, r5
 800a452:	4638      	mov	r0, r7
 800a454:	4b0e      	ldr	r3, [pc, #56]	@ (800a490 <_svfiprintf_r+0x1f4>)
 800a456:	a904      	add	r1, sp, #16
 800a458:	f7fc fcac 	bl	8006db4 <_printf_float>
 800a45c:	1c42      	adds	r2, r0, #1
 800a45e:	4606      	mov	r6, r0
 800a460:	d1d6      	bne.n	800a410 <_svfiprintf_r+0x174>
 800a462:	89ab      	ldrh	r3, [r5, #12]
 800a464:	065b      	lsls	r3, r3, #25
 800a466:	f53f af2d 	bmi.w	800a2c4 <_svfiprintf_r+0x28>
 800a46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a46c:	e72c      	b.n	800a2c8 <_svfiprintf_r+0x2c>
 800a46e:	ab03      	add	r3, sp, #12
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	462a      	mov	r2, r5
 800a474:	4638      	mov	r0, r7
 800a476:	4b06      	ldr	r3, [pc, #24]	@ (800a490 <_svfiprintf_r+0x1f4>)
 800a478:	a904      	add	r1, sp, #16
 800a47a:	f7fc ff39 	bl	80072f0 <_printf_i>
 800a47e:	e7ed      	b.n	800a45c <_svfiprintf_r+0x1c0>
 800a480:	0800bf11 	.word	0x0800bf11
 800a484:	0800bf17 	.word	0x0800bf17
 800a488:	0800bf1b 	.word	0x0800bf1b
 800a48c:	08006db5 	.word	0x08006db5
 800a490:	0800a1e5 	.word	0x0800a1e5

0800a494 <__sflush_r>:
 800a494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	0716      	lsls	r6, r2, #28
 800a49c:	4605      	mov	r5, r0
 800a49e:	460c      	mov	r4, r1
 800a4a0:	d454      	bmi.n	800a54c <__sflush_r+0xb8>
 800a4a2:	684b      	ldr	r3, [r1, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	dc02      	bgt.n	800a4ae <__sflush_r+0x1a>
 800a4a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	dd48      	ble.n	800a540 <__sflush_r+0xac>
 800a4ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4b0:	2e00      	cmp	r6, #0
 800a4b2:	d045      	beq.n	800a540 <__sflush_r+0xac>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4ba:	682f      	ldr	r7, [r5, #0]
 800a4bc:	6a21      	ldr	r1, [r4, #32]
 800a4be:	602b      	str	r3, [r5, #0]
 800a4c0:	d030      	beq.n	800a524 <__sflush_r+0x90>
 800a4c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4c4:	89a3      	ldrh	r3, [r4, #12]
 800a4c6:	0759      	lsls	r1, r3, #29
 800a4c8:	d505      	bpl.n	800a4d6 <__sflush_r+0x42>
 800a4ca:	6863      	ldr	r3, [r4, #4]
 800a4cc:	1ad2      	subs	r2, r2, r3
 800a4ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4d0:	b10b      	cbz	r3, 800a4d6 <__sflush_r+0x42>
 800a4d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4d4:	1ad2      	subs	r2, r2, r3
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	4628      	mov	r0, r5
 800a4da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4dc:	6a21      	ldr	r1, [r4, #32]
 800a4de:	47b0      	blx	r6
 800a4e0:	1c43      	adds	r3, r0, #1
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	d106      	bne.n	800a4f4 <__sflush_r+0x60>
 800a4e6:	6829      	ldr	r1, [r5, #0]
 800a4e8:	291d      	cmp	r1, #29
 800a4ea:	d82b      	bhi.n	800a544 <__sflush_r+0xb0>
 800a4ec:	4a28      	ldr	r2, [pc, #160]	@ (800a590 <__sflush_r+0xfc>)
 800a4ee:	410a      	asrs	r2, r1
 800a4f0:	07d6      	lsls	r6, r2, #31
 800a4f2:	d427      	bmi.n	800a544 <__sflush_r+0xb0>
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	6062      	str	r2, [r4, #4]
 800a4f8:	6922      	ldr	r2, [r4, #16]
 800a4fa:	04d9      	lsls	r1, r3, #19
 800a4fc:	6022      	str	r2, [r4, #0]
 800a4fe:	d504      	bpl.n	800a50a <__sflush_r+0x76>
 800a500:	1c42      	adds	r2, r0, #1
 800a502:	d101      	bne.n	800a508 <__sflush_r+0x74>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	b903      	cbnz	r3, 800a50a <__sflush_r+0x76>
 800a508:	6560      	str	r0, [r4, #84]	@ 0x54
 800a50a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a50c:	602f      	str	r7, [r5, #0]
 800a50e:	b1b9      	cbz	r1, 800a540 <__sflush_r+0xac>
 800a510:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a514:	4299      	cmp	r1, r3
 800a516:	d002      	beq.n	800a51e <__sflush_r+0x8a>
 800a518:	4628      	mov	r0, r5
 800a51a:	f7fe fa41 	bl	80089a0 <_free_r>
 800a51e:	2300      	movs	r3, #0
 800a520:	6363      	str	r3, [r4, #52]	@ 0x34
 800a522:	e00d      	b.n	800a540 <__sflush_r+0xac>
 800a524:	2301      	movs	r3, #1
 800a526:	4628      	mov	r0, r5
 800a528:	47b0      	blx	r6
 800a52a:	4602      	mov	r2, r0
 800a52c:	1c50      	adds	r0, r2, #1
 800a52e:	d1c9      	bne.n	800a4c4 <__sflush_r+0x30>
 800a530:	682b      	ldr	r3, [r5, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0c6      	beq.n	800a4c4 <__sflush_r+0x30>
 800a536:	2b1d      	cmp	r3, #29
 800a538:	d001      	beq.n	800a53e <__sflush_r+0xaa>
 800a53a:	2b16      	cmp	r3, #22
 800a53c:	d11d      	bne.n	800a57a <__sflush_r+0xe6>
 800a53e:	602f      	str	r7, [r5, #0]
 800a540:	2000      	movs	r0, #0
 800a542:	e021      	b.n	800a588 <__sflush_r+0xf4>
 800a544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a548:	b21b      	sxth	r3, r3
 800a54a:	e01a      	b.n	800a582 <__sflush_r+0xee>
 800a54c:	690f      	ldr	r7, [r1, #16]
 800a54e:	2f00      	cmp	r7, #0
 800a550:	d0f6      	beq.n	800a540 <__sflush_r+0xac>
 800a552:	0793      	lsls	r3, r2, #30
 800a554:	bf18      	it	ne
 800a556:	2300      	movne	r3, #0
 800a558:	680e      	ldr	r6, [r1, #0]
 800a55a:	bf08      	it	eq
 800a55c:	694b      	ldreq	r3, [r1, #20]
 800a55e:	1bf6      	subs	r6, r6, r7
 800a560:	600f      	str	r7, [r1, #0]
 800a562:	608b      	str	r3, [r1, #8]
 800a564:	2e00      	cmp	r6, #0
 800a566:	ddeb      	ble.n	800a540 <__sflush_r+0xac>
 800a568:	4633      	mov	r3, r6
 800a56a:	463a      	mov	r2, r7
 800a56c:	4628      	mov	r0, r5
 800a56e:	6a21      	ldr	r1, [r4, #32]
 800a570:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a574:	47e0      	blx	ip
 800a576:	2800      	cmp	r0, #0
 800a578:	dc07      	bgt.n	800a58a <__sflush_r+0xf6>
 800a57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a57e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a582:	f04f 30ff 	mov.w	r0, #4294967295
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a58a:	4407      	add	r7, r0
 800a58c:	1a36      	subs	r6, r6, r0
 800a58e:	e7e9      	b.n	800a564 <__sflush_r+0xd0>
 800a590:	dfbffffe 	.word	0xdfbffffe

0800a594 <_fflush_r>:
 800a594:	b538      	push	{r3, r4, r5, lr}
 800a596:	690b      	ldr	r3, [r1, #16]
 800a598:	4605      	mov	r5, r0
 800a59a:	460c      	mov	r4, r1
 800a59c:	b913      	cbnz	r3, 800a5a4 <_fflush_r+0x10>
 800a59e:	2500      	movs	r5, #0
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	b118      	cbz	r0, 800a5ae <_fflush_r+0x1a>
 800a5a6:	6a03      	ldr	r3, [r0, #32]
 800a5a8:	b90b      	cbnz	r3, 800a5ae <_fflush_r+0x1a>
 800a5aa:	f7fd fa5d 	bl	8007a68 <__sinit>
 800a5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d0f3      	beq.n	800a59e <_fflush_r+0xa>
 800a5b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5b8:	07d0      	lsls	r0, r2, #31
 800a5ba:	d404      	bmi.n	800a5c6 <_fflush_r+0x32>
 800a5bc:	0599      	lsls	r1, r3, #22
 800a5be:	d402      	bmi.n	800a5c6 <_fflush_r+0x32>
 800a5c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5c2:	f7fd fb7a 	bl	8007cba <__retarget_lock_acquire_recursive>
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	4621      	mov	r1, r4
 800a5ca:	f7ff ff63 	bl	800a494 <__sflush_r>
 800a5ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	07da      	lsls	r2, r3, #31
 800a5d4:	d4e4      	bmi.n	800a5a0 <_fflush_r+0xc>
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	059b      	lsls	r3, r3, #22
 800a5da:	d4e1      	bmi.n	800a5a0 <_fflush_r+0xc>
 800a5dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5de:	f7fd fb6d 	bl	8007cbc <__retarget_lock_release_recursive>
 800a5e2:	e7dd      	b.n	800a5a0 <_fflush_r+0xc>

0800a5e4 <memmove>:
 800a5e4:	4288      	cmp	r0, r1
 800a5e6:	b510      	push	{r4, lr}
 800a5e8:	eb01 0402 	add.w	r4, r1, r2
 800a5ec:	d902      	bls.n	800a5f4 <memmove+0x10>
 800a5ee:	4284      	cmp	r4, r0
 800a5f0:	4623      	mov	r3, r4
 800a5f2:	d807      	bhi.n	800a604 <memmove+0x20>
 800a5f4:	1e43      	subs	r3, r0, #1
 800a5f6:	42a1      	cmp	r1, r4
 800a5f8:	d008      	beq.n	800a60c <memmove+0x28>
 800a5fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a602:	e7f8      	b.n	800a5f6 <memmove+0x12>
 800a604:	4601      	mov	r1, r0
 800a606:	4402      	add	r2, r0
 800a608:	428a      	cmp	r2, r1
 800a60a:	d100      	bne.n	800a60e <memmove+0x2a>
 800a60c:	bd10      	pop	{r4, pc}
 800a60e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a616:	e7f7      	b.n	800a608 <memmove+0x24>

0800a618 <_sbrk_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	2300      	movs	r3, #0
 800a61c:	4d05      	ldr	r5, [pc, #20]	@ (800a634 <_sbrk_r+0x1c>)
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	602b      	str	r3, [r5, #0]
 800a624:	f7f8 fd2c 	bl	8003080 <_sbrk>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d102      	bne.n	800a632 <_sbrk_r+0x1a>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b103      	cbz	r3, 800a632 <_sbrk_r+0x1a>
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	200005b4 	.word	0x200005b4

0800a638 <nan>:
 800a638:	2000      	movs	r0, #0
 800a63a:	4901      	ldr	r1, [pc, #4]	@ (800a640 <nan+0x8>)
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	7ff80000 	.word	0x7ff80000

0800a644 <__assert_func>:
 800a644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a646:	4614      	mov	r4, r2
 800a648:	461a      	mov	r2, r3
 800a64a:	4b09      	ldr	r3, [pc, #36]	@ (800a670 <__assert_func+0x2c>)
 800a64c:	4605      	mov	r5, r0
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68d8      	ldr	r0, [r3, #12]
 800a652:	b954      	cbnz	r4, 800a66a <__assert_func+0x26>
 800a654:	4b07      	ldr	r3, [pc, #28]	@ (800a674 <__assert_func+0x30>)
 800a656:	461c      	mov	r4, r3
 800a658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a65c:	9100      	str	r1, [sp, #0]
 800a65e:	462b      	mov	r3, r5
 800a660:	4905      	ldr	r1, [pc, #20]	@ (800a678 <__assert_func+0x34>)
 800a662:	f000 fba7 	bl	800adb4 <fiprintf>
 800a666:	f000 fbb7 	bl	800add8 <abort>
 800a66a:	4b04      	ldr	r3, [pc, #16]	@ (800a67c <__assert_func+0x38>)
 800a66c:	e7f4      	b.n	800a658 <__assert_func+0x14>
 800a66e:	bf00      	nop
 800a670:	20000018 	.word	0x20000018
 800a674:	0800bf65 	.word	0x0800bf65
 800a678:	0800bf37 	.word	0x0800bf37
 800a67c:	0800bf2a 	.word	0x0800bf2a

0800a680 <_calloc_r>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	fba1 5402 	umull	r5, r4, r1, r2
 800a686:	b93c      	cbnz	r4, 800a698 <_calloc_r+0x18>
 800a688:	4629      	mov	r1, r5
 800a68a:	f7fe f9fb 	bl	8008a84 <_malloc_r>
 800a68e:	4606      	mov	r6, r0
 800a690:	b928      	cbnz	r0, 800a69e <_calloc_r+0x1e>
 800a692:	2600      	movs	r6, #0
 800a694:	4630      	mov	r0, r6
 800a696:	bd70      	pop	{r4, r5, r6, pc}
 800a698:	220c      	movs	r2, #12
 800a69a:	6002      	str	r2, [r0, #0]
 800a69c:	e7f9      	b.n	800a692 <_calloc_r+0x12>
 800a69e:	462a      	mov	r2, r5
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	f7fd fa7a 	bl	8007b9a <memset>
 800a6a6:	e7f5      	b.n	800a694 <_calloc_r+0x14>

0800a6a8 <rshift>:
 800a6a8:	6903      	ldr	r3, [r0, #16]
 800a6aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a6b2:	f100 0414 	add.w	r4, r0, #20
 800a6b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a6ba:	dd46      	ble.n	800a74a <rshift+0xa2>
 800a6bc:	f011 011f 	ands.w	r1, r1, #31
 800a6c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a6c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a6c8:	d10c      	bne.n	800a6e4 <rshift+0x3c>
 800a6ca:	4629      	mov	r1, r5
 800a6cc:	f100 0710 	add.w	r7, r0, #16
 800a6d0:	42b1      	cmp	r1, r6
 800a6d2:	d335      	bcc.n	800a740 <rshift+0x98>
 800a6d4:	1a9b      	subs	r3, r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	1eea      	subs	r2, r5, #3
 800a6da:	4296      	cmp	r6, r2
 800a6dc:	bf38      	it	cc
 800a6de:	2300      	movcc	r3, #0
 800a6e0:	4423      	add	r3, r4
 800a6e2:	e015      	b.n	800a710 <rshift+0x68>
 800a6e4:	46a1      	mov	r9, r4
 800a6e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a6ea:	f1c1 0820 	rsb	r8, r1, #32
 800a6ee:	40cf      	lsrs	r7, r1
 800a6f0:	f105 0e04 	add.w	lr, r5, #4
 800a6f4:	4576      	cmp	r6, lr
 800a6f6:	46f4      	mov	ip, lr
 800a6f8:	d816      	bhi.n	800a728 <rshift+0x80>
 800a6fa:	1a9a      	subs	r2, r3, r2
 800a6fc:	0092      	lsls	r2, r2, #2
 800a6fe:	3a04      	subs	r2, #4
 800a700:	3501      	adds	r5, #1
 800a702:	42ae      	cmp	r6, r5
 800a704:	bf38      	it	cc
 800a706:	2200      	movcc	r2, #0
 800a708:	18a3      	adds	r3, r4, r2
 800a70a:	50a7      	str	r7, [r4, r2]
 800a70c:	b107      	cbz	r7, 800a710 <rshift+0x68>
 800a70e:	3304      	adds	r3, #4
 800a710:	42a3      	cmp	r3, r4
 800a712:	eba3 0204 	sub.w	r2, r3, r4
 800a716:	bf08      	it	eq
 800a718:	2300      	moveq	r3, #0
 800a71a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a71e:	6102      	str	r2, [r0, #16]
 800a720:	bf08      	it	eq
 800a722:	6143      	streq	r3, [r0, #20]
 800a724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a728:	f8dc c000 	ldr.w	ip, [ip]
 800a72c:	fa0c fc08 	lsl.w	ip, ip, r8
 800a730:	ea4c 0707 	orr.w	r7, ip, r7
 800a734:	f849 7b04 	str.w	r7, [r9], #4
 800a738:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a73c:	40cf      	lsrs	r7, r1
 800a73e:	e7d9      	b.n	800a6f4 <rshift+0x4c>
 800a740:	f851 cb04 	ldr.w	ip, [r1], #4
 800a744:	f847 cf04 	str.w	ip, [r7, #4]!
 800a748:	e7c2      	b.n	800a6d0 <rshift+0x28>
 800a74a:	4623      	mov	r3, r4
 800a74c:	e7e0      	b.n	800a710 <rshift+0x68>

0800a74e <__hexdig_fun>:
 800a74e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a752:	2b09      	cmp	r3, #9
 800a754:	d802      	bhi.n	800a75c <__hexdig_fun+0xe>
 800a756:	3820      	subs	r0, #32
 800a758:	b2c0      	uxtb	r0, r0
 800a75a:	4770      	bx	lr
 800a75c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a760:	2b05      	cmp	r3, #5
 800a762:	d801      	bhi.n	800a768 <__hexdig_fun+0x1a>
 800a764:	3847      	subs	r0, #71	@ 0x47
 800a766:	e7f7      	b.n	800a758 <__hexdig_fun+0xa>
 800a768:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a76c:	2b05      	cmp	r3, #5
 800a76e:	d801      	bhi.n	800a774 <__hexdig_fun+0x26>
 800a770:	3827      	subs	r0, #39	@ 0x27
 800a772:	e7f1      	b.n	800a758 <__hexdig_fun+0xa>
 800a774:	2000      	movs	r0, #0
 800a776:	4770      	bx	lr

0800a778 <__gethex>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	468a      	mov	sl, r1
 800a77e:	4690      	mov	r8, r2
 800a780:	b085      	sub	sp, #20
 800a782:	9302      	str	r3, [sp, #8]
 800a784:	680b      	ldr	r3, [r1, #0]
 800a786:	9001      	str	r0, [sp, #4]
 800a788:	1c9c      	adds	r4, r3, #2
 800a78a:	46a1      	mov	r9, r4
 800a78c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a790:	2830      	cmp	r0, #48	@ 0x30
 800a792:	d0fa      	beq.n	800a78a <__gethex+0x12>
 800a794:	eba9 0303 	sub.w	r3, r9, r3
 800a798:	f1a3 0b02 	sub.w	fp, r3, #2
 800a79c:	f7ff ffd7 	bl	800a74e <__hexdig_fun>
 800a7a0:	4605      	mov	r5, r0
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	d168      	bne.n	800a878 <__gethex+0x100>
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	4648      	mov	r0, r9
 800a7aa:	499f      	ldr	r1, [pc, #636]	@ (800aa28 <__gethex+0x2b0>)
 800a7ac:	f7fd f9fd 	bl	8007baa <strncmp>
 800a7b0:	4607      	mov	r7, r0
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d167      	bne.n	800a886 <__gethex+0x10e>
 800a7b6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a7ba:	4626      	mov	r6, r4
 800a7bc:	f7ff ffc7 	bl	800a74e <__hexdig_fun>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d062      	beq.n	800a88a <__gethex+0x112>
 800a7c4:	4623      	mov	r3, r4
 800a7c6:	7818      	ldrb	r0, [r3, #0]
 800a7c8:	4699      	mov	r9, r3
 800a7ca:	2830      	cmp	r0, #48	@ 0x30
 800a7cc:	f103 0301 	add.w	r3, r3, #1
 800a7d0:	d0f9      	beq.n	800a7c6 <__gethex+0x4e>
 800a7d2:	f7ff ffbc 	bl	800a74e <__hexdig_fun>
 800a7d6:	fab0 f580 	clz	r5, r0
 800a7da:	f04f 0b01 	mov.w	fp, #1
 800a7de:	096d      	lsrs	r5, r5, #5
 800a7e0:	464a      	mov	r2, r9
 800a7e2:	4616      	mov	r6, r2
 800a7e4:	7830      	ldrb	r0, [r6, #0]
 800a7e6:	3201      	adds	r2, #1
 800a7e8:	f7ff ffb1 	bl	800a74e <__hexdig_fun>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d1f8      	bne.n	800a7e2 <__gethex+0x6a>
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	498c      	ldr	r1, [pc, #560]	@ (800aa28 <__gethex+0x2b0>)
 800a7f6:	f7fd f9d8 	bl	8007baa <strncmp>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d13f      	bne.n	800a87e <__gethex+0x106>
 800a7fe:	b944      	cbnz	r4, 800a812 <__gethex+0x9a>
 800a800:	1c74      	adds	r4, r6, #1
 800a802:	4622      	mov	r2, r4
 800a804:	4616      	mov	r6, r2
 800a806:	7830      	ldrb	r0, [r6, #0]
 800a808:	3201      	adds	r2, #1
 800a80a:	f7ff ffa0 	bl	800a74e <__hexdig_fun>
 800a80e:	2800      	cmp	r0, #0
 800a810:	d1f8      	bne.n	800a804 <__gethex+0x8c>
 800a812:	1ba4      	subs	r4, r4, r6
 800a814:	00a7      	lsls	r7, r4, #2
 800a816:	7833      	ldrb	r3, [r6, #0]
 800a818:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a81c:	2b50      	cmp	r3, #80	@ 0x50
 800a81e:	d13e      	bne.n	800a89e <__gethex+0x126>
 800a820:	7873      	ldrb	r3, [r6, #1]
 800a822:	2b2b      	cmp	r3, #43	@ 0x2b
 800a824:	d033      	beq.n	800a88e <__gethex+0x116>
 800a826:	2b2d      	cmp	r3, #45	@ 0x2d
 800a828:	d034      	beq.n	800a894 <__gethex+0x11c>
 800a82a:	2400      	movs	r4, #0
 800a82c:	1c71      	adds	r1, r6, #1
 800a82e:	7808      	ldrb	r0, [r1, #0]
 800a830:	f7ff ff8d 	bl	800a74e <__hexdig_fun>
 800a834:	1e43      	subs	r3, r0, #1
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b18      	cmp	r3, #24
 800a83a:	d830      	bhi.n	800a89e <__gethex+0x126>
 800a83c:	f1a0 0210 	sub.w	r2, r0, #16
 800a840:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a844:	f7ff ff83 	bl	800a74e <__hexdig_fun>
 800a848:	f100 3cff 	add.w	ip, r0, #4294967295
 800a84c:	fa5f fc8c 	uxtb.w	ip, ip
 800a850:	f1bc 0f18 	cmp.w	ip, #24
 800a854:	f04f 030a 	mov.w	r3, #10
 800a858:	d91e      	bls.n	800a898 <__gethex+0x120>
 800a85a:	b104      	cbz	r4, 800a85e <__gethex+0xe6>
 800a85c:	4252      	negs	r2, r2
 800a85e:	4417      	add	r7, r2
 800a860:	f8ca 1000 	str.w	r1, [sl]
 800a864:	b1ed      	cbz	r5, 800a8a2 <__gethex+0x12a>
 800a866:	f1bb 0f00 	cmp.w	fp, #0
 800a86a:	bf0c      	ite	eq
 800a86c:	2506      	moveq	r5, #6
 800a86e:	2500      	movne	r5, #0
 800a870:	4628      	mov	r0, r5
 800a872:	b005      	add	sp, #20
 800a874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a878:	2500      	movs	r5, #0
 800a87a:	462c      	mov	r4, r5
 800a87c:	e7b0      	b.n	800a7e0 <__gethex+0x68>
 800a87e:	2c00      	cmp	r4, #0
 800a880:	d1c7      	bne.n	800a812 <__gethex+0x9a>
 800a882:	4627      	mov	r7, r4
 800a884:	e7c7      	b.n	800a816 <__gethex+0x9e>
 800a886:	464e      	mov	r6, r9
 800a888:	462f      	mov	r7, r5
 800a88a:	2501      	movs	r5, #1
 800a88c:	e7c3      	b.n	800a816 <__gethex+0x9e>
 800a88e:	2400      	movs	r4, #0
 800a890:	1cb1      	adds	r1, r6, #2
 800a892:	e7cc      	b.n	800a82e <__gethex+0xb6>
 800a894:	2401      	movs	r4, #1
 800a896:	e7fb      	b.n	800a890 <__gethex+0x118>
 800a898:	fb03 0002 	mla	r0, r3, r2, r0
 800a89c:	e7ce      	b.n	800a83c <__gethex+0xc4>
 800a89e:	4631      	mov	r1, r6
 800a8a0:	e7de      	b.n	800a860 <__gethex+0xe8>
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	eba6 0309 	sub.w	r3, r6, r9
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	2b07      	cmp	r3, #7
 800a8ac:	dc0a      	bgt.n	800a8c4 <__gethex+0x14c>
 800a8ae:	9801      	ldr	r0, [sp, #4]
 800a8b0:	f7fe f974 	bl	8008b9c <_Balloc>
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	b940      	cbnz	r0, 800a8ca <__gethex+0x152>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	21e4      	movs	r1, #228	@ 0xe4
 800a8bc:	4b5b      	ldr	r3, [pc, #364]	@ (800aa2c <__gethex+0x2b4>)
 800a8be:	485c      	ldr	r0, [pc, #368]	@ (800aa30 <__gethex+0x2b8>)
 800a8c0:	f7ff fec0 	bl	800a644 <__assert_func>
 800a8c4:	3101      	adds	r1, #1
 800a8c6:	105b      	asrs	r3, r3, #1
 800a8c8:	e7ef      	b.n	800a8aa <__gethex+0x132>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f100 0a14 	add.w	sl, r0, #20
 800a8d0:	4655      	mov	r5, sl
 800a8d2:	469b      	mov	fp, r3
 800a8d4:	45b1      	cmp	r9, r6
 800a8d6:	d337      	bcc.n	800a948 <__gethex+0x1d0>
 800a8d8:	f845 bb04 	str.w	fp, [r5], #4
 800a8dc:	eba5 050a 	sub.w	r5, r5, sl
 800a8e0:	10ad      	asrs	r5, r5, #2
 800a8e2:	6125      	str	r5, [r4, #16]
 800a8e4:	4658      	mov	r0, fp
 800a8e6:	f7fe fa4b 	bl	8008d80 <__hi0bits>
 800a8ea:	016d      	lsls	r5, r5, #5
 800a8ec:	f8d8 6000 	ldr.w	r6, [r8]
 800a8f0:	1a2d      	subs	r5, r5, r0
 800a8f2:	42b5      	cmp	r5, r6
 800a8f4:	dd54      	ble.n	800a9a0 <__gethex+0x228>
 800a8f6:	1bad      	subs	r5, r5, r6
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f7fe fdd3 	bl	80094a6 <__any_on>
 800a900:	4681      	mov	r9, r0
 800a902:	b178      	cbz	r0, 800a924 <__gethex+0x1ac>
 800a904:	f04f 0901 	mov.w	r9, #1
 800a908:	1e6b      	subs	r3, r5, #1
 800a90a:	1159      	asrs	r1, r3, #5
 800a90c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a910:	f003 021f 	and.w	r2, r3, #31
 800a914:	fa09 f202 	lsl.w	r2, r9, r2
 800a918:	420a      	tst	r2, r1
 800a91a:	d003      	beq.n	800a924 <__gethex+0x1ac>
 800a91c:	454b      	cmp	r3, r9
 800a91e:	dc36      	bgt.n	800a98e <__gethex+0x216>
 800a920:	f04f 0902 	mov.w	r9, #2
 800a924:	4629      	mov	r1, r5
 800a926:	4620      	mov	r0, r4
 800a928:	f7ff febe 	bl	800a6a8 <rshift>
 800a92c:	442f      	add	r7, r5
 800a92e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a932:	42bb      	cmp	r3, r7
 800a934:	da42      	bge.n	800a9bc <__gethex+0x244>
 800a936:	4621      	mov	r1, r4
 800a938:	9801      	ldr	r0, [sp, #4]
 800a93a:	f7fe f96f 	bl	8008c1c <_Bfree>
 800a93e:	2300      	movs	r3, #0
 800a940:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a942:	25a3      	movs	r5, #163	@ 0xa3
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	e793      	b.n	800a870 <__gethex+0xf8>
 800a948:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a94c:	2a2e      	cmp	r2, #46	@ 0x2e
 800a94e:	d012      	beq.n	800a976 <__gethex+0x1fe>
 800a950:	2b20      	cmp	r3, #32
 800a952:	d104      	bne.n	800a95e <__gethex+0x1e6>
 800a954:	f845 bb04 	str.w	fp, [r5], #4
 800a958:	f04f 0b00 	mov.w	fp, #0
 800a95c:	465b      	mov	r3, fp
 800a95e:	7830      	ldrb	r0, [r6, #0]
 800a960:	9303      	str	r3, [sp, #12]
 800a962:	f7ff fef4 	bl	800a74e <__hexdig_fun>
 800a966:	9b03      	ldr	r3, [sp, #12]
 800a968:	f000 000f 	and.w	r0, r0, #15
 800a96c:	4098      	lsls	r0, r3
 800a96e:	ea4b 0b00 	orr.w	fp, fp, r0
 800a972:	3304      	adds	r3, #4
 800a974:	e7ae      	b.n	800a8d4 <__gethex+0x15c>
 800a976:	45b1      	cmp	r9, r6
 800a978:	d8ea      	bhi.n	800a950 <__gethex+0x1d8>
 800a97a:	2201      	movs	r2, #1
 800a97c:	4630      	mov	r0, r6
 800a97e:	492a      	ldr	r1, [pc, #168]	@ (800aa28 <__gethex+0x2b0>)
 800a980:	9303      	str	r3, [sp, #12]
 800a982:	f7fd f912 	bl	8007baa <strncmp>
 800a986:	9b03      	ldr	r3, [sp, #12]
 800a988:	2800      	cmp	r0, #0
 800a98a:	d1e1      	bne.n	800a950 <__gethex+0x1d8>
 800a98c:	e7a2      	b.n	800a8d4 <__gethex+0x15c>
 800a98e:	4620      	mov	r0, r4
 800a990:	1ea9      	subs	r1, r5, #2
 800a992:	f7fe fd88 	bl	80094a6 <__any_on>
 800a996:	2800      	cmp	r0, #0
 800a998:	d0c2      	beq.n	800a920 <__gethex+0x1a8>
 800a99a:	f04f 0903 	mov.w	r9, #3
 800a99e:	e7c1      	b.n	800a924 <__gethex+0x1ac>
 800a9a0:	da09      	bge.n	800a9b6 <__gethex+0x23e>
 800a9a2:	1b75      	subs	r5, r6, r5
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	462a      	mov	r2, r5
 800a9a8:	9801      	ldr	r0, [sp, #4]
 800a9aa:	f7fe fb4d 	bl	8009048 <__lshift>
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	1b7f      	subs	r7, r7, r5
 800a9b2:	f100 0a14 	add.w	sl, r0, #20
 800a9b6:	f04f 0900 	mov.w	r9, #0
 800a9ba:	e7b8      	b.n	800a92e <__gethex+0x1b6>
 800a9bc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a9c0:	42bd      	cmp	r5, r7
 800a9c2:	dd6f      	ble.n	800aaa4 <__gethex+0x32c>
 800a9c4:	1bed      	subs	r5, r5, r7
 800a9c6:	42ae      	cmp	r6, r5
 800a9c8:	dc34      	bgt.n	800aa34 <__gethex+0x2bc>
 800a9ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d022      	beq.n	800aa18 <__gethex+0x2a0>
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d024      	beq.n	800aa20 <__gethex+0x2a8>
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d115      	bne.n	800aa06 <__gethex+0x28e>
 800a9da:	42ae      	cmp	r6, r5
 800a9dc:	d113      	bne.n	800aa06 <__gethex+0x28e>
 800a9de:	2e01      	cmp	r6, #1
 800a9e0:	d10b      	bne.n	800a9fa <__gethex+0x282>
 800a9e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a9e6:	9a02      	ldr	r2, [sp, #8]
 800a9e8:	2562      	movs	r5, #98	@ 0x62
 800a9ea:	6013      	str	r3, [r2, #0]
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	6123      	str	r3, [r4, #16]
 800a9f0:	f8ca 3000 	str.w	r3, [sl]
 800a9f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9f6:	601c      	str	r4, [r3, #0]
 800a9f8:	e73a      	b.n	800a870 <__gethex+0xf8>
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	1e71      	subs	r1, r6, #1
 800a9fe:	f7fe fd52 	bl	80094a6 <__any_on>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d1ed      	bne.n	800a9e2 <__gethex+0x26a>
 800aa06:	4621      	mov	r1, r4
 800aa08:	9801      	ldr	r0, [sp, #4]
 800aa0a:	f7fe f907 	bl	8008c1c <_Bfree>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa12:	2550      	movs	r5, #80	@ 0x50
 800aa14:	6013      	str	r3, [r2, #0]
 800aa16:	e72b      	b.n	800a870 <__gethex+0xf8>
 800aa18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1f3      	bne.n	800aa06 <__gethex+0x28e>
 800aa1e:	e7e0      	b.n	800a9e2 <__gethex+0x26a>
 800aa20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1dd      	bne.n	800a9e2 <__gethex+0x26a>
 800aa26:	e7ee      	b.n	800aa06 <__gethex+0x28e>
 800aa28:	0800bdb8 	.word	0x0800bdb8
 800aa2c:	0800bc4b 	.word	0x0800bc4b
 800aa30:	0800bf66 	.word	0x0800bf66
 800aa34:	1e6f      	subs	r7, r5, #1
 800aa36:	f1b9 0f00 	cmp.w	r9, #0
 800aa3a:	d130      	bne.n	800aa9e <__gethex+0x326>
 800aa3c:	b127      	cbz	r7, 800aa48 <__gethex+0x2d0>
 800aa3e:	4639      	mov	r1, r7
 800aa40:	4620      	mov	r0, r4
 800aa42:	f7fe fd30 	bl	80094a6 <__any_on>
 800aa46:	4681      	mov	r9, r0
 800aa48:	2301      	movs	r3, #1
 800aa4a:	4629      	mov	r1, r5
 800aa4c:	1b76      	subs	r6, r6, r5
 800aa4e:	2502      	movs	r5, #2
 800aa50:	117a      	asrs	r2, r7, #5
 800aa52:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aa56:	f007 071f 	and.w	r7, r7, #31
 800aa5a:	40bb      	lsls	r3, r7
 800aa5c:	4213      	tst	r3, r2
 800aa5e:	4620      	mov	r0, r4
 800aa60:	bf18      	it	ne
 800aa62:	f049 0902 	orrne.w	r9, r9, #2
 800aa66:	f7ff fe1f 	bl	800a6a8 <rshift>
 800aa6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800aa6e:	f1b9 0f00 	cmp.w	r9, #0
 800aa72:	d047      	beq.n	800ab04 <__gethex+0x38c>
 800aa74:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d015      	beq.n	800aaa8 <__gethex+0x330>
 800aa7c:	2b03      	cmp	r3, #3
 800aa7e:	d017      	beq.n	800aab0 <__gethex+0x338>
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d109      	bne.n	800aa98 <__gethex+0x320>
 800aa84:	f019 0f02 	tst.w	r9, #2
 800aa88:	d006      	beq.n	800aa98 <__gethex+0x320>
 800aa8a:	f8da 3000 	ldr.w	r3, [sl]
 800aa8e:	ea49 0903 	orr.w	r9, r9, r3
 800aa92:	f019 0f01 	tst.w	r9, #1
 800aa96:	d10e      	bne.n	800aab6 <__gethex+0x33e>
 800aa98:	f045 0510 	orr.w	r5, r5, #16
 800aa9c:	e032      	b.n	800ab04 <__gethex+0x38c>
 800aa9e:	f04f 0901 	mov.w	r9, #1
 800aaa2:	e7d1      	b.n	800aa48 <__gethex+0x2d0>
 800aaa4:	2501      	movs	r5, #1
 800aaa6:	e7e2      	b.n	800aa6e <__gethex+0x2f6>
 800aaa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaaa:	f1c3 0301 	rsb	r3, r3, #1
 800aaae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0f0      	beq.n	800aa98 <__gethex+0x320>
 800aab6:	f04f 0c00 	mov.w	ip, #0
 800aaba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aabe:	f104 0314 	add.w	r3, r4, #20
 800aac2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aac6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aaca:	4618      	mov	r0, r3
 800aacc:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aad4:	d01b      	beq.n	800ab0e <__gethex+0x396>
 800aad6:	3201      	adds	r2, #1
 800aad8:	6002      	str	r2, [r0, #0]
 800aada:	2d02      	cmp	r5, #2
 800aadc:	f104 0314 	add.w	r3, r4, #20
 800aae0:	d13c      	bne.n	800ab5c <__gethex+0x3e4>
 800aae2:	f8d8 2000 	ldr.w	r2, [r8]
 800aae6:	3a01      	subs	r2, #1
 800aae8:	42b2      	cmp	r2, r6
 800aaea:	d109      	bne.n	800ab00 <__gethex+0x388>
 800aaec:	2201      	movs	r2, #1
 800aaee:	1171      	asrs	r1, r6, #5
 800aaf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aaf4:	f006 061f 	and.w	r6, r6, #31
 800aaf8:	fa02 f606 	lsl.w	r6, r2, r6
 800aafc:	421e      	tst	r6, r3
 800aafe:	d13a      	bne.n	800ab76 <__gethex+0x3fe>
 800ab00:	f045 0520 	orr.w	r5, r5, #32
 800ab04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab06:	601c      	str	r4, [r3, #0]
 800ab08:	9b02      	ldr	r3, [sp, #8]
 800ab0a:	601f      	str	r7, [r3, #0]
 800ab0c:	e6b0      	b.n	800a870 <__gethex+0xf8>
 800ab0e:	4299      	cmp	r1, r3
 800ab10:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab14:	d8d9      	bhi.n	800aaca <__gethex+0x352>
 800ab16:	68a3      	ldr	r3, [r4, #8]
 800ab18:	459b      	cmp	fp, r3
 800ab1a:	db17      	blt.n	800ab4c <__gethex+0x3d4>
 800ab1c:	6861      	ldr	r1, [r4, #4]
 800ab1e:	9801      	ldr	r0, [sp, #4]
 800ab20:	3101      	adds	r1, #1
 800ab22:	f7fe f83b 	bl	8008b9c <_Balloc>
 800ab26:	4681      	mov	r9, r0
 800ab28:	b918      	cbnz	r0, 800ab32 <__gethex+0x3ba>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	2184      	movs	r1, #132	@ 0x84
 800ab2e:	4b19      	ldr	r3, [pc, #100]	@ (800ab94 <__gethex+0x41c>)
 800ab30:	e6c5      	b.n	800a8be <__gethex+0x146>
 800ab32:	6922      	ldr	r2, [r4, #16]
 800ab34:	f104 010c 	add.w	r1, r4, #12
 800ab38:	3202      	adds	r2, #2
 800ab3a:	0092      	lsls	r2, r2, #2
 800ab3c:	300c      	adds	r0, #12
 800ab3e:	f7fd f8cc 	bl	8007cda <memcpy>
 800ab42:	4621      	mov	r1, r4
 800ab44:	9801      	ldr	r0, [sp, #4]
 800ab46:	f7fe f869 	bl	8008c1c <_Bfree>
 800ab4a:	464c      	mov	r4, r9
 800ab4c:	6923      	ldr	r3, [r4, #16]
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	6122      	str	r2, [r4, #16]
 800ab52:	2201      	movs	r2, #1
 800ab54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab58:	615a      	str	r2, [r3, #20]
 800ab5a:	e7be      	b.n	800aada <__gethex+0x362>
 800ab5c:	6922      	ldr	r2, [r4, #16]
 800ab5e:	455a      	cmp	r2, fp
 800ab60:	dd0b      	ble.n	800ab7a <__gethex+0x402>
 800ab62:	2101      	movs	r1, #1
 800ab64:	4620      	mov	r0, r4
 800ab66:	f7ff fd9f 	bl	800a6a8 <rshift>
 800ab6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab6e:	3701      	adds	r7, #1
 800ab70:	42bb      	cmp	r3, r7
 800ab72:	f6ff aee0 	blt.w	800a936 <__gethex+0x1be>
 800ab76:	2501      	movs	r5, #1
 800ab78:	e7c2      	b.n	800ab00 <__gethex+0x388>
 800ab7a:	f016 061f 	ands.w	r6, r6, #31
 800ab7e:	d0fa      	beq.n	800ab76 <__gethex+0x3fe>
 800ab80:	4453      	add	r3, sl
 800ab82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ab86:	f7fe f8fb 	bl	8008d80 <__hi0bits>
 800ab8a:	f1c6 0620 	rsb	r6, r6, #32
 800ab8e:	42b0      	cmp	r0, r6
 800ab90:	dbe7      	blt.n	800ab62 <__gethex+0x3ea>
 800ab92:	e7f0      	b.n	800ab76 <__gethex+0x3fe>
 800ab94:	0800bc4b 	.word	0x0800bc4b

0800ab98 <L_shift>:
 800ab98:	f1c2 0208 	rsb	r2, r2, #8
 800ab9c:	0092      	lsls	r2, r2, #2
 800ab9e:	b570      	push	{r4, r5, r6, lr}
 800aba0:	f1c2 0620 	rsb	r6, r2, #32
 800aba4:	6843      	ldr	r3, [r0, #4]
 800aba6:	6804      	ldr	r4, [r0, #0]
 800aba8:	fa03 f506 	lsl.w	r5, r3, r6
 800abac:	432c      	orrs	r4, r5
 800abae:	40d3      	lsrs	r3, r2
 800abb0:	6004      	str	r4, [r0, #0]
 800abb2:	f840 3f04 	str.w	r3, [r0, #4]!
 800abb6:	4288      	cmp	r0, r1
 800abb8:	d3f4      	bcc.n	800aba4 <L_shift+0xc>
 800abba:	bd70      	pop	{r4, r5, r6, pc}

0800abbc <__match>:
 800abbc:	b530      	push	{r4, r5, lr}
 800abbe:	6803      	ldr	r3, [r0, #0]
 800abc0:	3301      	adds	r3, #1
 800abc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abc6:	b914      	cbnz	r4, 800abce <__match+0x12>
 800abc8:	6003      	str	r3, [r0, #0]
 800abca:	2001      	movs	r0, #1
 800abcc:	bd30      	pop	{r4, r5, pc}
 800abce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800abd6:	2d19      	cmp	r5, #25
 800abd8:	bf98      	it	ls
 800abda:	3220      	addls	r2, #32
 800abdc:	42a2      	cmp	r2, r4
 800abde:	d0f0      	beq.n	800abc2 <__match+0x6>
 800abe0:	2000      	movs	r0, #0
 800abe2:	e7f3      	b.n	800abcc <__match+0x10>

0800abe4 <__hexnan>:
 800abe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe8:	2500      	movs	r5, #0
 800abea:	680b      	ldr	r3, [r1, #0]
 800abec:	4682      	mov	sl, r0
 800abee:	115e      	asrs	r6, r3, #5
 800abf0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800abf4:	f013 031f 	ands.w	r3, r3, #31
 800abf8:	bf18      	it	ne
 800abfa:	3604      	addne	r6, #4
 800abfc:	1f37      	subs	r7, r6, #4
 800abfe:	4690      	mov	r8, r2
 800ac00:	46b9      	mov	r9, r7
 800ac02:	463c      	mov	r4, r7
 800ac04:	46ab      	mov	fp, r5
 800ac06:	b087      	sub	sp, #28
 800ac08:	6801      	ldr	r1, [r0, #0]
 800ac0a:	9301      	str	r3, [sp, #4]
 800ac0c:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac10:	9502      	str	r5, [sp, #8]
 800ac12:	784a      	ldrb	r2, [r1, #1]
 800ac14:	1c4b      	adds	r3, r1, #1
 800ac16:	9303      	str	r3, [sp, #12]
 800ac18:	b342      	cbz	r2, 800ac6c <__hexnan+0x88>
 800ac1a:	4610      	mov	r0, r2
 800ac1c:	9105      	str	r1, [sp, #20]
 800ac1e:	9204      	str	r2, [sp, #16]
 800ac20:	f7ff fd95 	bl	800a74e <__hexdig_fun>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d151      	bne.n	800accc <__hexnan+0xe8>
 800ac28:	9a04      	ldr	r2, [sp, #16]
 800ac2a:	9905      	ldr	r1, [sp, #20]
 800ac2c:	2a20      	cmp	r2, #32
 800ac2e:	d818      	bhi.n	800ac62 <__hexnan+0x7e>
 800ac30:	9b02      	ldr	r3, [sp, #8]
 800ac32:	459b      	cmp	fp, r3
 800ac34:	dd13      	ble.n	800ac5e <__hexnan+0x7a>
 800ac36:	454c      	cmp	r4, r9
 800ac38:	d206      	bcs.n	800ac48 <__hexnan+0x64>
 800ac3a:	2d07      	cmp	r5, #7
 800ac3c:	dc04      	bgt.n	800ac48 <__hexnan+0x64>
 800ac3e:	462a      	mov	r2, r5
 800ac40:	4649      	mov	r1, r9
 800ac42:	4620      	mov	r0, r4
 800ac44:	f7ff ffa8 	bl	800ab98 <L_shift>
 800ac48:	4544      	cmp	r4, r8
 800ac4a:	d952      	bls.n	800acf2 <__hexnan+0x10e>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	f1a4 0904 	sub.w	r9, r4, #4
 800ac52:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac56:	461d      	mov	r5, r3
 800ac58:	464c      	mov	r4, r9
 800ac5a:	f8cd b008 	str.w	fp, [sp, #8]
 800ac5e:	9903      	ldr	r1, [sp, #12]
 800ac60:	e7d7      	b.n	800ac12 <__hexnan+0x2e>
 800ac62:	2a29      	cmp	r2, #41	@ 0x29
 800ac64:	d157      	bne.n	800ad16 <__hexnan+0x132>
 800ac66:	3102      	adds	r1, #2
 800ac68:	f8ca 1000 	str.w	r1, [sl]
 800ac6c:	f1bb 0f00 	cmp.w	fp, #0
 800ac70:	d051      	beq.n	800ad16 <__hexnan+0x132>
 800ac72:	454c      	cmp	r4, r9
 800ac74:	d206      	bcs.n	800ac84 <__hexnan+0xa0>
 800ac76:	2d07      	cmp	r5, #7
 800ac78:	dc04      	bgt.n	800ac84 <__hexnan+0xa0>
 800ac7a:	462a      	mov	r2, r5
 800ac7c:	4649      	mov	r1, r9
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f7ff ff8a 	bl	800ab98 <L_shift>
 800ac84:	4544      	cmp	r4, r8
 800ac86:	d936      	bls.n	800acf6 <__hexnan+0x112>
 800ac88:	4623      	mov	r3, r4
 800ac8a:	f1a8 0204 	sub.w	r2, r8, #4
 800ac8e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac92:	429f      	cmp	r7, r3
 800ac94:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac98:	d2f9      	bcs.n	800ac8e <__hexnan+0xaa>
 800ac9a:	1b3b      	subs	r3, r7, r4
 800ac9c:	f023 0303 	bic.w	r3, r3, #3
 800aca0:	3304      	adds	r3, #4
 800aca2:	3401      	adds	r4, #1
 800aca4:	3e03      	subs	r6, #3
 800aca6:	42b4      	cmp	r4, r6
 800aca8:	bf88      	it	hi
 800acaa:	2304      	movhi	r3, #4
 800acac:	2200      	movs	r2, #0
 800acae:	4443      	add	r3, r8
 800acb0:	f843 2b04 	str.w	r2, [r3], #4
 800acb4:	429f      	cmp	r7, r3
 800acb6:	d2fb      	bcs.n	800acb0 <__hexnan+0xcc>
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	b91b      	cbnz	r3, 800acc4 <__hexnan+0xe0>
 800acbc:	4547      	cmp	r7, r8
 800acbe:	d128      	bne.n	800ad12 <__hexnan+0x12e>
 800acc0:	2301      	movs	r3, #1
 800acc2:	603b      	str	r3, [r7, #0]
 800acc4:	2005      	movs	r0, #5
 800acc6:	b007      	add	sp, #28
 800acc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800accc:	3501      	adds	r5, #1
 800acce:	2d08      	cmp	r5, #8
 800acd0:	f10b 0b01 	add.w	fp, fp, #1
 800acd4:	dd06      	ble.n	800ace4 <__hexnan+0x100>
 800acd6:	4544      	cmp	r4, r8
 800acd8:	d9c1      	bls.n	800ac5e <__hexnan+0x7a>
 800acda:	2300      	movs	r3, #0
 800acdc:	2501      	movs	r5, #1
 800acde:	f844 3c04 	str.w	r3, [r4, #-4]
 800ace2:	3c04      	subs	r4, #4
 800ace4:	6822      	ldr	r2, [r4, #0]
 800ace6:	f000 000f 	and.w	r0, r0, #15
 800acea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800acee:	6020      	str	r0, [r4, #0]
 800acf0:	e7b5      	b.n	800ac5e <__hexnan+0x7a>
 800acf2:	2508      	movs	r5, #8
 800acf4:	e7b3      	b.n	800ac5e <__hexnan+0x7a>
 800acf6:	9b01      	ldr	r3, [sp, #4]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0dd      	beq.n	800acb8 <__hexnan+0xd4>
 800acfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ad00:	f1c3 0320 	rsb	r3, r3, #32
 800ad04:	40da      	lsrs	r2, r3
 800ad06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	f846 3c04 	str.w	r3, [r6, #-4]
 800ad10:	e7d2      	b.n	800acb8 <__hexnan+0xd4>
 800ad12:	3f04      	subs	r7, #4
 800ad14:	e7d0      	b.n	800acb8 <__hexnan+0xd4>
 800ad16:	2004      	movs	r0, #4
 800ad18:	e7d5      	b.n	800acc6 <__hexnan+0xe2>

0800ad1a <__ascii_mbtowc>:
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	b901      	cbnz	r1, 800ad20 <__ascii_mbtowc+0x6>
 800ad1e:	a901      	add	r1, sp, #4
 800ad20:	b142      	cbz	r2, 800ad34 <__ascii_mbtowc+0x1a>
 800ad22:	b14b      	cbz	r3, 800ad38 <__ascii_mbtowc+0x1e>
 800ad24:	7813      	ldrb	r3, [r2, #0]
 800ad26:	600b      	str	r3, [r1, #0]
 800ad28:	7812      	ldrb	r2, [r2, #0]
 800ad2a:	1e10      	subs	r0, r2, #0
 800ad2c:	bf18      	it	ne
 800ad2e:	2001      	movne	r0, #1
 800ad30:	b002      	add	sp, #8
 800ad32:	4770      	bx	lr
 800ad34:	4610      	mov	r0, r2
 800ad36:	e7fb      	b.n	800ad30 <__ascii_mbtowc+0x16>
 800ad38:	f06f 0001 	mvn.w	r0, #1
 800ad3c:	e7f8      	b.n	800ad30 <__ascii_mbtowc+0x16>

0800ad3e <_realloc_r>:
 800ad3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad42:	4680      	mov	r8, r0
 800ad44:	4615      	mov	r5, r2
 800ad46:	460c      	mov	r4, r1
 800ad48:	b921      	cbnz	r1, 800ad54 <_realloc_r+0x16>
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad50:	f7fd be98 	b.w	8008a84 <_malloc_r>
 800ad54:	b92a      	cbnz	r2, 800ad62 <_realloc_r+0x24>
 800ad56:	f7fd fe23 	bl	80089a0 <_free_r>
 800ad5a:	2400      	movs	r4, #0
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad62:	f000 f840 	bl	800ade6 <_malloc_usable_size_r>
 800ad66:	4285      	cmp	r5, r0
 800ad68:	4606      	mov	r6, r0
 800ad6a:	d802      	bhi.n	800ad72 <_realloc_r+0x34>
 800ad6c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad70:	d8f4      	bhi.n	800ad5c <_realloc_r+0x1e>
 800ad72:	4629      	mov	r1, r5
 800ad74:	4640      	mov	r0, r8
 800ad76:	f7fd fe85 	bl	8008a84 <_malloc_r>
 800ad7a:	4607      	mov	r7, r0
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d0ec      	beq.n	800ad5a <_realloc_r+0x1c>
 800ad80:	42b5      	cmp	r5, r6
 800ad82:	462a      	mov	r2, r5
 800ad84:	4621      	mov	r1, r4
 800ad86:	bf28      	it	cs
 800ad88:	4632      	movcs	r2, r6
 800ad8a:	f7fc ffa6 	bl	8007cda <memcpy>
 800ad8e:	4621      	mov	r1, r4
 800ad90:	4640      	mov	r0, r8
 800ad92:	f7fd fe05 	bl	80089a0 <_free_r>
 800ad96:	463c      	mov	r4, r7
 800ad98:	e7e0      	b.n	800ad5c <_realloc_r+0x1e>

0800ad9a <__ascii_wctomb>:
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	4608      	mov	r0, r1
 800ad9e:	b141      	cbz	r1, 800adb2 <__ascii_wctomb+0x18>
 800ada0:	2aff      	cmp	r2, #255	@ 0xff
 800ada2:	d904      	bls.n	800adae <__ascii_wctomb+0x14>
 800ada4:	228a      	movs	r2, #138	@ 0x8a
 800ada6:	f04f 30ff 	mov.w	r0, #4294967295
 800adaa:	601a      	str	r2, [r3, #0]
 800adac:	4770      	bx	lr
 800adae:	2001      	movs	r0, #1
 800adb0:	700a      	strb	r2, [r1, #0]
 800adb2:	4770      	bx	lr

0800adb4 <fiprintf>:
 800adb4:	b40e      	push	{r1, r2, r3}
 800adb6:	b503      	push	{r0, r1, lr}
 800adb8:	4601      	mov	r1, r0
 800adba:	ab03      	add	r3, sp, #12
 800adbc:	4805      	ldr	r0, [pc, #20]	@ (800add4 <fiprintf+0x20>)
 800adbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc2:	6800      	ldr	r0, [r0, #0]
 800adc4:	9301      	str	r3, [sp, #4]
 800adc6:	f000 f83d 	bl	800ae44 <_vfiprintf_r>
 800adca:	b002      	add	sp, #8
 800adcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800add0:	b003      	add	sp, #12
 800add2:	4770      	bx	lr
 800add4:	20000018 	.word	0x20000018

0800add8 <abort>:
 800add8:	2006      	movs	r0, #6
 800adda:	b508      	push	{r3, lr}
 800addc:	f000 fa06 	bl	800b1ec <raise>
 800ade0:	2001      	movs	r0, #1
 800ade2:	f7f8 f8d8 	bl	8002f96 <_exit>

0800ade6 <_malloc_usable_size_r>:
 800ade6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adea:	1f18      	subs	r0, r3, #4
 800adec:	2b00      	cmp	r3, #0
 800adee:	bfbc      	itt	lt
 800adf0:	580b      	ldrlt	r3, [r1, r0]
 800adf2:	18c0      	addlt	r0, r0, r3
 800adf4:	4770      	bx	lr

0800adf6 <__sfputc_r>:
 800adf6:	6893      	ldr	r3, [r2, #8]
 800adf8:	b410      	push	{r4}
 800adfa:	3b01      	subs	r3, #1
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	6093      	str	r3, [r2, #8]
 800ae00:	da07      	bge.n	800ae12 <__sfputc_r+0x1c>
 800ae02:	6994      	ldr	r4, [r2, #24]
 800ae04:	42a3      	cmp	r3, r4
 800ae06:	db01      	blt.n	800ae0c <__sfputc_r+0x16>
 800ae08:	290a      	cmp	r1, #10
 800ae0a:	d102      	bne.n	800ae12 <__sfputc_r+0x1c>
 800ae0c:	bc10      	pop	{r4}
 800ae0e:	f000 b931 	b.w	800b074 <__swbuf_r>
 800ae12:	6813      	ldr	r3, [r2, #0]
 800ae14:	1c58      	adds	r0, r3, #1
 800ae16:	6010      	str	r0, [r2, #0]
 800ae18:	7019      	strb	r1, [r3, #0]
 800ae1a:	4608      	mov	r0, r1
 800ae1c:	bc10      	pop	{r4}
 800ae1e:	4770      	bx	lr

0800ae20 <__sfputs_r>:
 800ae20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae22:	4606      	mov	r6, r0
 800ae24:	460f      	mov	r7, r1
 800ae26:	4614      	mov	r4, r2
 800ae28:	18d5      	adds	r5, r2, r3
 800ae2a:	42ac      	cmp	r4, r5
 800ae2c:	d101      	bne.n	800ae32 <__sfputs_r+0x12>
 800ae2e:	2000      	movs	r0, #0
 800ae30:	e007      	b.n	800ae42 <__sfputs_r+0x22>
 800ae32:	463a      	mov	r2, r7
 800ae34:	4630      	mov	r0, r6
 800ae36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae3a:	f7ff ffdc 	bl	800adf6 <__sfputc_r>
 800ae3e:	1c43      	adds	r3, r0, #1
 800ae40:	d1f3      	bne.n	800ae2a <__sfputs_r+0xa>
 800ae42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae44 <_vfiprintf_r>:
 800ae44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae48:	460d      	mov	r5, r1
 800ae4a:	4614      	mov	r4, r2
 800ae4c:	4698      	mov	r8, r3
 800ae4e:	4606      	mov	r6, r0
 800ae50:	b09d      	sub	sp, #116	@ 0x74
 800ae52:	b118      	cbz	r0, 800ae5c <_vfiprintf_r+0x18>
 800ae54:	6a03      	ldr	r3, [r0, #32]
 800ae56:	b90b      	cbnz	r3, 800ae5c <_vfiprintf_r+0x18>
 800ae58:	f7fc fe06 	bl	8007a68 <__sinit>
 800ae5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae5e:	07d9      	lsls	r1, r3, #31
 800ae60:	d405      	bmi.n	800ae6e <_vfiprintf_r+0x2a>
 800ae62:	89ab      	ldrh	r3, [r5, #12]
 800ae64:	059a      	lsls	r2, r3, #22
 800ae66:	d402      	bmi.n	800ae6e <_vfiprintf_r+0x2a>
 800ae68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae6a:	f7fc ff26 	bl	8007cba <__retarget_lock_acquire_recursive>
 800ae6e:	89ab      	ldrh	r3, [r5, #12]
 800ae70:	071b      	lsls	r3, r3, #28
 800ae72:	d501      	bpl.n	800ae78 <_vfiprintf_r+0x34>
 800ae74:	692b      	ldr	r3, [r5, #16]
 800ae76:	b99b      	cbnz	r3, 800aea0 <_vfiprintf_r+0x5c>
 800ae78:	4629      	mov	r1, r5
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f000 f938 	bl	800b0f0 <__swsetup_r>
 800ae80:	b170      	cbz	r0, 800aea0 <_vfiprintf_r+0x5c>
 800ae82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae84:	07dc      	lsls	r4, r3, #31
 800ae86:	d504      	bpl.n	800ae92 <_vfiprintf_r+0x4e>
 800ae88:	f04f 30ff 	mov.w	r0, #4294967295
 800ae8c:	b01d      	add	sp, #116	@ 0x74
 800ae8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae92:	89ab      	ldrh	r3, [r5, #12]
 800ae94:	0598      	lsls	r0, r3, #22
 800ae96:	d4f7      	bmi.n	800ae88 <_vfiprintf_r+0x44>
 800ae98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae9a:	f7fc ff0f 	bl	8007cbc <__retarget_lock_release_recursive>
 800ae9e:	e7f3      	b.n	800ae88 <_vfiprintf_r+0x44>
 800aea0:	2300      	movs	r3, #0
 800aea2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aea4:	2320      	movs	r3, #32
 800aea6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aeaa:	2330      	movs	r3, #48	@ 0x30
 800aeac:	f04f 0901 	mov.w	r9, #1
 800aeb0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeb4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b060 <_vfiprintf_r+0x21c>
 800aeb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aebc:	4623      	mov	r3, r4
 800aebe:	469a      	mov	sl, r3
 800aec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aec4:	b10a      	cbz	r2, 800aeca <_vfiprintf_r+0x86>
 800aec6:	2a25      	cmp	r2, #37	@ 0x25
 800aec8:	d1f9      	bne.n	800aebe <_vfiprintf_r+0x7a>
 800aeca:	ebba 0b04 	subs.w	fp, sl, r4
 800aece:	d00b      	beq.n	800aee8 <_vfiprintf_r+0xa4>
 800aed0:	465b      	mov	r3, fp
 800aed2:	4622      	mov	r2, r4
 800aed4:	4629      	mov	r1, r5
 800aed6:	4630      	mov	r0, r6
 800aed8:	f7ff ffa2 	bl	800ae20 <__sfputs_r>
 800aedc:	3001      	adds	r0, #1
 800aede:	f000 80a7 	beq.w	800b030 <_vfiprintf_r+0x1ec>
 800aee2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aee4:	445a      	add	r2, fp
 800aee6:	9209      	str	r2, [sp, #36]	@ 0x24
 800aee8:	f89a 3000 	ldrb.w	r3, [sl]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f000 809f 	beq.w	800b030 <_vfiprintf_r+0x1ec>
 800aef2:	2300      	movs	r3, #0
 800aef4:	f04f 32ff 	mov.w	r2, #4294967295
 800aef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aefc:	f10a 0a01 	add.w	sl, sl, #1
 800af00:	9304      	str	r3, [sp, #16]
 800af02:	9307      	str	r3, [sp, #28]
 800af04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af08:	931a      	str	r3, [sp, #104]	@ 0x68
 800af0a:	4654      	mov	r4, sl
 800af0c:	2205      	movs	r2, #5
 800af0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af12:	4853      	ldr	r0, [pc, #332]	@ (800b060 <_vfiprintf_r+0x21c>)
 800af14:	f7fc fed3 	bl	8007cbe <memchr>
 800af18:	9a04      	ldr	r2, [sp, #16]
 800af1a:	b9d8      	cbnz	r0, 800af54 <_vfiprintf_r+0x110>
 800af1c:	06d1      	lsls	r1, r2, #27
 800af1e:	bf44      	itt	mi
 800af20:	2320      	movmi	r3, #32
 800af22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af26:	0713      	lsls	r3, r2, #28
 800af28:	bf44      	itt	mi
 800af2a:	232b      	movmi	r3, #43	@ 0x2b
 800af2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af30:	f89a 3000 	ldrb.w	r3, [sl]
 800af34:	2b2a      	cmp	r3, #42	@ 0x2a
 800af36:	d015      	beq.n	800af64 <_vfiprintf_r+0x120>
 800af38:	4654      	mov	r4, sl
 800af3a:	2000      	movs	r0, #0
 800af3c:	f04f 0c0a 	mov.w	ip, #10
 800af40:	9a07      	ldr	r2, [sp, #28]
 800af42:	4621      	mov	r1, r4
 800af44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af48:	3b30      	subs	r3, #48	@ 0x30
 800af4a:	2b09      	cmp	r3, #9
 800af4c:	d94b      	bls.n	800afe6 <_vfiprintf_r+0x1a2>
 800af4e:	b1b0      	cbz	r0, 800af7e <_vfiprintf_r+0x13a>
 800af50:	9207      	str	r2, [sp, #28]
 800af52:	e014      	b.n	800af7e <_vfiprintf_r+0x13a>
 800af54:	eba0 0308 	sub.w	r3, r0, r8
 800af58:	fa09 f303 	lsl.w	r3, r9, r3
 800af5c:	4313      	orrs	r3, r2
 800af5e:	46a2      	mov	sl, r4
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	e7d2      	b.n	800af0a <_vfiprintf_r+0xc6>
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	1d19      	adds	r1, r3, #4
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	9103      	str	r1, [sp, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	bfbb      	ittet	lt
 800af70:	425b      	neglt	r3, r3
 800af72:	f042 0202 	orrlt.w	r2, r2, #2
 800af76:	9307      	strge	r3, [sp, #28]
 800af78:	9307      	strlt	r3, [sp, #28]
 800af7a:	bfb8      	it	lt
 800af7c:	9204      	strlt	r2, [sp, #16]
 800af7e:	7823      	ldrb	r3, [r4, #0]
 800af80:	2b2e      	cmp	r3, #46	@ 0x2e
 800af82:	d10a      	bne.n	800af9a <_vfiprintf_r+0x156>
 800af84:	7863      	ldrb	r3, [r4, #1]
 800af86:	2b2a      	cmp	r3, #42	@ 0x2a
 800af88:	d132      	bne.n	800aff0 <_vfiprintf_r+0x1ac>
 800af8a:	9b03      	ldr	r3, [sp, #12]
 800af8c:	3402      	adds	r4, #2
 800af8e:	1d1a      	adds	r2, r3, #4
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	9203      	str	r2, [sp, #12]
 800af94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af98:	9305      	str	r3, [sp, #20]
 800af9a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b064 <_vfiprintf_r+0x220>
 800af9e:	2203      	movs	r2, #3
 800afa0:	4650      	mov	r0, sl
 800afa2:	7821      	ldrb	r1, [r4, #0]
 800afa4:	f7fc fe8b 	bl	8007cbe <memchr>
 800afa8:	b138      	cbz	r0, 800afba <_vfiprintf_r+0x176>
 800afaa:	2240      	movs	r2, #64	@ 0x40
 800afac:	9b04      	ldr	r3, [sp, #16]
 800afae:	eba0 000a 	sub.w	r0, r0, sl
 800afb2:	4082      	lsls	r2, r0
 800afb4:	4313      	orrs	r3, r2
 800afb6:	3401      	adds	r4, #1
 800afb8:	9304      	str	r3, [sp, #16]
 800afba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afbe:	2206      	movs	r2, #6
 800afc0:	4829      	ldr	r0, [pc, #164]	@ (800b068 <_vfiprintf_r+0x224>)
 800afc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afc6:	f7fc fe7a 	bl	8007cbe <memchr>
 800afca:	2800      	cmp	r0, #0
 800afcc:	d03f      	beq.n	800b04e <_vfiprintf_r+0x20a>
 800afce:	4b27      	ldr	r3, [pc, #156]	@ (800b06c <_vfiprintf_r+0x228>)
 800afd0:	bb1b      	cbnz	r3, 800b01a <_vfiprintf_r+0x1d6>
 800afd2:	9b03      	ldr	r3, [sp, #12]
 800afd4:	3307      	adds	r3, #7
 800afd6:	f023 0307 	bic.w	r3, r3, #7
 800afda:	3308      	adds	r3, #8
 800afdc:	9303      	str	r3, [sp, #12]
 800afde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe0:	443b      	add	r3, r7
 800afe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800afe4:	e76a      	b.n	800aebc <_vfiprintf_r+0x78>
 800afe6:	460c      	mov	r4, r1
 800afe8:	2001      	movs	r0, #1
 800afea:	fb0c 3202 	mla	r2, ip, r2, r3
 800afee:	e7a8      	b.n	800af42 <_vfiprintf_r+0xfe>
 800aff0:	2300      	movs	r3, #0
 800aff2:	f04f 0c0a 	mov.w	ip, #10
 800aff6:	4619      	mov	r1, r3
 800aff8:	3401      	adds	r4, #1
 800affa:	9305      	str	r3, [sp, #20]
 800affc:	4620      	mov	r0, r4
 800affe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b002:	3a30      	subs	r2, #48	@ 0x30
 800b004:	2a09      	cmp	r2, #9
 800b006:	d903      	bls.n	800b010 <_vfiprintf_r+0x1cc>
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d0c6      	beq.n	800af9a <_vfiprintf_r+0x156>
 800b00c:	9105      	str	r1, [sp, #20]
 800b00e:	e7c4      	b.n	800af9a <_vfiprintf_r+0x156>
 800b010:	4604      	mov	r4, r0
 800b012:	2301      	movs	r3, #1
 800b014:	fb0c 2101 	mla	r1, ip, r1, r2
 800b018:	e7f0      	b.n	800affc <_vfiprintf_r+0x1b8>
 800b01a:	ab03      	add	r3, sp, #12
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	462a      	mov	r2, r5
 800b020:	4630      	mov	r0, r6
 800b022:	4b13      	ldr	r3, [pc, #76]	@ (800b070 <_vfiprintf_r+0x22c>)
 800b024:	a904      	add	r1, sp, #16
 800b026:	f7fb fec5 	bl	8006db4 <_printf_float>
 800b02a:	4607      	mov	r7, r0
 800b02c:	1c78      	adds	r0, r7, #1
 800b02e:	d1d6      	bne.n	800afde <_vfiprintf_r+0x19a>
 800b030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b032:	07d9      	lsls	r1, r3, #31
 800b034:	d405      	bmi.n	800b042 <_vfiprintf_r+0x1fe>
 800b036:	89ab      	ldrh	r3, [r5, #12]
 800b038:	059a      	lsls	r2, r3, #22
 800b03a:	d402      	bmi.n	800b042 <_vfiprintf_r+0x1fe>
 800b03c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b03e:	f7fc fe3d 	bl	8007cbc <__retarget_lock_release_recursive>
 800b042:	89ab      	ldrh	r3, [r5, #12]
 800b044:	065b      	lsls	r3, r3, #25
 800b046:	f53f af1f 	bmi.w	800ae88 <_vfiprintf_r+0x44>
 800b04a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b04c:	e71e      	b.n	800ae8c <_vfiprintf_r+0x48>
 800b04e:	ab03      	add	r3, sp, #12
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	462a      	mov	r2, r5
 800b054:	4630      	mov	r0, r6
 800b056:	4b06      	ldr	r3, [pc, #24]	@ (800b070 <_vfiprintf_r+0x22c>)
 800b058:	a904      	add	r1, sp, #16
 800b05a:	f7fc f949 	bl	80072f0 <_printf_i>
 800b05e:	e7e4      	b.n	800b02a <_vfiprintf_r+0x1e6>
 800b060:	0800bf11 	.word	0x0800bf11
 800b064:	0800bf17 	.word	0x0800bf17
 800b068:	0800bf1b 	.word	0x0800bf1b
 800b06c:	08006db5 	.word	0x08006db5
 800b070:	0800ae21 	.word	0x0800ae21

0800b074 <__swbuf_r>:
 800b074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b076:	460e      	mov	r6, r1
 800b078:	4614      	mov	r4, r2
 800b07a:	4605      	mov	r5, r0
 800b07c:	b118      	cbz	r0, 800b086 <__swbuf_r+0x12>
 800b07e:	6a03      	ldr	r3, [r0, #32]
 800b080:	b90b      	cbnz	r3, 800b086 <__swbuf_r+0x12>
 800b082:	f7fc fcf1 	bl	8007a68 <__sinit>
 800b086:	69a3      	ldr	r3, [r4, #24]
 800b088:	60a3      	str	r3, [r4, #8]
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	071a      	lsls	r2, r3, #28
 800b08e:	d501      	bpl.n	800b094 <__swbuf_r+0x20>
 800b090:	6923      	ldr	r3, [r4, #16]
 800b092:	b943      	cbnz	r3, 800b0a6 <__swbuf_r+0x32>
 800b094:	4621      	mov	r1, r4
 800b096:	4628      	mov	r0, r5
 800b098:	f000 f82a 	bl	800b0f0 <__swsetup_r>
 800b09c:	b118      	cbz	r0, 800b0a6 <__swbuf_r+0x32>
 800b09e:	f04f 37ff 	mov.w	r7, #4294967295
 800b0a2:	4638      	mov	r0, r7
 800b0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	6922      	ldr	r2, [r4, #16]
 800b0aa:	b2f6      	uxtb	r6, r6
 800b0ac:	1a98      	subs	r0, r3, r2
 800b0ae:	6963      	ldr	r3, [r4, #20]
 800b0b0:	4637      	mov	r7, r6
 800b0b2:	4283      	cmp	r3, r0
 800b0b4:	dc05      	bgt.n	800b0c2 <__swbuf_r+0x4e>
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	f7ff fa6b 	bl	800a594 <_fflush_r>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d1ed      	bne.n	800b09e <__swbuf_r+0x2a>
 800b0c2:	68a3      	ldr	r3, [r4, #8]
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	60a3      	str	r3, [r4, #8]
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	1c5a      	adds	r2, r3, #1
 800b0cc:	6022      	str	r2, [r4, #0]
 800b0ce:	701e      	strb	r6, [r3, #0]
 800b0d0:	6962      	ldr	r2, [r4, #20]
 800b0d2:	1c43      	adds	r3, r0, #1
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d004      	beq.n	800b0e2 <__swbuf_r+0x6e>
 800b0d8:	89a3      	ldrh	r3, [r4, #12]
 800b0da:	07db      	lsls	r3, r3, #31
 800b0dc:	d5e1      	bpl.n	800b0a2 <__swbuf_r+0x2e>
 800b0de:	2e0a      	cmp	r6, #10
 800b0e0:	d1df      	bne.n	800b0a2 <__swbuf_r+0x2e>
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	f7ff fa55 	bl	800a594 <_fflush_r>
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	d0d9      	beq.n	800b0a2 <__swbuf_r+0x2e>
 800b0ee:	e7d6      	b.n	800b09e <__swbuf_r+0x2a>

0800b0f0 <__swsetup_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4b29      	ldr	r3, [pc, #164]	@ (800b198 <__swsetup_r+0xa8>)
 800b0f4:	4605      	mov	r5, r0
 800b0f6:	6818      	ldr	r0, [r3, #0]
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	b118      	cbz	r0, 800b104 <__swsetup_r+0x14>
 800b0fc:	6a03      	ldr	r3, [r0, #32]
 800b0fe:	b90b      	cbnz	r3, 800b104 <__swsetup_r+0x14>
 800b100:	f7fc fcb2 	bl	8007a68 <__sinit>
 800b104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b108:	0719      	lsls	r1, r3, #28
 800b10a:	d422      	bmi.n	800b152 <__swsetup_r+0x62>
 800b10c:	06da      	lsls	r2, r3, #27
 800b10e:	d407      	bmi.n	800b120 <__swsetup_r+0x30>
 800b110:	2209      	movs	r2, #9
 800b112:	602a      	str	r2, [r5, #0]
 800b114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b118:	f04f 30ff 	mov.w	r0, #4294967295
 800b11c:	81a3      	strh	r3, [r4, #12]
 800b11e:	e033      	b.n	800b188 <__swsetup_r+0x98>
 800b120:	0758      	lsls	r0, r3, #29
 800b122:	d512      	bpl.n	800b14a <__swsetup_r+0x5a>
 800b124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b126:	b141      	cbz	r1, 800b13a <__swsetup_r+0x4a>
 800b128:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b12c:	4299      	cmp	r1, r3
 800b12e:	d002      	beq.n	800b136 <__swsetup_r+0x46>
 800b130:	4628      	mov	r0, r5
 800b132:	f7fd fc35 	bl	80089a0 <_free_r>
 800b136:	2300      	movs	r3, #0
 800b138:	6363      	str	r3, [r4, #52]	@ 0x34
 800b13a:	89a3      	ldrh	r3, [r4, #12]
 800b13c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b140:	81a3      	strh	r3, [r4, #12]
 800b142:	2300      	movs	r3, #0
 800b144:	6063      	str	r3, [r4, #4]
 800b146:	6923      	ldr	r3, [r4, #16]
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	f043 0308 	orr.w	r3, r3, #8
 800b150:	81a3      	strh	r3, [r4, #12]
 800b152:	6923      	ldr	r3, [r4, #16]
 800b154:	b94b      	cbnz	r3, 800b16a <__swsetup_r+0x7a>
 800b156:	89a3      	ldrh	r3, [r4, #12]
 800b158:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b15c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b160:	d003      	beq.n	800b16a <__swsetup_r+0x7a>
 800b162:	4621      	mov	r1, r4
 800b164:	4628      	mov	r0, r5
 800b166:	f000 f882 	bl	800b26e <__smakebuf_r>
 800b16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b16e:	f013 0201 	ands.w	r2, r3, #1
 800b172:	d00a      	beq.n	800b18a <__swsetup_r+0x9a>
 800b174:	2200      	movs	r2, #0
 800b176:	60a2      	str	r2, [r4, #8]
 800b178:	6962      	ldr	r2, [r4, #20]
 800b17a:	4252      	negs	r2, r2
 800b17c:	61a2      	str	r2, [r4, #24]
 800b17e:	6922      	ldr	r2, [r4, #16]
 800b180:	b942      	cbnz	r2, 800b194 <__swsetup_r+0xa4>
 800b182:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b186:	d1c5      	bne.n	800b114 <__swsetup_r+0x24>
 800b188:	bd38      	pop	{r3, r4, r5, pc}
 800b18a:	0799      	lsls	r1, r3, #30
 800b18c:	bf58      	it	pl
 800b18e:	6962      	ldrpl	r2, [r4, #20]
 800b190:	60a2      	str	r2, [r4, #8]
 800b192:	e7f4      	b.n	800b17e <__swsetup_r+0x8e>
 800b194:	2000      	movs	r0, #0
 800b196:	e7f7      	b.n	800b188 <__swsetup_r+0x98>
 800b198:	20000018 	.word	0x20000018

0800b19c <_raise_r>:
 800b19c:	291f      	cmp	r1, #31
 800b19e:	b538      	push	{r3, r4, r5, lr}
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	d904      	bls.n	800b1b0 <_raise_r+0x14>
 800b1a6:	2316      	movs	r3, #22
 800b1a8:	6003      	str	r3, [r0, #0]
 800b1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ae:	bd38      	pop	{r3, r4, r5, pc}
 800b1b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1b2:	b112      	cbz	r2, 800b1ba <_raise_r+0x1e>
 800b1b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1b8:	b94b      	cbnz	r3, 800b1ce <_raise_r+0x32>
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	f000 f830 	bl	800b220 <_getpid_r>
 800b1c0:	4622      	mov	r2, r4
 800b1c2:	4601      	mov	r1, r0
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1ca:	f000 b817 	b.w	800b1fc <_kill_r>
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d00a      	beq.n	800b1e8 <_raise_r+0x4c>
 800b1d2:	1c59      	adds	r1, r3, #1
 800b1d4:	d103      	bne.n	800b1de <_raise_r+0x42>
 800b1d6:	2316      	movs	r3, #22
 800b1d8:	6003      	str	r3, [r0, #0]
 800b1da:	2001      	movs	r0, #1
 800b1dc:	e7e7      	b.n	800b1ae <_raise_r+0x12>
 800b1de:	2100      	movs	r1, #0
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1e6:	4798      	blx	r3
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	e7e0      	b.n	800b1ae <_raise_r+0x12>

0800b1ec <raise>:
 800b1ec:	4b02      	ldr	r3, [pc, #8]	@ (800b1f8 <raise+0xc>)
 800b1ee:	4601      	mov	r1, r0
 800b1f0:	6818      	ldr	r0, [r3, #0]
 800b1f2:	f7ff bfd3 	b.w	800b19c <_raise_r>
 800b1f6:	bf00      	nop
 800b1f8:	20000018 	.word	0x20000018

0800b1fc <_kill_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	2300      	movs	r3, #0
 800b200:	4d06      	ldr	r5, [pc, #24]	@ (800b21c <_kill_r+0x20>)
 800b202:	4604      	mov	r4, r0
 800b204:	4608      	mov	r0, r1
 800b206:	4611      	mov	r1, r2
 800b208:	602b      	str	r3, [r5, #0]
 800b20a:	f7f7 feb4 	bl	8002f76 <_kill>
 800b20e:	1c43      	adds	r3, r0, #1
 800b210:	d102      	bne.n	800b218 <_kill_r+0x1c>
 800b212:	682b      	ldr	r3, [r5, #0]
 800b214:	b103      	cbz	r3, 800b218 <_kill_r+0x1c>
 800b216:	6023      	str	r3, [r4, #0]
 800b218:	bd38      	pop	{r3, r4, r5, pc}
 800b21a:	bf00      	nop
 800b21c:	200005b4 	.word	0x200005b4

0800b220 <_getpid_r>:
 800b220:	f7f7 bea2 	b.w	8002f68 <_getpid>

0800b224 <__swhatbuf_r>:
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	460c      	mov	r4, r1
 800b228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b22c:	4615      	mov	r5, r2
 800b22e:	2900      	cmp	r1, #0
 800b230:	461e      	mov	r6, r3
 800b232:	b096      	sub	sp, #88	@ 0x58
 800b234:	da0c      	bge.n	800b250 <__swhatbuf_r+0x2c>
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	2100      	movs	r1, #0
 800b23a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b23e:	bf14      	ite	ne
 800b240:	2340      	movne	r3, #64	@ 0x40
 800b242:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b246:	2000      	movs	r0, #0
 800b248:	6031      	str	r1, [r6, #0]
 800b24a:	602b      	str	r3, [r5, #0]
 800b24c:	b016      	add	sp, #88	@ 0x58
 800b24e:	bd70      	pop	{r4, r5, r6, pc}
 800b250:	466a      	mov	r2, sp
 800b252:	f000 f849 	bl	800b2e8 <_fstat_r>
 800b256:	2800      	cmp	r0, #0
 800b258:	dbed      	blt.n	800b236 <__swhatbuf_r+0x12>
 800b25a:	9901      	ldr	r1, [sp, #4]
 800b25c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b260:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b264:	4259      	negs	r1, r3
 800b266:	4159      	adcs	r1, r3
 800b268:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b26c:	e7eb      	b.n	800b246 <__swhatbuf_r+0x22>

0800b26e <__smakebuf_r>:
 800b26e:	898b      	ldrh	r3, [r1, #12]
 800b270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b272:	079d      	lsls	r5, r3, #30
 800b274:	4606      	mov	r6, r0
 800b276:	460c      	mov	r4, r1
 800b278:	d507      	bpl.n	800b28a <__smakebuf_r+0x1c>
 800b27a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b27e:	6023      	str	r3, [r4, #0]
 800b280:	6123      	str	r3, [r4, #16]
 800b282:	2301      	movs	r3, #1
 800b284:	6163      	str	r3, [r4, #20]
 800b286:	b003      	add	sp, #12
 800b288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b28a:	466a      	mov	r2, sp
 800b28c:	ab01      	add	r3, sp, #4
 800b28e:	f7ff ffc9 	bl	800b224 <__swhatbuf_r>
 800b292:	9f00      	ldr	r7, [sp, #0]
 800b294:	4605      	mov	r5, r0
 800b296:	4639      	mov	r1, r7
 800b298:	4630      	mov	r0, r6
 800b29a:	f7fd fbf3 	bl	8008a84 <_malloc_r>
 800b29e:	b948      	cbnz	r0, 800b2b4 <__smakebuf_r+0x46>
 800b2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a4:	059a      	lsls	r2, r3, #22
 800b2a6:	d4ee      	bmi.n	800b286 <__smakebuf_r+0x18>
 800b2a8:	f023 0303 	bic.w	r3, r3, #3
 800b2ac:	f043 0302 	orr.w	r3, r3, #2
 800b2b0:	81a3      	strh	r3, [r4, #12]
 800b2b2:	e7e2      	b.n	800b27a <__smakebuf_r+0xc>
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2be:	81a3      	strh	r3, [r4, #12]
 800b2c0:	9b01      	ldr	r3, [sp, #4]
 800b2c2:	6020      	str	r0, [r4, #0]
 800b2c4:	b15b      	cbz	r3, 800b2de <__smakebuf_r+0x70>
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2cc:	f000 f81e 	bl	800b30c <_isatty_r>
 800b2d0:	b128      	cbz	r0, 800b2de <__smakebuf_r+0x70>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	f023 0303 	bic.w	r3, r3, #3
 800b2d8:	f043 0301 	orr.w	r3, r3, #1
 800b2dc:	81a3      	strh	r3, [r4, #12]
 800b2de:	89a3      	ldrh	r3, [r4, #12]
 800b2e0:	431d      	orrs	r5, r3
 800b2e2:	81a5      	strh	r5, [r4, #12]
 800b2e4:	e7cf      	b.n	800b286 <__smakebuf_r+0x18>
	...

0800b2e8 <_fstat_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	4d06      	ldr	r5, [pc, #24]	@ (800b308 <_fstat_r+0x20>)
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	4608      	mov	r0, r1
 800b2f2:	4611      	mov	r1, r2
 800b2f4:	602b      	str	r3, [r5, #0]
 800b2f6:	f7f7 fe9d 	bl	8003034 <_fstat>
 800b2fa:	1c43      	adds	r3, r0, #1
 800b2fc:	d102      	bne.n	800b304 <_fstat_r+0x1c>
 800b2fe:	682b      	ldr	r3, [r5, #0]
 800b300:	b103      	cbz	r3, 800b304 <_fstat_r+0x1c>
 800b302:	6023      	str	r3, [r4, #0]
 800b304:	bd38      	pop	{r3, r4, r5, pc}
 800b306:	bf00      	nop
 800b308:	200005b4 	.word	0x200005b4

0800b30c <_isatty_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	2300      	movs	r3, #0
 800b310:	4d05      	ldr	r5, [pc, #20]	@ (800b328 <_isatty_r+0x1c>)
 800b312:	4604      	mov	r4, r0
 800b314:	4608      	mov	r0, r1
 800b316:	602b      	str	r3, [r5, #0]
 800b318:	f7f7 fe9b 	bl	8003052 <_isatty>
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d102      	bne.n	800b326 <_isatty_r+0x1a>
 800b320:	682b      	ldr	r3, [r5, #0]
 800b322:	b103      	cbz	r3, 800b326 <_isatty_r+0x1a>
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	bd38      	pop	{r3, r4, r5, pc}
 800b328:	200005b4 	.word	0x200005b4

0800b32c <_init>:
 800b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32e:	bf00      	nop
 800b330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b332:	bc08      	pop	{r3}
 800b334:	469e      	mov	lr, r3
 800b336:	4770      	bx	lr

0800b338 <_fini>:
 800b338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33a:	bf00      	nop
 800b33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b33e:	bc08      	pop	{r3}
 800b340:	469e      	mov	lr, r3
 800b342:	4770      	bx	lr
